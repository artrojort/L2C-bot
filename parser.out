Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON
Rule 2     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 3     main2 -> varsblock block RCURLY
Rule 4     funcsblock -> funcs funcsblock
Rule 5     funcsblock -> empty
Rule 6     funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
Rule 7     globalvarsblock -> vars varsblock
Rule 8     globalvarsblock -> empty
Rule 9     varsblock -> vars varsblock
Rule 10    varsblock -> empty
Rule 11    vars -> VARDEF type ID vars1 SEMICOLON
Rule 12    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 13    vars1 -> empty
Rule 14    choosetype -> type
Rule 15    choosetype -> VOID
Rule 16    params -> type ID params1
Rule 17    params -> empty
Rule 18    params1 -> COMMA type ID params1
Rule 19    params1 -> empty
Rule 20    block -> statute block
Rule 21    block -> empty
Rule 22    statute -> cond
Rule 23    statute -> assign
Rule 24    statute -> call
Rule 25    statute -> cin
Rule 26    statute -> cout
Rule 27    statute -> delay
Rule 28    statute -> forward
Rule 29    statute -> backward
Rule 30    statute -> turnleft
Rule 31    statute -> turnright
Rule 32    statute -> servo
Rule 33    statute -> lights
Rule 34    statute -> display
Rule 35    statute -> distance
Rule 36    statute -> stop
Rule 37    statute -> return
Rule 38    cond -> IF LPAREN express RPAREN block else SEMICOLON
Rule 39    else -> ELSE block
Rule 40    else -> empty
Rule 41    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 42    assign1 -> LBRACKET express RBRACKET
Rule 43    assign1 -> empty
Rule 44    call -> CALL ID LPAREN call1 RPAREN SEMICOLON
Rule 45    call1 -> express call2
Rule 46    call1 -> empty
Rule 47    call2 -> COMMA call1
Rule 48    call2 -> empty
Rule 49    cin -> CIN cin1 SEMICOLON
Rule 50    cin1 -> cin2
Rule 51    cin1 -> cin3
Rule 52    cin2 -> LPAREN ID RPAREN
Rule 53    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 54    cin4 -> COMMA ID cin4
Rule 55    cin4 -> empty
Rule 56    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 57    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 58    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 59    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 60    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 61    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 62    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 63    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 64    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 65    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 66    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 67    return -> RETURN express SEMICOLON
Rule 68    type -> INT
Rule 69    type -> FLOAT
Rule 70    type -> bool
Rule 71    type -> CHAR
Rule 72    type -> STRING
Rule 73    constant -> ID
Rule 74    constant -> CTE_INT
Rule 75    constant -> CTE_FLOAT
Rule 76    constant -> CTE_STRING
Rule 77    constant -> CTE_CHAR
Rule 78    express -> compare express1
Rule 79    express1 -> express2 compare
Rule 80    express1 -> empty
Rule 81    express2 -> AND
Rule 82    express2 -> OR
Rule 83    compare -> exp compare1
Rule 84    compare1 -> LESSTHAN exp
Rule 85    compare1 -> GREATERTHAN exp
Rule 86    compare1 -> EQUALS exp
Rule 87    compare1 -> NOTEQUAL exp
Rule 88    compare1 -> empty
Rule 89    exp -> term exp1
Rule 90    exp1 -> exp2 term
Rule 91    exp1 -> empty
Rule 92    exp2 -> PLUS
Rule 93    exp2 -> MINUS
Rule 94    term -> factor term1
Rule 95    term1 -> term2 term
Rule 96    term1 -> empty
Rule 97    term2 -> MULTI
Rule 98    term2 -> DIVI
Rule 99    factor -> LPAREN express RPAREN
Rule 100   factor -> factor1 constant
Rule 101   factor1 -> PLUS
Rule 102   factor1 -> MINUS
Rule 103   factor1 -> empty
Rule 104   empty -> <empty>

Terminals, with rules where they appear

AND                  : 81
ASSIGN               : 41
BACKWARD             : 59
CALL                 : 44
CHAR                 : 71
CIN                  : 49
COMMA                : 18 47 54 58 59 60 61 63
COUT                 : 56
CTE_ARR              : 
CTE_CHAR             : 64 77
CTE_FLOAT            : 75
CTE_INT              : 12 53 57 63 63 74
CTE_STRING           : 76
DELAY                : 57
DISPLAY              : 64
DISTANCE             : 65
DIVI                 : 98
ELSE                 : 39
EQUALS               : 86
FIN                  : 1
FLOAT                : 69
FORWARD              : 58
FUNCDEF              : 6
GREATERTHAN          : 85
ID                   : 6 11 16 18 41 44 52 54 73
IF                   : 38
INT                  : 68
LBRACKET             : 12 42 53
LCURLY               : 2 6
LESSTHAN             : 84
LIGHTS               : 63
LPAREN               : 2 6 38 44 52 53 56 57 58 59 60 61 62 63 64 65 66 99
MAIN                 : 2
MINUS                : 93 102
MULTI                : 97
NOTEQUAL             : 87
OR                   : 82
PLUS                 : 92 101
PROGRAM              : 1
RBRACKET             : 12 42 53
RCURLY               : 3 6
RETURN               : 67
RPAREN               : 2 6 38 44 52 53 56 57 58 59 60 61 62 63 64 65 66 99
SEMICOLON            : 1 11 38 41 44 49 56 57 58 59 60 61 62 63 64 65 66 67
SERVO                : 62
STOP                 : 66
STRING               : 72
TURNLEFT             : 60
TURNRIGHT            : 61
VARDEF               : 11
VOID                 : 15
bool                 : 70
error                : 

Nonterminals, with rules where they appear

assign               : 23
assign1              : 41
backward             : 29
block                : 3 6 20 38 39
call                 : 24
call1                : 44 47
call2                : 45
choosetype           : 6
cin                  : 25
cin1                 : 49
cin2                 : 50
cin3                 : 51
cin4                 : 53 54
compare              : 78 79
compare1             : 83
cond                 : 22
constant             : 100
cout                 : 26
delay                : 27
display              : 34
distance             : 35
else                 : 38
empty                : 5 8 10 13 17 19 21 40 43 46 48 55 80 88 91 96 103
exp                  : 83 84 85 86 87
exp1                 : 89
exp2                 : 90
express              : 38 41 42 45 56 58 58 59 59 60 60 61 61 62 67 99
express1             : 78
express2             : 79
factor               : 94
factor1              : 100
forward              : 28
funcs                : 4
funcsblock           : 1 4
globalvarsblock      : 1
lights               : 33
main                 : 1
main2                : 2
params               : 6
params1              : 16 18
program              : 0
return               : 37
servo                : 32
statute              : 20
stop                 : 36
term                 : 89 90 95
term1                : 94
term2                : 95
turnleft             : 30
turnright            : 31
type                 : 11 14 16 18
vars                 : 7 9
vars1                : 11
varsblock            : 3 6 7 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM globalvarsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . globalvarsblock funcsblock main FIN SEMICOLON
    (7) globalvarsblock -> . vars varsblock
    (8) globalvarsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (104) empty -> .

    VARDEF          shift and go to state 5
    FUNCDEF         reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    globalvarsblock                shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 6

state 3

    (1) program -> PROGRAM globalvarsblock . funcsblock main FIN SEMICOLON
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (104) empty -> .

    FUNCDEF         shift and go to state 8
    MAIN            reduce using rule 104 (empty -> .)

    funcs                          shift and go to state 7
    funcsblock                     shift and go to state 9
    empty                          shift and go to state 10

state 4

    (7) globalvarsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (104) empty -> .

    VARDEF          shift and go to state 5
    FUNCDEF         reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    varsblock                      shift and go to state 12
    empty                          shift and go to state 13
    vars                           shift and go to state 11

state 5

    (11) vars -> VARDEF . type ID vars1 SEMICOLON
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . bool
    (71) type -> . CHAR
    (72) type -> . STRING

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 18
    CHAR            shift and go to state 17
    STRING          shift and go to state 14

    type                           shift and go to state 19

state 6

    (8) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 8 (globalvarsblock -> empty .)
    MAIN            reduce using rule 8 (globalvarsblock -> empty .)


state 7

    (4) funcsblock -> funcs . funcsblock
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (104) empty -> .

    FUNCDEF         shift and go to state 8
    MAIN            reduce using rule 104 (empty -> .)

    funcs                          shift and go to state 7
    funcsblock                     shift and go to state 20
    empty                          shift and go to state 10

state 8

    (6) funcs -> FUNCDEF . choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (14) choosetype -> . type
    (15) choosetype -> . VOID
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . bool
    (71) type -> . CHAR
    (72) type -> . STRING

    VOID            shift and go to state 21
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 18
    CHAR            shift and go to state 17
    STRING          shift and go to state 14

    choosetype                     shift and go to state 22
    type                           shift and go to state 23

state 9

    (1) program -> PROGRAM globalvarsblock funcsblock . main FIN SEMICOLON
    (2) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 24

    main                           shift and go to state 25

state 10

    (5) funcsblock -> empty .

    MAIN            reduce using rule 5 (funcsblock -> empty .)


state 11

    (9) varsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (104) empty -> .

    VARDEF          shift and go to state 5
    FUNCDEF         reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    CALL            reduce using rule 104 (empty -> .)
    CIN             reduce using rule 104 (empty -> .)
    COUT            reduce using rule 104 (empty -> .)
    DELAY           reduce using rule 104 (empty -> .)
    FORWARD         reduce using rule 104 (empty -> .)
    BACKWARD        reduce using rule 104 (empty -> .)
    TURNLEFT        reduce using rule 104 (empty -> .)
    TURNRIGHT       reduce using rule 104 (empty -> .)
    SERVO           reduce using rule 104 (empty -> .)
    LIGHTS          reduce using rule 104 (empty -> .)
    DISPLAY         reduce using rule 104 (empty -> .)
    DISTANCE        reduce using rule 104 (empty -> .)
    STOP            reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    RCURLY          reduce using rule 104 (empty -> .)

    varsblock                      shift and go to state 26
    empty                          shift and go to state 13
    vars                           shift and go to state 11

state 12

    (7) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 7 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 7 (globalvarsblock -> vars varsblock .)


state 13

    (10) varsblock -> empty .

    FUNCDEF         reduce using rule 10 (varsblock -> empty .)
    MAIN            reduce using rule 10 (varsblock -> empty .)
    IF              reduce using rule 10 (varsblock -> empty .)
    ID              reduce using rule 10 (varsblock -> empty .)
    CALL            reduce using rule 10 (varsblock -> empty .)
    CIN             reduce using rule 10 (varsblock -> empty .)
    COUT            reduce using rule 10 (varsblock -> empty .)
    DELAY           reduce using rule 10 (varsblock -> empty .)
    FORWARD         reduce using rule 10 (varsblock -> empty .)
    BACKWARD        reduce using rule 10 (varsblock -> empty .)
    TURNLEFT        reduce using rule 10 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 10 (varsblock -> empty .)
    SERVO           reduce using rule 10 (varsblock -> empty .)
    LIGHTS          reduce using rule 10 (varsblock -> empty .)
    DISPLAY         reduce using rule 10 (varsblock -> empty .)
    DISTANCE        reduce using rule 10 (varsblock -> empty .)
    STOP            reduce using rule 10 (varsblock -> empty .)
    RETURN          reduce using rule 10 (varsblock -> empty .)
    RCURLY          reduce using rule 10 (varsblock -> empty .)


state 14

    (72) type -> STRING .

    ID              reduce using rule 72 (type -> STRING .)


state 15

    (68) type -> INT .

    ID              reduce using rule 68 (type -> INT .)


state 16

    (69) type -> FLOAT .

    ID              reduce using rule 69 (type -> FLOAT .)


state 17

    (71) type -> CHAR .

    ID              reduce using rule 71 (type -> CHAR .)


state 18

    (70) type -> bool .

    ID              reduce using rule 70 (type -> bool .)


state 19

    (11) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 27


state 20

    (4) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 4 (funcsblock -> funcs funcsblock .)


state 21

    (15) choosetype -> VOID .

    ID              reduce using rule 15 (choosetype -> VOID .)


state 22

    (6) funcs -> FUNCDEF choosetype . ID LPAREN params RPAREN LCURLY varsblock block RCURLY

    ID              shift and go to state 28


state 23

    (14) choosetype -> type .

    ID              reduce using rule 14 (choosetype -> type .)


state 24

    (2) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 29


state 25

    (1) program -> PROGRAM globalvarsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 30


state 26

    (9) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (varsblock -> vars varsblock .)
    IF              reduce using rule 9 (varsblock -> vars varsblock .)
    ID              reduce using rule 9 (varsblock -> vars varsblock .)
    CALL            reduce using rule 9 (varsblock -> vars varsblock .)
    CIN             reduce using rule 9 (varsblock -> vars varsblock .)
    COUT            reduce using rule 9 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 9 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 9 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 9 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 9 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 9 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 9 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 9 (varsblock -> vars varsblock .)
    STOP            reduce using rule 9 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 9 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 9 (varsblock -> vars varsblock .)


state 27

    (11) vars -> VARDEF type ID . vars1 SEMICOLON
    (12) vars1 -> . LBRACKET CTE_INT RBRACKET
    (13) vars1 -> . empty
    (104) empty -> .

    LBRACKET        shift and go to state 31
    SEMICOLON       reduce using rule 104 (empty -> .)

    vars1                          shift and go to state 32
    empty                          shift and go to state 33

state 28

    (6) funcs -> FUNCDEF choosetype ID . LPAREN params RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 34


state 29

    (2) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 35


state 30

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 36


state 31

    (12) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 37


state 32

    (11) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 38


state 33

    (13) vars1 -> empty .

    SEMICOLON       reduce using rule 13 (vars1 -> empty .)


state 34

    (6) funcs -> FUNCDEF choosetype ID LPAREN . params RPAREN LCURLY varsblock block RCURLY
    (16) params -> . type ID params1
    (17) params -> . empty
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . bool
    (71) type -> . CHAR
    (72) type -> . STRING
    (104) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 18
    CHAR            shift and go to state 17
    STRING          shift and go to state 14
    RPAREN          reduce using rule 104 (empty -> .)

    params                         shift and go to state 39
    empty                          shift and go to state 40
    type                           shift and go to state 41

state 35

    (2) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 42


state 36

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .)


state 37

    (12) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 43


state 38

    (11) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CALL            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 39

    (6) funcs -> FUNCDEF choosetype ID LPAREN params . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 44


state 40

    (17) params -> empty .

    RPAREN          reduce using rule 17 (params -> empty .)


state 41

    (16) params -> type . ID params1

    ID              shift and go to state 45


state 42

    (2) main -> MAIN LPAREN RPAREN LCURLY . main2
    (3) main2 -> . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (104) empty -> .

    VARDEF          shift and go to state 5
    IF              reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    CALL            reduce using rule 104 (empty -> .)
    CIN             reduce using rule 104 (empty -> .)
    COUT            reduce using rule 104 (empty -> .)
    DELAY           reduce using rule 104 (empty -> .)
    FORWARD         reduce using rule 104 (empty -> .)
    BACKWARD        reduce using rule 104 (empty -> .)
    TURNLEFT        reduce using rule 104 (empty -> .)
    TURNRIGHT       reduce using rule 104 (empty -> .)
    SERVO           reduce using rule 104 (empty -> .)
    LIGHTS          reduce using rule 104 (empty -> .)
    DISPLAY         reduce using rule 104 (empty -> .)
    DISTANCE        reduce using rule 104 (empty -> .)
    STOP            reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    RCURLY          reduce using rule 104 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 46
    main2                          shift and go to state 47
    empty                          shift and go to state 13

state 43

    (12) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 12 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 44

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 48


state 45

    (16) params -> type ID . params1
    (18) params1 -> . COMMA type ID params1
    (19) params1 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 50
    RPAREN          reduce using rule 104 (empty -> .)

    params1                        shift and go to state 49
    empty                          shift and go to state 51

state 46

    (3) main2 -> varsblock . block RCURLY
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (104) empty -> .
    (38) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (41) assign -> . ID assign1 ASSIGN express SEMICOLON
    (44) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (49) cin -> . CIN cin1 SEMICOLON
    (56) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (57) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (58) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (59) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (60) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (61) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (62) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (63) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (64) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (65) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (66) stop -> . STOP LPAREN RPAREN SEMICOLON
    (67) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 104 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    CALL            shift and go to state 83
    CIN             shift and go to state 56
    COUT            shift and go to state 61
    DELAY           shift and go to state 57
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 67
    TURNLEFT        shift and go to state 54
    TURNRIGHT       shift and go to state 74
    SERVO           shift and go to state 79
    LIGHTS          shift and go to state 82
    DISPLAY         shift and go to state 60
    DISTANCE        shift and go to state 59
    STOP            shift and go to state 55
    RETURN          shift and go to state 52

    cout                           shift and go to state 53
    cond                           shift and go to state 58
    turnright                      shift and go to state 62
    delay                          shift and go to state 63
    lights                         shift and go to state 64
    call                           shift and go to state 65
    forward                        shift and go to state 66
    empty                          shift and go to state 68
    return                         shift and go to state 69
    servo                          shift and go to state 70
    distance                       shift and go to state 71
    turnleft                       shift and go to state 72
    stop                           shift and go to state 73
    statute                        shift and go to state 78
    cin                            shift and go to state 80
    assign                         shift and go to state 81
    backward                       shift and go to state 84
    display                        shift and go to state 85
    block                          shift and go to state 86

state 47

    (2) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 2 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 48

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (104) empty -> .

    VARDEF          shift and go to state 5
    IF              reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    CALL            reduce using rule 104 (empty -> .)
    CIN             reduce using rule 104 (empty -> .)
    COUT            reduce using rule 104 (empty -> .)
    DELAY           reduce using rule 104 (empty -> .)
    FORWARD         reduce using rule 104 (empty -> .)
    BACKWARD        reduce using rule 104 (empty -> .)
    TURNLEFT        reduce using rule 104 (empty -> .)
    TURNRIGHT       reduce using rule 104 (empty -> .)
    SERVO           reduce using rule 104 (empty -> .)
    LIGHTS          reduce using rule 104 (empty -> .)
    DISPLAY         reduce using rule 104 (empty -> .)
    DISTANCE        reduce using rule 104 (empty -> .)
    STOP            reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    RCURLY          reduce using rule 104 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 87
    empty                          shift and go to state 13

state 49

    (16) params -> type ID params1 .

    RPAREN          reduce using rule 16 (params -> type ID params1 .)


state 50

    (18) params1 -> COMMA . type ID params1
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . bool
    (71) type -> . CHAR
    (72) type -> . STRING

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 18
    CHAR            shift and go to state 17
    STRING          shift and go to state 14

    type                           shift and go to state 88

state 51

    (19) params1 -> empty .

    RPAREN          reduce using rule 19 (params1 -> empty .)


state 52

    (67) return -> RETURN . express SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 90
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 53

    (26) statute -> cout .

    IF              reduce using rule 26 (statute -> cout .)
    ID              reduce using rule 26 (statute -> cout .)
    CALL            reduce using rule 26 (statute -> cout .)
    CIN             reduce using rule 26 (statute -> cout .)
    COUT            reduce using rule 26 (statute -> cout .)
    DELAY           reduce using rule 26 (statute -> cout .)
    FORWARD         reduce using rule 26 (statute -> cout .)
    BACKWARD        reduce using rule 26 (statute -> cout .)
    TURNLEFT        reduce using rule 26 (statute -> cout .)
    TURNRIGHT       reduce using rule 26 (statute -> cout .)
    SERVO           reduce using rule 26 (statute -> cout .)
    LIGHTS          reduce using rule 26 (statute -> cout .)
    DISPLAY         reduce using rule 26 (statute -> cout .)
    DISTANCE        reduce using rule 26 (statute -> cout .)
    STOP            reduce using rule 26 (statute -> cout .)
    RETURN          reduce using rule 26 (statute -> cout .)
    ELSE            reduce using rule 26 (statute -> cout .)
    SEMICOLON       reduce using rule 26 (statute -> cout .)
    RCURLY          reduce using rule 26 (statute -> cout .)


state 54

    (60) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 99


state 55

    (66) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 56

    (49) cin -> CIN . cin1 SEMICOLON
    (50) cin1 -> . cin2
    (51) cin1 -> . cin3
    (52) cin2 -> . LPAREN ID RPAREN
    (53) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 102
    LBRACKET        shift and go to state 101

    cin2                           shift and go to state 103
    cin3                           shift and go to state 104
    cin1                           shift and go to state 105

state 57

    (57) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 58

    (22) statute -> cond .

    IF              reduce using rule 22 (statute -> cond .)
    ID              reduce using rule 22 (statute -> cond .)
    CALL            reduce using rule 22 (statute -> cond .)
    CIN             reduce using rule 22 (statute -> cond .)
    COUT            reduce using rule 22 (statute -> cond .)
    DELAY           reduce using rule 22 (statute -> cond .)
    FORWARD         reduce using rule 22 (statute -> cond .)
    BACKWARD        reduce using rule 22 (statute -> cond .)
    TURNLEFT        reduce using rule 22 (statute -> cond .)
    TURNRIGHT       reduce using rule 22 (statute -> cond .)
    SERVO           reduce using rule 22 (statute -> cond .)
    LIGHTS          reduce using rule 22 (statute -> cond .)
    DISPLAY         reduce using rule 22 (statute -> cond .)
    DISTANCE        reduce using rule 22 (statute -> cond .)
    STOP            reduce using rule 22 (statute -> cond .)
    RETURN          reduce using rule 22 (statute -> cond .)
    ELSE            reduce using rule 22 (statute -> cond .)
    SEMICOLON       reduce using rule 22 (statute -> cond .)
    RCURLY          reduce using rule 22 (statute -> cond .)


state 59

    (65) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 60

    (64) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 108


state 61

    (56) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 62

    (31) statute -> turnright .

    IF              reduce using rule 31 (statute -> turnright .)
    ID              reduce using rule 31 (statute -> turnright .)
    CALL            reduce using rule 31 (statute -> turnright .)
    CIN             reduce using rule 31 (statute -> turnright .)
    COUT            reduce using rule 31 (statute -> turnright .)
    DELAY           reduce using rule 31 (statute -> turnright .)
    FORWARD         reduce using rule 31 (statute -> turnright .)
    BACKWARD        reduce using rule 31 (statute -> turnright .)
    TURNLEFT        reduce using rule 31 (statute -> turnright .)
    TURNRIGHT       reduce using rule 31 (statute -> turnright .)
    SERVO           reduce using rule 31 (statute -> turnright .)
    LIGHTS          reduce using rule 31 (statute -> turnright .)
    DISPLAY         reduce using rule 31 (statute -> turnright .)
    DISTANCE        reduce using rule 31 (statute -> turnright .)
    STOP            reduce using rule 31 (statute -> turnright .)
    RETURN          reduce using rule 31 (statute -> turnright .)
    ELSE            reduce using rule 31 (statute -> turnright .)
    SEMICOLON       reduce using rule 31 (statute -> turnright .)
    RCURLY          reduce using rule 31 (statute -> turnright .)


state 63

    (27) statute -> delay .

    IF              reduce using rule 27 (statute -> delay .)
    ID              reduce using rule 27 (statute -> delay .)
    CALL            reduce using rule 27 (statute -> delay .)
    CIN             reduce using rule 27 (statute -> delay .)
    COUT            reduce using rule 27 (statute -> delay .)
    DELAY           reduce using rule 27 (statute -> delay .)
    FORWARD         reduce using rule 27 (statute -> delay .)
    BACKWARD        reduce using rule 27 (statute -> delay .)
    TURNLEFT        reduce using rule 27 (statute -> delay .)
    TURNRIGHT       reduce using rule 27 (statute -> delay .)
    SERVO           reduce using rule 27 (statute -> delay .)
    LIGHTS          reduce using rule 27 (statute -> delay .)
    DISPLAY         reduce using rule 27 (statute -> delay .)
    DISTANCE        reduce using rule 27 (statute -> delay .)
    STOP            reduce using rule 27 (statute -> delay .)
    RETURN          reduce using rule 27 (statute -> delay .)
    ELSE            reduce using rule 27 (statute -> delay .)
    SEMICOLON       reduce using rule 27 (statute -> delay .)
    RCURLY          reduce using rule 27 (statute -> delay .)


state 64

    (33) statute -> lights .

    IF              reduce using rule 33 (statute -> lights .)
    ID              reduce using rule 33 (statute -> lights .)
    CALL            reduce using rule 33 (statute -> lights .)
    CIN             reduce using rule 33 (statute -> lights .)
    COUT            reduce using rule 33 (statute -> lights .)
    DELAY           reduce using rule 33 (statute -> lights .)
    FORWARD         reduce using rule 33 (statute -> lights .)
    BACKWARD        reduce using rule 33 (statute -> lights .)
    TURNLEFT        reduce using rule 33 (statute -> lights .)
    TURNRIGHT       reduce using rule 33 (statute -> lights .)
    SERVO           reduce using rule 33 (statute -> lights .)
    LIGHTS          reduce using rule 33 (statute -> lights .)
    DISPLAY         reduce using rule 33 (statute -> lights .)
    DISTANCE        reduce using rule 33 (statute -> lights .)
    STOP            reduce using rule 33 (statute -> lights .)
    RETURN          reduce using rule 33 (statute -> lights .)
    ELSE            reduce using rule 33 (statute -> lights .)
    SEMICOLON       reduce using rule 33 (statute -> lights .)
    RCURLY          reduce using rule 33 (statute -> lights .)


state 65

    (24) statute -> call .

    IF              reduce using rule 24 (statute -> call .)
    ID              reduce using rule 24 (statute -> call .)
    CALL            reduce using rule 24 (statute -> call .)
    CIN             reduce using rule 24 (statute -> call .)
    COUT            reduce using rule 24 (statute -> call .)
    DELAY           reduce using rule 24 (statute -> call .)
    FORWARD         reduce using rule 24 (statute -> call .)
    BACKWARD        reduce using rule 24 (statute -> call .)
    TURNLEFT        reduce using rule 24 (statute -> call .)
    TURNRIGHT       reduce using rule 24 (statute -> call .)
    SERVO           reduce using rule 24 (statute -> call .)
    LIGHTS          reduce using rule 24 (statute -> call .)
    DISPLAY         reduce using rule 24 (statute -> call .)
    DISTANCE        reduce using rule 24 (statute -> call .)
    STOP            reduce using rule 24 (statute -> call .)
    RETURN          reduce using rule 24 (statute -> call .)
    ELSE            reduce using rule 24 (statute -> call .)
    SEMICOLON       reduce using rule 24 (statute -> call .)
    RCURLY          reduce using rule 24 (statute -> call .)


state 66

    (28) statute -> forward .

    IF              reduce using rule 28 (statute -> forward .)
    ID              reduce using rule 28 (statute -> forward .)
    CALL            reduce using rule 28 (statute -> forward .)
    CIN             reduce using rule 28 (statute -> forward .)
    COUT            reduce using rule 28 (statute -> forward .)
    DELAY           reduce using rule 28 (statute -> forward .)
    FORWARD         reduce using rule 28 (statute -> forward .)
    BACKWARD        reduce using rule 28 (statute -> forward .)
    TURNLEFT        reduce using rule 28 (statute -> forward .)
    TURNRIGHT       reduce using rule 28 (statute -> forward .)
    SERVO           reduce using rule 28 (statute -> forward .)
    LIGHTS          reduce using rule 28 (statute -> forward .)
    DISPLAY         reduce using rule 28 (statute -> forward .)
    DISTANCE        reduce using rule 28 (statute -> forward .)
    STOP            reduce using rule 28 (statute -> forward .)
    RETURN          reduce using rule 28 (statute -> forward .)
    ELSE            reduce using rule 28 (statute -> forward .)
    SEMICOLON       reduce using rule 28 (statute -> forward .)
    RCURLY          reduce using rule 28 (statute -> forward .)


state 67

    (59) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 110


state 68

    (21) block -> empty .

    RCURLY          reduce using rule 21 (block -> empty .)
    SEMICOLON       reduce using rule 21 (block -> empty .)
    ELSE            reduce using rule 21 (block -> empty .)


state 69

    (37) statute -> return .

    IF              reduce using rule 37 (statute -> return .)
    ID              reduce using rule 37 (statute -> return .)
    CALL            reduce using rule 37 (statute -> return .)
    CIN             reduce using rule 37 (statute -> return .)
    COUT            reduce using rule 37 (statute -> return .)
    DELAY           reduce using rule 37 (statute -> return .)
    FORWARD         reduce using rule 37 (statute -> return .)
    BACKWARD        reduce using rule 37 (statute -> return .)
    TURNLEFT        reduce using rule 37 (statute -> return .)
    TURNRIGHT       reduce using rule 37 (statute -> return .)
    SERVO           reduce using rule 37 (statute -> return .)
    LIGHTS          reduce using rule 37 (statute -> return .)
    DISPLAY         reduce using rule 37 (statute -> return .)
    DISTANCE        reduce using rule 37 (statute -> return .)
    STOP            reduce using rule 37 (statute -> return .)
    RETURN          reduce using rule 37 (statute -> return .)
    ELSE            reduce using rule 37 (statute -> return .)
    SEMICOLON       reduce using rule 37 (statute -> return .)
    RCURLY          reduce using rule 37 (statute -> return .)


state 70

    (32) statute -> servo .

    IF              reduce using rule 32 (statute -> servo .)
    ID              reduce using rule 32 (statute -> servo .)
    CALL            reduce using rule 32 (statute -> servo .)
    CIN             reduce using rule 32 (statute -> servo .)
    COUT            reduce using rule 32 (statute -> servo .)
    DELAY           reduce using rule 32 (statute -> servo .)
    FORWARD         reduce using rule 32 (statute -> servo .)
    BACKWARD        reduce using rule 32 (statute -> servo .)
    TURNLEFT        reduce using rule 32 (statute -> servo .)
    TURNRIGHT       reduce using rule 32 (statute -> servo .)
    SERVO           reduce using rule 32 (statute -> servo .)
    LIGHTS          reduce using rule 32 (statute -> servo .)
    DISPLAY         reduce using rule 32 (statute -> servo .)
    DISTANCE        reduce using rule 32 (statute -> servo .)
    STOP            reduce using rule 32 (statute -> servo .)
    RETURN          reduce using rule 32 (statute -> servo .)
    ELSE            reduce using rule 32 (statute -> servo .)
    SEMICOLON       reduce using rule 32 (statute -> servo .)
    RCURLY          reduce using rule 32 (statute -> servo .)


state 71

    (35) statute -> distance .

    IF              reduce using rule 35 (statute -> distance .)
    ID              reduce using rule 35 (statute -> distance .)
    CALL            reduce using rule 35 (statute -> distance .)
    CIN             reduce using rule 35 (statute -> distance .)
    COUT            reduce using rule 35 (statute -> distance .)
    DELAY           reduce using rule 35 (statute -> distance .)
    FORWARD         reduce using rule 35 (statute -> distance .)
    BACKWARD        reduce using rule 35 (statute -> distance .)
    TURNLEFT        reduce using rule 35 (statute -> distance .)
    TURNRIGHT       reduce using rule 35 (statute -> distance .)
    SERVO           reduce using rule 35 (statute -> distance .)
    LIGHTS          reduce using rule 35 (statute -> distance .)
    DISPLAY         reduce using rule 35 (statute -> distance .)
    DISTANCE        reduce using rule 35 (statute -> distance .)
    STOP            reduce using rule 35 (statute -> distance .)
    RETURN          reduce using rule 35 (statute -> distance .)
    ELSE            reduce using rule 35 (statute -> distance .)
    SEMICOLON       reduce using rule 35 (statute -> distance .)
    RCURLY          reduce using rule 35 (statute -> distance .)


state 72

    (30) statute -> turnleft .

    IF              reduce using rule 30 (statute -> turnleft .)
    ID              reduce using rule 30 (statute -> turnleft .)
    CALL            reduce using rule 30 (statute -> turnleft .)
    CIN             reduce using rule 30 (statute -> turnleft .)
    COUT            reduce using rule 30 (statute -> turnleft .)
    DELAY           reduce using rule 30 (statute -> turnleft .)
    FORWARD         reduce using rule 30 (statute -> turnleft .)
    BACKWARD        reduce using rule 30 (statute -> turnleft .)
    TURNLEFT        reduce using rule 30 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 30 (statute -> turnleft .)
    SERVO           reduce using rule 30 (statute -> turnleft .)
    LIGHTS          reduce using rule 30 (statute -> turnleft .)
    DISPLAY         reduce using rule 30 (statute -> turnleft .)
    DISTANCE        reduce using rule 30 (statute -> turnleft .)
    STOP            reduce using rule 30 (statute -> turnleft .)
    RETURN          reduce using rule 30 (statute -> turnleft .)
    ELSE            reduce using rule 30 (statute -> turnleft .)
    SEMICOLON       reduce using rule 30 (statute -> turnleft .)
    RCURLY          reduce using rule 30 (statute -> turnleft .)


state 73

    (36) statute -> stop .

    IF              reduce using rule 36 (statute -> stop .)
    ID              reduce using rule 36 (statute -> stop .)
    CALL            reduce using rule 36 (statute -> stop .)
    CIN             reduce using rule 36 (statute -> stop .)
    COUT            reduce using rule 36 (statute -> stop .)
    DELAY           reduce using rule 36 (statute -> stop .)
    FORWARD         reduce using rule 36 (statute -> stop .)
    BACKWARD        reduce using rule 36 (statute -> stop .)
    TURNLEFT        reduce using rule 36 (statute -> stop .)
    TURNRIGHT       reduce using rule 36 (statute -> stop .)
    SERVO           reduce using rule 36 (statute -> stop .)
    LIGHTS          reduce using rule 36 (statute -> stop .)
    DISPLAY         reduce using rule 36 (statute -> stop .)
    DISTANCE        reduce using rule 36 (statute -> stop .)
    STOP            reduce using rule 36 (statute -> stop .)
    RETURN          reduce using rule 36 (statute -> stop .)
    ELSE            reduce using rule 36 (statute -> stop .)
    SEMICOLON       reduce using rule 36 (statute -> stop .)
    RCURLY          reduce using rule 36 (statute -> stop .)


state 74

    (61) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 75

    (58) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 76

    (41) assign -> ID . assign1 ASSIGN express SEMICOLON
    (42) assign1 -> . LBRACKET express RBRACKET
    (43) assign1 -> . empty
    (104) empty -> .

    LBRACKET        shift and go to state 114
    ASSIGN          reduce using rule 104 (empty -> .)

    empty                          shift and go to state 115
    assign1                        shift and go to state 113

state 77

    (38) cond -> IF . LPAREN express RPAREN block else SEMICOLON

    LPAREN          shift and go to state 116


state 78

    (20) block -> statute . block
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (104) empty -> .
    (38) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (41) assign -> . ID assign1 ASSIGN express SEMICOLON
    (44) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (49) cin -> . CIN cin1 SEMICOLON
    (56) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (57) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (58) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (59) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (60) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (61) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (62) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (63) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (64) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (65) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (66) stop -> . STOP LPAREN RPAREN SEMICOLON
    (67) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 104 (empty -> .)
    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    CALL            shift and go to state 83
    CIN             shift and go to state 56
    COUT            shift and go to state 61
    DELAY           shift and go to state 57
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 67
    TURNLEFT        shift and go to state 54
    TURNRIGHT       shift and go to state 74
    SERVO           shift and go to state 79
    LIGHTS          shift and go to state 82
    DISPLAY         shift and go to state 60
    DISTANCE        shift and go to state 59
    STOP            shift and go to state 55
    RETURN          shift and go to state 52

    cout                           shift and go to state 53
    cond                           shift and go to state 58
    turnright                      shift and go to state 62
    delay                          shift and go to state 63
    lights                         shift and go to state 64
    call                           shift and go to state 65
    forward                        shift and go to state 66
    empty                          shift and go to state 68
    return                         shift and go to state 69
    servo                          shift and go to state 70
    distance                       shift and go to state 71
    turnleft                       shift and go to state 72
    stop                           shift and go to state 73
    statute                        shift and go to state 78
    cin                            shift and go to state 80
    assign                         shift and go to state 81
    backward                       shift and go to state 84
    display                        shift and go to state 85
    block                          shift and go to state 117

state 79

    (62) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 118


state 80

    (25) statute -> cin .

    IF              reduce using rule 25 (statute -> cin .)
    ID              reduce using rule 25 (statute -> cin .)
    CALL            reduce using rule 25 (statute -> cin .)
    CIN             reduce using rule 25 (statute -> cin .)
    COUT            reduce using rule 25 (statute -> cin .)
    DELAY           reduce using rule 25 (statute -> cin .)
    FORWARD         reduce using rule 25 (statute -> cin .)
    BACKWARD        reduce using rule 25 (statute -> cin .)
    TURNLEFT        reduce using rule 25 (statute -> cin .)
    TURNRIGHT       reduce using rule 25 (statute -> cin .)
    SERVO           reduce using rule 25 (statute -> cin .)
    LIGHTS          reduce using rule 25 (statute -> cin .)
    DISPLAY         reduce using rule 25 (statute -> cin .)
    DISTANCE        reduce using rule 25 (statute -> cin .)
    STOP            reduce using rule 25 (statute -> cin .)
    RETURN          reduce using rule 25 (statute -> cin .)
    ELSE            reduce using rule 25 (statute -> cin .)
    SEMICOLON       reduce using rule 25 (statute -> cin .)
    RCURLY          reduce using rule 25 (statute -> cin .)


state 81

    (23) statute -> assign .

    IF              reduce using rule 23 (statute -> assign .)
    ID              reduce using rule 23 (statute -> assign .)
    CALL            reduce using rule 23 (statute -> assign .)
    CIN             reduce using rule 23 (statute -> assign .)
    COUT            reduce using rule 23 (statute -> assign .)
    DELAY           reduce using rule 23 (statute -> assign .)
    FORWARD         reduce using rule 23 (statute -> assign .)
    BACKWARD        reduce using rule 23 (statute -> assign .)
    TURNLEFT        reduce using rule 23 (statute -> assign .)
    TURNRIGHT       reduce using rule 23 (statute -> assign .)
    SERVO           reduce using rule 23 (statute -> assign .)
    LIGHTS          reduce using rule 23 (statute -> assign .)
    DISPLAY         reduce using rule 23 (statute -> assign .)
    DISTANCE        reduce using rule 23 (statute -> assign .)
    STOP            reduce using rule 23 (statute -> assign .)
    RETURN          reduce using rule 23 (statute -> assign .)
    ELSE            reduce using rule 23 (statute -> assign .)
    SEMICOLON       reduce using rule 23 (statute -> assign .)
    RCURLY          reduce using rule 23 (statute -> assign .)


state 82

    (63) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 119


state 83

    (44) call -> CALL . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 120


state 84

    (29) statute -> backward .

    IF              reduce using rule 29 (statute -> backward .)
    ID              reduce using rule 29 (statute -> backward .)
    CALL            reduce using rule 29 (statute -> backward .)
    CIN             reduce using rule 29 (statute -> backward .)
    COUT            reduce using rule 29 (statute -> backward .)
    DELAY           reduce using rule 29 (statute -> backward .)
    FORWARD         reduce using rule 29 (statute -> backward .)
    BACKWARD        reduce using rule 29 (statute -> backward .)
    TURNLEFT        reduce using rule 29 (statute -> backward .)
    TURNRIGHT       reduce using rule 29 (statute -> backward .)
    SERVO           reduce using rule 29 (statute -> backward .)
    LIGHTS          reduce using rule 29 (statute -> backward .)
    DISPLAY         reduce using rule 29 (statute -> backward .)
    DISTANCE        reduce using rule 29 (statute -> backward .)
    STOP            reduce using rule 29 (statute -> backward .)
    RETURN          reduce using rule 29 (statute -> backward .)
    ELSE            reduce using rule 29 (statute -> backward .)
    SEMICOLON       reduce using rule 29 (statute -> backward .)
    RCURLY          reduce using rule 29 (statute -> backward .)


state 85

    (34) statute -> display .

    IF              reduce using rule 34 (statute -> display .)
    ID              reduce using rule 34 (statute -> display .)
    CALL            reduce using rule 34 (statute -> display .)
    CIN             reduce using rule 34 (statute -> display .)
    COUT            reduce using rule 34 (statute -> display .)
    DELAY           reduce using rule 34 (statute -> display .)
    FORWARD         reduce using rule 34 (statute -> display .)
    BACKWARD        reduce using rule 34 (statute -> display .)
    TURNLEFT        reduce using rule 34 (statute -> display .)
    TURNRIGHT       reduce using rule 34 (statute -> display .)
    SERVO           reduce using rule 34 (statute -> display .)
    LIGHTS          reduce using rule 34 (statute -> display .)
    DISPLAY         reduce using rule 34 (statute -> display .)
    DISTANCE        reduce using rule 34 (statute -> display .)
    STOP            reduce using rule 34 (statute -> display .)
    RETURN          reduce using rule 34 (statute -> display .)
    ELSE            reduce using rule 34 (statute -> display .)
    SEMICOLON       reduce using rule 34 (statute -> display .)
    RCURLY          reduce using rule 34 (statute -> display .)


state 86

    (3) main2 -> varsblock block . RCURLY

    RCURLY          shift and go to state 121


state 87

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock . block RCURLY
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (104) empty -> .
    (38) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (41) assign -> . ID assign1 ASSIGN express SEMICOLON
    (44) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (49) cin -> . CIN cin1 SEMICOLON
    (56) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (57) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (58) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (59) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (60) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (61) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (62) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (63) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (64) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (65) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (66) stop -> . STOP LPAREN RPAREN SEMICOLON
    (67) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 104 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    CALL            shift and go to state 83
    CIN             shift and go to state 56
    COUT            shift and go to state 61
    DELAY           shift and go to state 57
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 67
    TURNLEFT        shift and go to state 54
    TURNRIGHT       shift and go to state 74
    SERVO           shift and go to state 79
    LIGHTS          shift and go to state 82
    DISPLAY         shift and go to state 60
    DISTANCE        shift and go to state 59
    STOP            shift and go to state 55
    RETURN          shift and go to state 52

    cout                           shift and go to state 53
    cond                           shift and go to state 58
    turnright                      shift and go to state 62
    delay                          shift and go to state 63
    lights                         shift and go to state 64
    call                           shift and go to state 65
    forward                        shift and go to state 66
    empty                          shift and go to state 68
    return                         shift and go to state 69
    servo                          shift and go to state 70
    distance                       shift and go to state 71
    turnleft                       shift and go to state 72
    stop                           shift and go to state 73
    statute                        shift and go to state 78
    cin                            shift and go to state 80
    assign                         shift and go to state 81
    backward                       shift and go to state 84
    display                        shift and go to state 85
    block                          shift and go to state 122

state 88

    (18) params1 -> COMMA type . ID params1

    ID              shift and go to state 123


state 89

    (78) express -> compare . express1
    (79) express1 -> . express2 compare
    (80) express1 -> . empty
    (81) express2 -> . AND
    (82) express2 -> . OR
    (104) empty -> .

    AND             shift and go to state 124
    OR              shift and go to state 125
    SEMICOLON       reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)

    empty                          shift and go to state 128
    express1                       shift and go to state 127
    express2                       shift and go to state 126

state 90

    (67) return -> RETURN express . SEMICOLON

    SEMICOLON       shift and go to state 129


state 91

    (89) exp -> term . exp1
    (90) exp1 -> . exp2 term
    (91) exp1 -> . empty
    (92) exp2 -> . PLUS
    (93) exp2 -> . MINUS
    (104) empty -> .

    PLUS            shift and go to state 132
    MINUS           shift and go to state 133
    LESSTHAN        reduce using rule 104 (empty -> .)
    GREATERTHAN     reduce using rule 104 (empty -> .)
    EQUALS          reduce using rule 104 (empty -> .)
    NOTEQUAL        reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)

    exp2                           shift and go to state 130
    exp1                           shift and go to state 131
    empty                          shift and go to state 134

state 92

    (102) factor1 -> MINUS .

    ID              reduce using rule 102 (factor1 -> MINUS .)
    CTE_INT         reduce using rule 102 (factor1 -> MINUS .)
    CTE_FLOAT       reduce using rule 102 (factor1 -> MINUS .)
    CTE_STRING      reduce using rule 102 (factor1 -> MINUS .)
    CTE_CHAR        reduce using rule 102 (factor1 -> MINUS .)


state 93

    (101) factor1 -> PLUS .

    ID              reduce using rule 101 (factor1 -> PLUS .)
    CTE_INT         reduce using rule 101 (factor1 -> PLUS .)
    CTE_FLOAT       reduce using rule 101 (factor1 -> PLUS .)
    CTE_STRING      reduce using rule 101 (factor1 -> PLUS .)
    CTE_CHAR        reduce using rule 101 (factor1 -> PLUS .)


state 94

    (103) factor1 -> empty .

    ID              reduce using rule 103 (factor1 -> empty .)
    CTE_INT         reduce using rule 103 (factor1 -> empty .)
    CTE_FLOAT       reduce using rule 103 (factor1 -> empty .)
    CTE_STRING      reduce using rule 103 (factor1 -> empty .)
    CTE_CHAR        reduce using rule 103 (factor1 -> empty .)


state 95

    (83) compare -> exp . compare1
    (84) compare1 -> . LESSTHAN exp
    (85) compare1 -> . GREATERTHAN exp
    (86) compare1 -> . EQUALS exp
    (87) compare1 -> . NOTEQUAL exp
    (88) compare1 -> . empty
    (104) empty -> .

    LESSTHAN        shift and go to state 137
    GREATERTHAN     shift and go to state 138
    EQUALS          shift and go to state 136
    NOTEQUAL        shift and go to state 135
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)

    empty                          shift and go to state 140
    compare1                       shift and go to state 139

state 96

    (94) term -> factor . term1
    (95) term1 -> . term2 term
    (96) term1 -> . empty
    (97) term2 -> . MULTI
    (98) term2 -> . DIVI
    (104) empty -> .

    MULTI           shift and go to state 144
    DIVI            shift and go to state 141
    PLUS            reduce using rule 104 (empty -> .)
    MINUS           reduce using rule 104 (empty -> .)
    LESSTHAN        reduce using rule 104 (empty -> .)
    GREATERTHAN     reduce using rule 104 (empty -> .)
    EQUALS          reduce using rule 104 (empty -> .)
    NOTEQUAL        reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRACKET        reduce using rule 104 (empty -> .)

    empty                          shift and go to state 145
    term2                          shift and go to state 142
    term1                          shift and go to state 143

state 97

    (99) factor -> LPAREN . express RPAREN
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 146
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 98

    (100) factor -> factor1 . constant
    (73) constant -> . ID
    (74) constant -> . CTE_INT
    (75) constant -> . CTE_FLOAT
    (76) constant -> . CTE_STRING
    (77) constant -> . CTE_CHAR

    ID              shift and go to state 152
    CTE_INT         shift and go to state 151
    CTE_FLOAT       shift and go to state 149
    CTE_STRING      shift and go to state 147
    CTE_CHAR        shift and go to state 150

    constant                       shift and go to state 148

state 99

    (60) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 153
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 100

    (66) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 154


state 101

    (53) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 155


state 102

    (52) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 156


state 103

    (50) cin1 -> cin2 .

    SEMICOLON       reduce using rule 50 (cin1 -> cin2 .)


state 104

    (51) cin1 -> cin3 .

    SEMICOLON       reduce using rule 51 (cin1 -> cin3 .)


state 105

    (49) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 157


state 106

    (57) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 158


state 107

    (65) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 159


state 108

    (64) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 160


state 109

    (56) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 161
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 110

    (59) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 162
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 111

    (61) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 163
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 112

    (58) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 164
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 113

    (41) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 165


state 114

    (42) assign1 -> LBRACKET . express RBRACKET
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 166
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 115

    (43) assign1 -> empty .

    ASSIGN          reduce using rule 43 (assign1 -> empty .)


state 116

    (38) cond -> IF LPAREN . express RPAREN block else SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    express                        shift and go to state 167
    term                           shift and go to state 91
    empty                          shift and go to state 94
    exp                            shift and go to state 95
    factor                         shift and go to state 96
    factor1                        shift and go to state 98

state 117

    (20) block -> statute block .

    RCURLY          reduce using rule 20 (block -> statute block .)
    SEMICOLON       reduce using rule 20 (block -> statute block .)
    ELSE            reduce using rule 20 (block -> statute block .)


state 118

    (62) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 168
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 119

    (63) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 169


state 120

    (44) call -> CALL ID . LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 170


state 121

    (3) main2 -> varsblock block RCURLY .

    FIN             reduce using rule 3 (main2 -> varsblock block RCURLY .)


state 122

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 171


state 123

    (18) params1 -> COMMA type ID . params1
    (18) params1 -> . COMMA type ID params1
    (19) params1 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 50
    RPAREN          reduce using rule 104 (empty -> .)

    params1                        shift and go to state 172
    empty                          shift and go to state 51

state 124

    (81) express2 -> AND .

    LPAREN          reduce using rule 81 (express2 -> AND .)
    PLUS            reduce using rule 81 (express2 -> AND .)
    MINUS           reduce using rule 81 (express2 -> AND .)
    ID              reduce using rule 81 (express2 -> AND .)
    CTE_INT         reduce using rule 81 (express2 -> AND .)
    CTE_FLOAT       reduce using rule 81 (express2 -> AND .)
    CTE_STRING      reduce using rule 81 (express2 -> AND .)
    CTE_CHAR        reduce using rule 81 (express2 -> AND .)


state 125

    (82) express2 -> OR .

    LPAREN          reduce using rule 82 (express2 -> OR .)
    PLUS            reduce using rule 82 (express2 -> OR .)
    MINUS           reduce using rule 82 (express2 -> OR .)
    ID              reduce using rule 82 (express2 -> OR .)
    CTE_INT         reduce using rule 82 (express2 -> OR .)
    CTE_FLOAT       reduce using rule 82 (express2 -> OR .)
    CTE_STRING      reduce using rule 82 (express2 -> OR .)
    CTE_CHAR        reduce using rule 82 (express2 -> OR .)


state 126

    (79) express1 -> express2 . compare
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 173
    exp                            shift and go to state 95
    term                           shift and go to state 91
    empty                          shift and go to state 94
    factor                         shift and go to state 96
    factor1                        shift and go to state 98

state 127

    (78) express -> compare express1 .

    COMMA           reduce using rule 78 (express -> compare express1 .)
    RPAREN          reduce using rule 78 (express -> compare express1 .)
    SEMICOLON       reduce using rule 78 (express -> compare express1 .)
    RBRACKET        reduce using rule 78 (express -> compare express1 .)


state 128

    (80) express1 -> empty .

    SEMICOLON       reduce using rule 80 (express1 -> empty .)
    RPAREN          reduce using rule 80 (express1 -> empty .)
    COMMA           reduce using rule 80 (express1 -> empty .)
    RBRACKET        reduce using rule 80 (express1 -> empty .)


state 129

    (67) return -> RETURN express SEMICOLON .

    IF              reduce using rule 67 (return -> RETURN express SEMICOLON .)
    ID              reduce using rule 67 (return -> RETURN express SEMICOLON .)
    CALL            reduce using rule 67 (return -> RETURN express SEMICOLON .)
    CIN             reduce using rule 67 (return -> RETURN express SEMICOLON .)
    COUT            reduce using rule 67 (return -> RETURN express SEMICOLON .)
    DELAY           reduce using rule 67 (return -> RETURN express SEMICOLON .)
    FORWARD         reduce using rule 67 (return -> RETURN express SEMICOLON .)
    BACKWARD        reduce using rule 67 (return -> RETURN express SEMICOLON .)
    TURNLEFT        reduce using rule 67 (return -> RETURN express SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (return -> RETURN express SEMICOLON .)
    SERVO           reduce using rule 67 (return -> RETURN express SEMICOLON .)
    LIGHTS          reduce using rule 67 (return -> RETURN express SEMICOLON .)
    DISPLAY         reduce using rule 67 (return -> RETURN express SEMICOLON .)
    DISTANCE        reduce using rule 67 (return -> RETURN express SEMICOLON .)
    STOP            reduce using rule 67 (return -> RETURN express SEMICOLON .)
    RETURN          reduce using rule 67 (return -> RETURN express SEMICOLON .)
    RCURLY          reduce using rule 67 (return -> RETURN express SEMICOLON .)
    ELSE            reduce using rule 67 (return -> RETURN express SEMICOLON .)
    SEMICOLON       reduce using rule 67 (return -> RETURN express SEMICOLON .)


state 130

    (90) exp1 -> exp2 . term
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 174
    factor1                        shift and go to state 98
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 131

    (89) exp -> term exp1 .

    AND             reduce using rule 89 (exp -> term exp1 .)
    OR              reduce using rule 89 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 89 (exp -> term exp1 .)
    RPAREN          reduce using rule 89 (exp -> term exp1 .)
    COMMA           reduce using rule 89 (exp -> term exp1 .)
    RBRACKET        reduce using rule 89 (exp -> term exp1 .)
    LESSTHAN        reduce using rule 89 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 89 (exp -> term exp1 .)
    EQUALS          reduce using rule 89 (exp -> term exp1 .)
    NOTEQUAL        reduce using rule 89 (exp -> term exp1 .)


state 132

    (92) exp2 -> PLUS .

    LPAREN          reduce using rule 92 (exp2 -> PLUS .)
    PLUS            reduce using rule 92 (exp2 -> PLUS .)
    MINUS           reduce using rule 92 (exp2 -> PLUS .)
    ID              reduce using rule 92 (exp2 -> PLUS .)
    CTE_INT         reduce using rule 92 (exp2 -> PLUS .)
    CTE_FLOAT       reduce using rule 92 (exp2 -> PLUS .)
    CTE_STRING      reduce using rule 92 (exp2 -> PLUS .)
    CTE_CHAR        reduce using rule 92 (exp2 -> PLUS .)


state 133

    (93) exp2 -> MINUS .

    LPAREN          reduce using rule 93 (exp2 -> MINUS .)
    PLUS            reduce using rule 93 (exp2 -> MINUS .)
    MINUS           reduce using rule 93 (exp2 -> MINUS .)
    ID              reduce using rule 93 (exp2 -> MINUS .)
    CTE_INT         reduce using rule 93 (exp2 -> MINUS .)
    CTE_FLOAT       reduce using rule 93 (exp2 -> MINUS .)
    CTE_STRING      reduce using rule 93 (exp2 -> MINUS .)
    CTE_CHAR        reduce using rule 93 (exp2 -> MINUS .)


state 134

    (91) exp1 -> empty .

    LESSTHAN        reduce using rule 91 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 91 (exp1 -> empty .)
    EQUALS          reduce using rule 91 (exp1 -> empty .)
    NOTEQUAL        reduce using rule 91 (exp1 -> empty .)
    AND             reduce using rule 91 (exp1 -> empty .)
    OR              reduce using rule 91 (exp1 -> empty .)
    SEMICOLON       reduce using rule 91 (exp1 -> empty .)
    RPAREN          reduce using rule 91 (exp1 -> empty .)
    COMMA           reduce using rule 91 (exp1 -> empty .)
    RBRACKET        reduce using rule 91 (exp1 -> empty .)


state 135

    (87) compare1 -> NOTEQUAL . exp
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 91
    factor1                        shift and go to state 98
    exp                            shift and go to state 175
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 136

    (86) compare1 -> EQUALS . exp
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 91
    factor1                        shift and go to state 98
    exp                            shift and go to state 176
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 137

    (84) compare1 -> LESSTHAN . exp
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 91
    factor1                        shift and go to state 98
    exp                            shift and go to state 177
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 138

    (85) compare1 -> GREATERTHAN . exp
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 91
    factor1                        shift and go to state 98
    exp                            shift and go to state 178
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 139

    (83) compare -> exp compare1 .

    AND             reduce using rule 83 (compare -> exp compare1 .)
    OR              reduce using rule 83 (compare -> exp compare1 .)
    COMMA           reduce using rule 83 (compare -> exp compare1 .)
    RPAREN          reduce using rule 83 (compare -> exp compare1 .)
    SEMICOLON       reduce using rule 83 (compare -> exp compare1 .)
    RBRACKET        reduce using rule 83 (compare -> exp compare1 .)


state 140

    (88) compare1 -> empty .

    AND             reduce using rule 88 (compare1 -> empty .)
    OR              reduce using rule 88 (compare1 -> empty .)
    SEMICOLON       reduce using rule 88 (compare1 -> empty .)
    RPAREN          reduce using rule 88 (compare1 -> empty .)
    COMMA           reduce using rule 88 (compare1 -> empty .)
    RBRACKET        reduce using rule 88 (compare1 -> empty .)


state 141

    (98) term2 -> DIVI .

    LPAREN          reduce using rule 98 (term2 -> DIVI .)
    PLUS            reduce using rule 98 (term2 -> DIVI .)
    MINUS           reduce using rule 98 (term2 -> DIVI .)
    ID              reduce using rule 98 (term2 -> DIVI .)
    CTE_INT         reduce using rule 98 (term2 -> DIVI .)
    CTE_FLOAT       reduce using rule 98 (term2 -> DIVI .)
    CTE_STRING      reduce using rule 98 (term2 -> DIVI .)
    CTE_CHAR        reduce using rule 98 (term2 -> DIVI .)


state 142

    (95) term1 -> term2 . term
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    term                           shift and go to state 179
    factor1                        shift and go to state 98
    factor                         shift and go to state 96
    empty                          shift and go to state 94

state 143

    (94) term -> factor term1 .

    PLUS            reduce using rule 94 (term -> factor term1 .)
    MINUS           reduce using rule 94 (term -> factor term1 .)
    LESSTHAN        reduce using rule 94 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 94 (term -> factor term1 .)
    EQUALS          reduce using rule 94 (term -> factor term1 .)
    NOTEQUAL        reduce using rule 94 (term -> factor term1 .)
    AND             reduce using rule 94 (term -> factor term1 .)
    OR              reduce using rule 94 (term -> factor term1 .)
    COMMA           reduce using rule 94 (term -> factor term1 .)
    SEMICOLON       reduce using rule 94 (term -> factor term1 .)
    RPAREN          reduce using rule 94 (term -> factor term1 .)
    RBRACKET        reduce using rule 94 (term -> factor term1 .)


state 144

    (97) term2 -> MULTI .

    LPAREN          reduce using rule 97 (term2 -> MULTI .)
    PLUS            reduce using rule 97 (term2 -> MULTI .)
    MINUS           reduce using rule 97 (term2 -> MULTI .)
    ID              reduce using rule 97 (term2 -> MULTI .)
    CTE_INT         reduce using rule 97 (term2 -> MULTI .)
    CTE_FLOAT       reduce using rule 97 (term2 -> MULTI .)
    CTE_STRING      reduce using rule 97 (term2 -> MULTI .)
    CTE_CHAR        reduce using rule 97 (term2 -> MULTI .)


state 145

    (96) term1 -> empty .

    PLUS            reduce using rule 96 (term1 -> empty .)
    MINUS           reduce using rule 96 (term1 -> empty .)
    LESSTHAN        reduce using rule 96 (term1 -> empty .)
    GREATERTHAN     reduce using rule 96 (term1 -> empty .)
    EQUALS          reduce using rule 96 (term1 -> empty .)
    NOTEQUAL        reduce using rule 96 (term1 -> empty .)
    AND             reduce using rule 96 (term1 -> empty .)
    OR              reduce using rule 96 (term1 -> empty .)
    SEMICOLON       reduce using rule 96 (term1 -> empty .)
    RPAREN          reduce using rule 96 (term1 -> empty .)
    COMMA           reduce using rule 96 (term1 -> empty .)
    RBRACKET        reduce using rule 96 (term1 -> empty .)


state 146

    (99) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 180


state 147

    (76) constant -> CTE_STRING .

    MULTI           reduce using rule 76 (constant -> CTE_STRING .)
    DIVI            reduce using rule 76 (constant -> CTE_STRING .)
    PLUS            reduce using rule 76 (constant -> CTE_STRING .)
    MINUS           reduce using rule 76 (constant -> CTE_STRING .)
    LESSTHAN        reduce using rule 76 (constant -> CTE_STRING .)
    GREATERTHAN     reduce using rule 76 (constant -> CTE_STRING .)
    EQUALS          reduce using rule 76 (constant -> CTE_STRING .)
    NOTEQUAL        reduce using rule 76 (constant -> CTE_STRING .)
    AND             reduce using rule 76 (constant -> CTE_STRING .)
    OR              reduce using rule 76 (constant -> CTE_STRING .)
    SEMICOLON       reduce using rule 76 (constant -> CTE_STRING .)
    RPAREN          reduce using rule 76 (constant -> CTE_STRING .)
    COMMA           reduce using rule 76 (constant -> CTE_STRING .)
    RBRACKET        reduce using rule 76 (constant -> CTE_STRING .)


state 148

    (100) factor -> factor1 constant .

    MULTI           reduce using rule 100 (factor -> factor1 constant .)
    DIVI            reduce using rule 100 (factor -> factor1 constant .)
    PLUS            reduce using rule 100 (factor -> factor1 constant .)
    MINUS           reduce using rule 100 (factor -> factor1 constant .)
    AND             reduce using rule 100 (factor -> factor1 constant .)
    OR              reduce using rule 100 (factor -> factor1 constant .)
    SEMICOLON       reduce using rule 100 (factor -> factor1 constant .)
    RPAREN          reduce using rule 100 (factor -> factor1 constant .)
    COMMA           reduce using rule 100 (factor -> factor1 constant .)
    RBRACKET        reduce using rule 100 (factor -> factor1 constant .)
    LESSTHAN        reduce using rule 100 (factor -> factor1 constant .)
    GREATERTHAN     reduce using rule 100 (factor -> factor1 constant .)
    EQUALS          reduce using rule 100 (factor -> factor1 constant .)
    NOTEQUAL        reduce using rule 100 (factor -> factor1 constant .)


state 149

    (75) constant -> CTE_FLOAT .

    MULTI           reduce using rule 75 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 75 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 75 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 75 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 75 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 75 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 75 (constant -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 75 (constant -> CTE_FLOAT .)
    AND             reduce using rule 75 (constant -> CTE_FLOAT .)
    OR              reduce using rule 75 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 75 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 75 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 75 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 75 (constant -> CTE_FLOAT .)


state 150

    (77) constant -> CTE_CHAR .

    MULTI           reduce using rule 77 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 77 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 77 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 77 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 77 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 77 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 77 (constant -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 77 (constant -> CTE_CHAR .)
    AND             reduce using rule 77 (constant -> CTE_CHAR .)
    OR              reduce using rule 77 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 77 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 77 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 77 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 77 (constant -> CTE_CHAR .)


state 151

    (74) constant -> CTE_INT .

    MULTI           reduce using rule 74 (constant -> CTE_INT .)
    DIVI            reduce using rule 74 (constant -> CTE_INT .)
    PLUS            reduce using rule 74 (constant -> CTE_INT .)
    MINUS           reduce using rule 74 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 74 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 74 (constant -> CTE_INT .)
    EQUALS          reduce using rule 74 (constant -> CTE_INT .)
    NOTEQUAL        reduce using rule 74 (constant -> CTE_INT .)
    AND             reduce using rule 74 (constant -> CTE_INT .)
    OR              reduce using rule 74 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 74 (constant -> CTE_INT .)
    RPAREN          reduce using rule 74 (constant -> CTE_INT .)
    COMMA           reduce using rule 74 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 74 (constant -> CTE_INT .)


state 152

    (73) constant -> ID .

    MULTI           reduce using rule 73 (constant -> ID .)
    DIVI            reduce using rule 73 (constant -> ID .)
    PLUS            reduce using rule 73 (constant -> ID .)
    MINUS           reduce using rule 73 (constant -> ID .)
    LESSTHAN        reduce using rule 73 (constant -> ID .)
    GREATERTHAN     reduce using rule 73 (constant -> ID .)
    EQUALS          reduce using rule 73 (constant -> ID .)
    NOTEQUAL        reduce using rule 73 (constant -> ID .)
    AND             reduce using rule 73 (constant -> ID .)
    OR              reduce using rule 73 (constant -> ID .)
    SEMICOLON       reduce using rule 73 (constant -> ID .)
    RPAREN          reduce using rule 73 (constant -> ID .)
    COMMA           reduce using rule 73 (constant -> ID .)
    RBRACKET        reduce using rule 73 (constant -> ID .)


state 153

    (60) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 181


state 154

    (66) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 155

    (53) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 183


state 156

    (52) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 184


state 157

    (49) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    CALL            reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    ELSE            reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)
    SEMICOLON       reduce using rule 49 (cin -> CIN cin1 SEMICOLON .)


state 158

    (57) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 185


state 159

    (65) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 186


state 160

    (64) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 187


state 161

    (56) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 188


state 162

    (59) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 189


state 163

    (61) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 190


state 164

    (58) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 191


state 165

    (41) assign -> ID assign1 ASSIGN . express SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 192
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 166

    (42) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 193


state 167

    (38) cond -> IF LPAREN express . RPAREN block else SEMICOLON

    RPAREN          shift and go to state 194


state 168

    (62) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 195


state 169

    (63) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 196


state 170

    (44) call -> CALL ID LPAREN . call1 RPAREN SEMICOLON
    (45) call1 -> . express call2
    (46) call1 -> . empty
    (78) express -> . compare express1
    (104) empty -> .
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty

    RPAREN          reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92

    compare                        shift and go to state 89
    call1                          shift and go to state 197
    express                        shift and go to state 198
    term                           shift and go to state 91
    exp                            shift and go to state 95
    factor                         shift and go to state 96
    empty                          shift and go to state 199
    factor1                        shift and go to state 98

state 171

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .

    FUNCDEF         reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)
    MAIN            reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)


state 172

    (18) params1 -> COMMA type ID params1 .

    RPAREN          reduce using rule 18 (params1 -> COMMA type ID params1 .)


state 173

    (79) express1 -> express2 compare .

    SEMICOLON       reduce using rule 79 (express1 -> express2 compare .)
    RPAREN          reduce using rule 79 (express1 -> express2 compare .)
    COMMA           reduce using rule 79 (express1 -> express2 compare .)
    RBRACKET        reduce using rule 79 (express1 -> express2 compare .)


state 174

    (90) exp1 -> exp2 term .

    LESSTHAN        reduce using rule 90 (exp1 -> exp2 term .)
    GREATERTHAN     reduce using rule 90 (exp1 -> exp2 term .)
    EQUALS          reduce using rule 90 (exp1 -> exp2 term .)
    NOTEQUAL        reduce using rule 90 (exp1 -> exp2 term .)
    AND             reduce using rule 90 (exp1 -> exp2 term .)
    OR              reduce using rule 90 (exp1 -> exp2 term .)
    SEMICOLON       reduce using rule 90 (exp1 -> exp2 term .)
    RPAREN          reduce using rule 90 (exp1 -> exp2 term .)
    COMMA           reduce using rule 90 (exp1 -> exp2 term .)
    RBRACKET        reduce using rule 90 (exp1 -> exp2 term .)


state 175

    (87) compare1 -> NOTEQUAL exp .

    AND             reduce using rule 87 (compare1 -> NOTEQUAL exp .)
    OR              reduce using rule 87 (compare1 -> NOTEQUAL exp .)
    SEMICOLON       reduce using rule 87 (compare1 -> NOTEQUAL exp .)
    RPAREN          reduce using rule 87 (compare1 -> NOTEQUAL exp .)
    COMMA           reduce using rule 87 (compare1 -> NOTEQUAL exp .)
    RBRACKET        reduce using rule 87 (compare1 -> NOTEQUAL exp .)


state 176

    (86) compare1 -> EQUALS exp .

    AND             reduce using rule 86 (compare1 -> EQUALS exp .)
    OR              reduce using rule 86 (compare1 -> EQUALS exp .)
    SEMICOLON       reduce using rule 86 (compare1 -> EQUALS exp .)
    RPAREN          reduce using rule 86 (compare1 -> EQUALS exp .)
    COMMA           reduce using rule 86 (compare1 -> EQUALS exp .)
    RBRACKET        reduce using rule 86 (compare1 -> EQUALS exp .)


state 177

    (84) compare1 -> LESSTHAN exp .

    AND             reduce using rule 84 (compare1 -> LESSTHAN exp .)
    OR              reduce using rule 84 (compare1 -> LESSTHAN exp .)
    SEMICOLON       reduce using rule 84 (compare1 -> LESSTHAN exp .)
    RPAREN          reduce using rule 84 (compare1 -> LESSTHAN exp .)
    COMMA           reduce using rule 84 (compare1 -> LESSTHAN exp .)
    RBRACKET        reduce using rule 84 (compare1 -> LESSTHAN exp .)


state 178

    (85) compare1 -> GREATERTHAN exp .

    AND             reduce using rule 85 (compare1 -> GREATERTHAN exp .)
    OR              reduce using rule 85 (compare1 -> GREATERTHAN exp .)
    SEMICOLON       reduce using rule 85 (compare1 -> GREATERTHAN exp .)
    RPAREN          reduce using rule 85 (compare1 -> GREATERTHAN exp .)
    COMMA           reduce using rule 85 (compare1 -> GREATERTHAN exp .)
    RBRACKET        reduce using rule 85 (compare1 -> GREATERTHAN exp .)


state 179

    (95) term1 -> term2 term .

    PLUS            reduce using rule 95 (term1 -> term2 term .)
    MINUS           reduce using rule 95 (term1 -> term2 term .)
    LESSTHAN        reduce using rule 95 (term1 -> term2 term .)
    GREATERTHAN     reduce using rule 95 (term1 -> term2 term .)
    EQUALS          reduce using rule 95 (term1 -> term2 term .)
    NOTEQUAL        reduce using rule 95 (term1 -> term2 term .)
    AND             reduce using rule 95 (term1 -> term2 term .)
    OR              reduce using rule 95 (term1 -> term2 term .)
    SEMICOLON       reduce using rule 95 (term1 -> term2 term .)
    RPAREN          reduce using rule 95 (term1 -> term2 term .)
    COMMA           reduce using rule 95 (term1 -> term2 term .)
    RBRACKET        reduce using rule 95 (term1 -> term2 term .)


state 180

    (99) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 99 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 99 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 99 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 99 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 99 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 99 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 99 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 99 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 99 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 99 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 99 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 99 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 99 (factor -> LPAREN express RPAREN .)
    NOTEQUAL        reduce using rule 99 (factor -> LPAREN express RPAREN .)


state 181

    (60) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 200
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 182

    (66) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 66 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 183

    (53) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 201


state 184

    (52) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 52 (cin2 -> LPAREN ID RPAREN .)


state 185

    (57) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 202


state 186

    (65) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 65 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 187

    (64) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 203


state 188

    (56) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 204


state 189

    (59) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 205
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 190

    (61) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 206
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 191

    (58) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (78) express -> . compare express1
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty
    (104) empty -> .

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)

    compare                        shift and go to state 89
    exp                            shift and go to state 95
    express                        shift and go to state 207
    term                           shift and go to state 91
    factor                         shift and go to state 96
    empty                          shift and go to state 94
    factor1                        shift and go to state 98

state 192

    (41) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 208


state 193

    (42) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 42 (assign1 -> LBRACKET express RBRACKET .)


state 194

    (38) cond -> IF LPAREN express RPAREN . block else SEMICOLON
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (104) empty -> .
    (38) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (41) assign -> . ID assign1 ASSIGN express SEMICOLON
    (44) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (49) cin -> . CIN cin1 SEMICOLON
    (56) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (57) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (58) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (59) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (60) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (61) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (62) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (63) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (64) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (65) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (66) stop -> . STOP LPAREN RPAREN SEMICOLON
    (67) return -> . RETURN express SEMICOLON

    ELSE            reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    CALL            shift and go to state 83
    CIN             shift and go to state 56
    COUT            shift and go to state 61
    DELAY           shift and go to state 57
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 67
    TURNLEFT        shift and go to state 54
    TURNRIGHT       shift and go to state 74
    SERVO           shift and go to state 79
    LIGHTS          shift and go to state 82
    DISPLAY         shift and go to state 60
    DISTANCE        shift and go to state 59
    STOP            shift and go to state 55
    RETURN          shift and go to state 52

    cout                           shift and go to state 53
    cond                           shift and go to state 58
    turnright                      shift and go to state 62
    delay                          shift and go to state 63
    lights                         shift and go to state 64
    call                           shift and go to state 65
    forward                        shift and go to state 66
    empty                          shift and go to state 68
    return                         shift and go to state 69
    servo                          shift and go to state 70
    distance                       shift and go to state 71
    turnleft                       shift and go to state 72
    stop                           shift and go to state 73
    statute                        shift and go to state 78
    cin                            shift and go to state 80
    assign                         shift and go to state 81
    backward                       shift and go to state 84
    display                        shift and go to state 85
    block                          shift and go to state 209

state 195

    (62) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 196

    (63) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 211


state 197

    (44) call -> CALL ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 212


state 198

    (45) call1 -> express . call2
    (47) call2 -> . COMMA call1
    (48) call2 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 213
    RPAREN          reduce using rule 104 (empty -> .)

    empty                          shift and go to state 214
    call2                          shift and go to state 215

state 199

    (46) call1 -> empty .
    (103) factor1 -> empty .

    RPAREN          reduce using rule 46 (call1 -> empty .)
    ID              reduce using rule 103 (factor1 -> empty .)
    CTE_INT         reduce using rule 103 (factor1 -> empty .)
    CTE_FLOAT       reduce using rule 103 (factor1 -> empty .)
    CTE_STRING      reduce using rule 103 (factor1 -> empty .)
    CTE_CHAR        reduce using rule 103 (factor1 -> empty .)


state 200

    (60) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 216


state 201

    (53) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (54) cin4 -> . COMMA ID cin4
    (55) cin4 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 217
    RPAREN          reduce using rule 104 (empty -> .)

    cin4                           shift and go to state 218
    empty                          shift and go to state 219

state 202

    (57) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ELSE            reduce using rule 57 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 203

    (64) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CALL            reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ELSE            reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 64 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 204

    (56) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ELSE            reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 56 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 205

    (59) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 220


state 206

    (61) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 221


state 207

    (58) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 222


state 208

    (41) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CALL            reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ELSE            reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SEMICOLON       reduce using rule 41 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 209

    (38) cond -> IF LPAREN express RPAREN block . else SEMICOLON
    (39) else -> . ELSE block
    (40) else -> . empty
    (104) empty -> .

    ELSE            shift and go to state 225
    SEMICOLON       reduce using rule 104 (empty -> .)

    empty                          shift and go to state 224
    else                           shift and go to state 223

state 210

    (62) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ELSE            reduce using rule 62 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 211

    (63) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 226


state 212

    (44) call -> CALL ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 213

    (47) call2 -> COMMA . call1
    (45) call1 -> . express call2
    (46) call1 -> . empty
    (78) express -> . compare express1
    (104) empty -> .
    (83) compare -> . exp compare1
    (89) exp -> . term exp1
    (94) term -> . factor term1
    (99) factor -> . LPAREN express RPAREN
    (100) factor -> . factor1 constant
    (101) factor1 -> . PLUS
    (102) factor1 -> . MINUS
    (103) factor1 -> . empty

    RPAREN          reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    CTE_INT         reduce using rule 104 (empty -> .)
    CTE_FLOAT       reduce using rule 104 (empty -> .)
    CTE_STRING      reduce using rule 104 (empty -> .)
    CTE_CHAR        reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 93
    MINUS           shift and go to state 92

    compare                        shift and go to state 89
    call1                          shift and go to state 228
    express                        shift and go to state 198
    term                           shift and go to state 91
    exp                            shift and go to state 95
    factor                         shift and go to state 96
    empty                          shift and go to state 199
    factor1                        shift and go to state 98

state 214

    (48) call2 -> empty .

    RPAREN          reduce using rule 48 (call2 -> empty .)


state 215

    (45) call1 -> express call2 .

    RPAREN          reduce using rule 45 (call1 -> express call2 .)


state 216

    (60) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 229


state 217

    (54) cin4 -> COMMA . ID cin4

    ID              shift and go to state 230


state 218

    (53) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 231


state 219

    (55) cin4 -> empty .

    RPAREN          reduce using rule 55 (cin4 -> empty .)


state 220

    (59) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 232


state 221

    (61) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 233


state 222

    (58) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 234


state 223

    (38) cond -> IF LPAREN express RPAREN block else . SEMICOLON

    SEMICOLON       shift and go to state 235


state 224

    (40) else -> empty .

    SEMICOLON       reduce using rule 40 (else -> empty .)


state 225

    (39) else -> ELSE . block
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (104) empty -> .
    (38) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (41) assign -> . ID assign1 ASSIGN express SEMICOLON
    (44) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (49) cin -> . CIN cin1 SEMICOLON
    (56) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (57) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (58) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (59) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (60) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (61) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (62) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (63) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (64) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (65) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (66) stop -> . STOP LPAREN RPAREN SEMICOLON
    (67) return -> . RETURN express SEMICOLON

    SEMICOLON       reduce using rule 104 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    CALL            shift and go to state 83
    CIN             shift and go to state 56
    COUT            shift and go to state 61
    DELAY           shift and go to state 57
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 67
    TURNLEFT        shift and go to state 54
    TURNRIGHT       shift and go to state 74
    SERVO           shift and go to state 79
    LIGHTS          shift and go to state 82
    DISPLAY         shift and go to state 60
    DISTANCE        shift and go to state 59
    STOP            shift and go to state 55
    RETURN          shift and go to state 52

    cout                           shift and go to state 53
    cond                           shift and go to state 58
    turnright                      shift and go to state 62
    delay                          shift and go to state 63
    lights                         shift and go to state 64
    call                           shift and go to state 65
    forward                        shift and go to state 66
    empty                          shift and go to state 68
    return                         shift and go to state 69
    servo                          shift and go to state 70
    distance                       shift and go to state 71
    turnleft                       shift and go to state 72
    stop                           shift and go to state 73
    statute                        shift and go to state 78
    cin                            shift and go to state 80
    assign                         shift and go to state 81
    backward                       shift and go to state 84
    display                        shift and go to state 85
    block                          shift and go to state 236

state 226

    (63) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 237


state 227

    (44) call -> CALL ID LPAREN call1 RPAREN SEMICOLON .

    IF              reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ID              reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CALL            reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CIN             reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    COUT            reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    STOP            reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ELSE            reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 44 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)


state 228

    (47) call2 -> COMMA call1 .

    RPAREN          reduce using rule 47 (call2 -> COMMA call1 .)


state 229

    (60) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 60 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 230

    (54) cin4 -> COMMA ID . cin4
    (54) cin4 -> . COMMA ID cin4
    (55) cin4 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 217
    RPAREN          reduce using rule 104 (empty -> .)

    cin4                           shift and go to state 238
    empty                          shift and go to state 219

state 231

    (53) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 53 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 232

    (59) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 59 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 233

    (61) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 61 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 234

    (58) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 58 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 235

    (38) cond -> IF LPAREN express RPAREN block else SEMICOLON .

    IF              reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    ID              reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    CALL            reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    CIN             reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    COUT            reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DELAY           reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    FORWARD         reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    BACKWARD        reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    TURNLEFT        reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    TURNRIGHT       reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    SERVO           reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    LIGHTS          reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DISPLAY         reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DISTANCE        reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    STOP            reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    RETURN          reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    RCURLY          reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    SEMICOLON       reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    ELSE            reduce using rule 38 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)


state 236

    (39) else -> ELSE block .

    SEMICOLON       reduce using rule 39 (else -> ELSE block .)


state 237

    (63) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ELSE            reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 63 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 238

    (54) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 54 (cin4 -> COMMA ID cin4 .)

