Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON
Rule 2     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 3     main2 -> varsblock block RCURLY
Rule 4     funcsblock -> funcs funcsblock
Rule 5     funcsblock -> empty
Rule 6     funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
Rule 7     globalvarsblock -> vars varsblock
Rule 8     globalvarsblock -> empty
Rule 9     varsblock -> vars varsblock
Rule 10    varsblock -> empty
Rule 11    vars -> VARDEF type ID vars1 SEMICOLON
Rule 12    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 13    vars1 -> empty
Rule 14    choosetype -> type
Rule 15    choosetype -> VOID
Rule 16    paramsblock -> params paramsblock
Rule 17    paramsblock -> COMMA params paramsblock
Rule 18    paramsblock -> empty
Rule 19    params -> type ID
Rule 20    params -> empty
Rule 21    block -> statute block
Rule 22    block -> empty
Rule 23    statute -> cond
Rule 24    statute -> assign
Rule 25    statute -> call
Rule 26    statute -> cin
Rule 27    statute -> cout
Rule 28    statute -> delay
Rule 29    statute -> forward
Rule 30    statute -> backward
Rule 31    statute -> turnleft
Rule 32    statute -> turnright
Rule 33    statute -> servo
Rule 34    statute -> lights
Rule 35    statute -> display
Rule 36    statute -> distance
Rule 37    statute -> stop
Rule 38    statute -> while
Rule 39    statute -> return
Rule 40    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 41    gotoif -> empty
Rule 42    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 43    else -> SEMICOLON
Rule 44    gotoelse -> empty
Rule 45    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 46    assign1 -> LBRACKET express RBRACKET
Rule 47    assign1 -> empty
Rule 48    call -> CALL ID LPAREN call1 RPAREN SEMICOLON
Rule 49    call1 -> express call2
Rule 50    call1 -> empty
Rule 51    call2 -> COMMA call1
Rule 52    call2 -> empty
Rule 53    cin -> CIN cin1 SEMICOLON
Rule 54    cin1 -> cin2
Rule 55    cin1 -> cin3
Rule 56    cin2 -> LPAREN ID RPAREN
Rule 57    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 58    cin4 -> COMMA ID cin4
Rule 59    cin4 -> empty
Rule 60    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 61    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 62    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 63    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 64    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 65    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 66    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 67    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 68    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 69    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 70    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 71    while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
Rule 72    while1 -> empty
Rule 73    return -> RETURN LPAREN express RPAREN SEMICOLON
Rule 74    type -> INT
Rule 75    type -> FLOAT
Rule 76    type -> BOOL
Rule 77    type -> CHAR
Rule 78    constant -> ID
Rule 79    constant -> CTE_INT
Rule 80    constant -> CTE_FLOAT
Rule 81    constant -> CTE_CHAR
Rule 82    constant -> CTE_BOOL
Rule 83    express -> express1 relational express2
Rule 84    express1 -> NOTEQUALS
Rule 85    express1 -> empty
Rule 86    express2 -> andor express
Rule 87    express2 -> empty
Rule 88    andor -> AND
Rule 89    andor -> OR
Rule 90    relational -> exp relational1
Rule 91    relational -> NOT
Rule 92    relational1 -> compare exp
Rule 93    relational1 -> empty
Rule 94    compare -> LESSTHAN
Rule 95    compare -> GREATERTHAN
Rule 96    compare -> EQUALS
Rule 97    compare -> NOTEQUALS
Rule 98    exp -> term exp1
Rule 99    exp1 -> plusminus exp
Rule 100   exp1 -> empty
Rule 101   plusminus -> PLUS
Rule 102   plusminus -> MINUS
Rule 103   term -> factor term1
Rule 104   term1 -> multidivi term
Rule 105   term1 -> empty
Rule 106   multidivi -> MULTI
Rule 107   multidivi -> DIVI
Rule 108   factor -> LPAREN express RPAREN
Rule 109   factor -> constant
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 88
ASSIGN               : 45
BACKWARD             : 63
BOOL                 : 76
CALL                 : 48
CHAR                 : 77
CIN                  : 53
COMMA                : 17 51 58 62 63 64 65 67
COUT                 : 60
CTE_ARR              : 
CTE_BOOL             : 82
CTE_CHAR             : 68 81
CTE_FLOAT            : 80
CTE_INT              : 12 57 61 67 67 79
DELAY                : 61
DISPLAY              : 68
DISTANCE             : 69
DIVI                 : 107
ELSE                 : 42
EQUALS               : 96
FIN                  : 1
FLOAT                : 75
FORWARD              : 62
FUNCDEF              : 6
GREATERTHAN          : 95
ID                   : 6 11 19 45 48 56 58 78
IF                   : 40
INT                  : 74
LBRACKET             : 12 46 57
LCURLY               : 2 6 40 42 71
LESSTHAN             : 94
LIGHTS               : 67
LPAREN               : 2 6 40 48 56 57 60 61 62 63 64 65 66 67 68 69 70 71 73 108
MAIN                 : 2
MINUS                : 102
MULTI                : 106
NOT                  : 91
NOTEQUALS            : 84 97
OR                   : 89
PLUS                 : 101
PROGRAM              : 1
RBRACKET             : 12 46 57
RCURLY               : 3 6 40 42 71
RETURN               : 73
RPAREN               : 2 6 40 48 56 57 60 61 62 63 64 65 66 67 68 69 70 71 73 108
SEMICOLON            : 1 11 43 45 48 53 60 61 62 63 64 65 66 67 68 69 70 71 73
SERVO                : 66
STOP                 : 70
TURNLEFT             : 64
TURNRIGHT            : 65
VARDEF               : 11
VOID                 : 15
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

andor                : 86
assign               : 24
assign1              : 45
backward             : 30
block                : 3 6 21 40 42 71
call                 : 25
call1                : 48 51
call2                : 49
choosetype           : 6
cin                  : 26
cin1                 : 53
cin2                 : 54
cin3                 : 55
cin4                 : 57 58
compare              : 92
cond                 : 23
constant             : 109
cout                 : 27
delay                : 28
display              : 35
distance             : 36
else                 : 40 42
empty                : 5 8 10 13 18 20 22 41 44 47 50 52 59 72 85 87 93 100 105
exp                  : 90 92 99
exp1                 : 98
express              : 40 45 46 49 60 62 62 63 63 64 64 65 65 66 71 73 86 108
express1             : 83
express2             : 83
factor               : 103
forward              : 29
funcs                : 4
funcsblock           : 1 4
globalvarsblock      : 1
gotoelse             : 42
gotoif               : 40
lights               : 34
main                 : 1
main2                : 2
multidivi            : 104
params               : 16 17
paramsblock          : 6 16 17
plusminus            : 99
program              : 0
relational           : 83
relational1          : 90
return               : 39
servo                : 33
statute              : 21
stop                 : 37
term                 : 98 104
term1                : 103
turnleft             : 31
turnright            : 32
type                 : 11 14 19
vars                 : 7 9
vars1                : 11
varsblock            : 3 6 7 9
while                : 38
while1               : 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM globalvarsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . globalvarsblock funcsblock main FIN SEMICOLON
    (7) globalvarsblock -> . vars varsblock
    (8) globalvarsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (110) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    globalvarsblock                shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> PROGRAM globalvarsblock . funcsblock main FIN SEMICOLON
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (110) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 110 (empty -> .)

    funcsblock                     shift and go to state 7
    funcs                          shift and go to state 8
    empty                          shift and go to state 9

state 4

    (7) globalvarsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (110) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 12
    empty                          shift and go to state 13

state 5

    (8) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 8 (globalvarsblock -> empty .)
    MAIN            reduce using rule 8 (globalvarsblock -> empty .)


state 6

    (11) vars -> VARDEF . type ID vars1 SEMICOLON
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    type                           shift and go to state 14

state 7

    (1) program -> PROGRAM globalvarsblock funcsblock . main FIN SEMICOLON
    (2) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 8

    (4) funcsblock -> funcs . funcsblock
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (110) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 110 (empty -> .)

    funcs                          shift and go to state 8
    funcsblock                     shift and go to state 21
    empty                          shift and go to state 9

state 9

    (5) funcsblock -> empty .

    MAIN            reduce using rule 5 (funcsblock -> empty .)


state 10

    (6) funcs -> FUNCDEF . choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (14) choosetype -> . type
    (15) choosetype -> . VOID
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR

    VOID            shift and go to state 24
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    choosetype                     shift and go to state 22
    type                           shift and go to state 23

state 11

    (9) varsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (110) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    CIN             reduce using rule 110 (empty -> .)
    COUT            reduce using rule 110 (empty -> .)
    DELAY           reduce using rule 110 (empty -> .)
    FORWARD         reduce using rule 110 (empty -> .)
    BACKWARD        reduce using rule 110 (empty -> .)
    TURNLEFT        reduce using rule 110 (empty -> .)
    TURNRIGHT       reduce using rule 110 (empty -> .)
    SERVO           reduce using rule 110 (empty -> .)
    LIGHTS          reduce using rule 110 (empty -> .)
    DISPLAY         reduce using rule 110 (empty -> .)
    DISTANCE        reduce using rule 110 (empty -> .)
    STOP            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 25
    empty                          shift and go to state 13

state 12

    (7) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 7 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 7 (globalvarsblock -> vars varsblock .)


state 13

    (10) varsblock -> empty .

    FUNCDEF         reduce using rule 10 (varsblock -> empty .)
    MAIN            reduce using rule 10 (varsblock -> empty .)
    IF              reduce using rule 10 (varsblock -> empty .)
    ID              reduce using rule 10 (varsblock -> empty .)
    CALL            reduce using rule 10 (varsblock -> empty .)
    CIN             reduce using rule 10 (varsblock -> empty .)
    COUT            reduce using rule 10 (varsblock -> empty .)
    DELAY           reduce using rule 10 (varsblock -> empty .)
    FORWARD         reduce using rule 10 (varsblock -> empty .)
    BACKWARD        reduce using rule 10 (varsblock -> empty .)
    TURNLEFT        reduce using rule 10 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 10 (varsblock -> empty .)
    SERVO           reduce using rule 10 (varsblock -> empty .)
    LIGHTS          reduce using rule 10 (varsblock -> empty .)
    DISPLAY         reduce using rule 10 (varsblock -> empty .)
    DISTANCE        reduce using rule 10 (varsblock -> empty .)
    STOP            reduce using rule 10 (varsblock -> empty .)
    WHILE           reduce using rule 10 (varsblock -> empty .)
    RETURN          reduce using rule 10 (varsblock -> empty .)
    RCURLY          reduce using rule 10 (varsblock -> empty .)


state 14

    (11) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 26


state 15

    (74) type -> INT .

    ID              reduce using rule 74 (type -> INT .)


state 16

    (75) type -> FLOAT .

    ID              reduce using rule 75 (type -> FLOAT .)


state 17

    (76) type -> BOOL .

    ID              reduce using rule 76 (type -> BOOL .)


state 18

    (77) type -> CHAR .

    ID              reduce using rule 77 (type -> CHAR .)


state 19

    (1) program -> PROGRAM globalvarsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 27


state 20

    (2) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 28


state 21

    (4) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 4 (funcsblock -> funcs funcsblock .)


state 22

    (6) funcs -> FUNCDEF choosetype . ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY

    ID              shift and go to state 29


state 23

    (14) choosetype -> type .

    ID              reduce using rule 14 (choosetype -> type .)


state 24

    (15) choosetype -> VOID .

    ID              reduce using rule 15 (choosetype -> VOID .)


state 25

    (9) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (varsblock -> vars varsblock .)
    IF              reduce using rule 9 (varsblock -> vars varsblock .)
    ID              reduce using rule 9 (varsblock -> vars varsblock .)
    CALL            reduce using rule 9 (varsblock -> vars varsblock .)
    CIN             reduce using rule 9 (varsblock -> vars varsblock .)
    COUT            reduce using rule 9 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 9 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 9 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 9 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 9 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 9 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 9 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 9 (varsblock -> vars varsblock .)
    STOP            reduce using rule 9 (varsblock -> vars varsblock .)
    WHILE           reduce using rule 9 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 9 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 9 (varsblock -> vars varsblock .)


state 26

    (11) vars -> VARDEF type ID . vars1 SEMICOLON
    (12) vars1 -> . LBRACKET CTE_INT RBRACKET
    (13) vars1 -> . empty
    (110) empty -> .

    LBRACKET        shift and go to state 31
    SEMICOLON       reduce using rule 110 (empty -> .)

    vars1                          shift and go to state 30
    empty                          shift and go to state 32

state 27

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 33


state 28

    (2) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 34


state 29

    (6) funcs -> FUNCDEF choosetype ID . LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 35


state 30

    (11) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 36


state 31

    (12) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 37


state 32

    (13) vars1 -> empty .

    SEMICOLON       reduce using rule 13 (vars1 -> empty .)


state 33

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .)


state 34

    (2) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 38


state 35

    (6) funcs -> FUNCDEF choosetype ID LPAREN . paramsblock RPAREN LCURLY varsblock block RCURLY
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (110) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 41
    RPAREN          reduce using rule 110 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    paramsblock                    shift and go to state 39
    params                         shift and go to state 40
    empty                          shift and go to state 42
    type                           shift and go to state 43

state 36

    (11) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CALL            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    WHILE           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 37

    (12) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 44


state 38

    (2) main -> MAIN LPAREN RPAREN LCURLY . main2
    (3) main2 -> . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (110) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    CIN             reduce using rule 110 (empty -> .)
    COUT            reduce using rule 110 (empty -> .)
    DELAY           reduce using rule 110 (empty -> .)
    FORWARD         reduce using rule 110 (empty -> .)
    BACKWARD        reduce using rule 110 (empty -> .)
    TURNLEFT        reduce using rule 110 (empty -> .)
    TURNRIGHT       reduce using rule 110 (empty -> .)
    SERVO           reduce using rule 110 (empty -> .)
    LIGHTS          reduce using rule 110 (empty -> .)
    DISPLAY         reduce using rule 110 (empty -> .)
    DISTANCE        reduce using rule 110 (empty -> .)
    STOP            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    main2                          shift and go to state 45
    varsblock                      shift and go to state 46
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 39

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 47


state 40

    (16) paramsblock -> params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (110) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 41
    RPAREN          reduce using rule 110 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    params                         shift and go to state 40
    paramsblock                    shift and go to state 48
    empty                          shift and go to state 42
    type                           shift and go to state 43

state 41

    (17) paramsblock -> COMMA . params paramsblock
    (19) params -> . type ID
    (20) params -> . empty
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (110) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)

  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    params                         shift and go to state 49
    type                           shift and go to state 43
    empty                          shift and go to state 50

state 42

    (18) paramsblock -> empty .
    (20) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 18 (paramsblock -> empty .)
    RPAREN          reduce using rule 18 (paramsblock -> empty .)
    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)

  ! RPAREN          [ reduce using rule 20 (params -> empty .) ]


state 43

    (19) params -> type . ID

    ID              shift and go to state 51


state 44

    (12) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 12 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 45

    (2) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 2 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 46

    (3) main2 -> varsblock . block RCURLY
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    block                          shift and go to state 52
    statute                        shift and go to state 53
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 47

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 89


state 48

    (16) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 16 (paramsblock -> params paramsblock .)


state 49

    (17) paramsblock -> COMMA params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (110) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 41
    RPAREN          reduce using rule 110 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]

    params                         shift and go to state 40
    paramsblock                    shift and go to state 90
    empty                          shift and go to state 42
    type                           shift and go to state 43

state 50

    (20) params -> empty .

    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    RPAREN          reduce using rule 20 (params -> empty .)


state 51

    (19) params -> type ID .

    COMMA           reduce using rule 19 (params -> type ID .)
    INT             reduce using rule 19 (params -> type ID .)
    FLOAT           reduce using rule 19 (params -> type ID .)
    BOOL            reduce using rule 19 (params -> type ID .)
    CHAR            reduce using rule 19 (params -> type ID .)
    RPAREN          reduce using rule 19 (params -> type ID .)


state 52

    (3) main2 -> varsblock block . RCURLY

    RCURLY          shift and go to state 91


state 53

    (21) block -> statute . block
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    statute                        shift and go to state 53
    block                          shift and go to state 92
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 54

    (22) block -> empty .

    RCURLY          reduce using rule 22 (block -> empty .)


state 55

    (23) statute -> cond .

    IF              reduce using rule 23 (statute -> cond .)
    ID              reduce using rule 23 (statute -> cond .)
    CALL            reduce using rule 23 (statute -> cond .)
    CIN             reduce using rule 23 (statute -> cond .)
    COUT            reduce using rule 23 (statute -> cond .)
    DELAY           reduce using rule 23 (statute -> cond .)
    FORWARD         reduce using rule 23 (statute -> cond .)
    BACKWARD        reduce using rule 23 (statute -> cond .)
    TURNLEFT        reduce using rule 23 (statute -> cond .)
    TURNRIGHT       reduce using rule 23 (statute -> cond .)
    SERVO           reduce using rule 23 (statute -> cond .)
    LIGHTS          reduce using rule 23 (statute -> cond .)
    DISPLAY         reduce using rule 23 (statute -> cond .)
    DISTANCE        reduce using rule 23 (statute -> cond .)
    STOP            reduce using rule 23 (statute -> cond .)
    WHILE           reduce using rule 23 (statute -> cond .)
    RETURN          reduce using rule 23 (statute -> cond .)
    RCURLY          reduce using rule 23 (statute -> cond .)


state 56

    (24) statute -> assign .

    IF              reduce using rule 24 (statute -> assign .)
    ID              reduce using rule 24 (statute -> assign .)
    CALL            reduce using rule 24 (statute -> assign .)
    CIN             reduce using rule 24 (statute -> assign .)
    COUT            reduce using rule 24 (statute -> assign .)
    DELAY           reduce using rule 24 (statute -> assign .)
    FORWARD         reduce using rule 24 (statute -> assign .)
    BACKWARD        reduce using rule 24 (statute -> assign .)
    TURNLEFT        reduce using rule 24 (statute -> assign .)
    TURNRIGHT       reduce using rule 24 (statute -> assign .)
    SERVO           reduce using rule 24 (statute -> assign .)
    LIGHTS          reduce using rule 24 (statute -> assign .)
    DISPLAY         reduce using rule 24 (statute -> assign .)
    DISTANCE        reduce using rule 24 (statute -> assign .)
    STOP            reduce using rule 24 (statute -> assign .)
    WHILE           reduce using rule 24 (statute -> assign .)
    RETURN          reduce using rule 24 (statute -> assign .)
    RCURLY          reduce using rule 24 (statute -> assign .)


state 57

    (25) statute -> call .

    IF              reduce using rule 25 (statute -> call .)
    ID              reduce using rule 25 (statute -> call .)
    CALL            reduce using rule 25 (statute -> call .)
    CIN             reduce using rule 25 (statute -> call .)
    COUT            reduce using rule 25 (statute -> call .)
    DELAY           reduce using rule 25 (statute -> call .)
    FORWARD         reduce using rule 25 (statute -> call .)
    BACKWARD        reduce using rule 25 (statute -> call .)
    TURNLEFT        reduce using rule 25 (statute -> call .)
    TURNRIGHT       reduce using rule 25 (statute -> call .)
    SERVO           reduce using rule 25 (statute -> call .)
    LIGHTS          reduce using rule 25 (statute -> call .)
    DISPLAY         reduce using rule 25 (statute -> call .)
    DISTANCE        reduce using rule 25 (statute -> call .)
    STOP            reduce using rule 25 (statute -> call .)
    WHILE           reduce using rule 25 (statute -> call .)
    RETURN          reduce using rule 25 (statute -> call .)
    RCURLY          reduce using rule 25 (statute -> call .)


state 58

    (26) statute -> cin .

    IF              reduce using rule 26 (statute -> cin .)
    ID              reduce using rule 26 (statute -> cin .)
    CALL            reduce using rule 26 (statute -> cin .)
    CIN             reduce using rule 26 (statute -> cin .)
    COUT            reduce using rule 26 (statute -> cin .)
    DELAY           reduce using rule 26 (statute -> cin .)
    FORWARD         reduce using rule 26 (statute -> cin .)
    BACKWARD        reduce using rule 26 (statute -> cin .)
    TURNLEFT        reduce using rule 26 (statute -> cin .)
    TURNRIGHT       reduce using rule 26 (statute -> cin .)
    SERVO           reduce using rule 26 (statute -> cin .)
    LIGHTS          reduce using rule 26 (statute -> cin .)
    DISPLAY         reduce using rule 26 (statute -> cin .)
    DISTANCE        reduce using rule 26 (statute -> cin .)
    STOP            reduce using rule 26 (statute -> cin .)
    WHILE           reduce using rule 26 (statute -> cin .)
    RETURN          reduce using rule 26 (statute -> cin .)
    RCURLY          reduce using rule 26 (statute -> cin .)


state 59

    (27) statute -> cout .

    IF              reduce using rule 27 (statute -> cout .)
    ID              reduce using rule 27 (statute -> cout .)
    CALL            reduce using rule 27 (statute -> cout .)
    CIN             reduce using rule 27 (statute -> cout .)
    COUT            reduce using rule 27 (statute -> cout .)
    DELAY           reduce using rule 27 (statute -> cout .)
    FORWARD         reduce using rule 27 (statute -> cout .)
    BACKWARD        reduce using rule 27 (statute -> cout .)
    TURNLEFT        reduce using rule 27 (statute -> cout .)
    TURNRIGHT       reduce using rule 27 (statute -> cout .)
    SERVO           reduce using rule 27 (statute -> cout .)
    LIGHTS          reduce using rule 27 (statute -> cout .)
    DISPLAY         reduce using rule 27 (statute -> cout .)
    DISTANCE        reduce using rule 27 (statute -> cout .)
    STOP            reduce using rule 27 (statute -> cout .)
    WHILE           reduce using rule 27 (statute -> cout .)
    RETURN          reduce using rule 27 (statute -> cout .)
    RCURLY          reduce using rule 27 (statute -> cout .)


state 60

    (28) statute -> delay .

    IF              reduce using rule 28 (statute -> delay .)
    ID              reduce using rule 28 (statute -> delay .)
    CALL            reduce using rule 28 (statute -> delay .)
    CIN             reduce using rule 28 (statute -> delay .)
    COUT            reduce using rule 28 (statute -> delay .)
    DELAY           reduce using rule 28 (statute -> delay .)
    FORWARD         reduce using rule 28 (statute -> delay .)
    BACKWARD        reduce using rule 28 (statute -> delay .)
    TURNLEFT        reduce using rule 28 (statute -> delay .)
    TURNRIGHT       reduce using rule 28 (statute -> delay .)
    SERVO           reduce using rule 28 (statute -> delay .)
    LIGHTS          reduce using rule 28 (statute -> delay .)
    DISPLAY         reduce using rule 28 (statute -> delay .)
    DISTANCE        reduce using rule 28 (statute -> delay .)
    STOP            reduce using rule 28 (statute -> delay .)
    WHILE           reduce using rule 28 (statute -> delay .)
    RETURN          reduce using rule 28 (statute -> delay .)
    RCURLY          reduce using rule 28 (statute -> delay .)


state 61

    (29) statute -> forward .

    IF              reduce using rule 29 (statute -> forward .)
    ID              reduce using rule 29 (statute -> forward .)
    CALL            reduce using rule 29 (statute -> forward .)
    CIN             reduce using rule 29 (statute -> forward .)
    COUT            reduce using rule 29 (statute -> forward .)
    DELAY           reduce using rule 29 (statute -> forward .)
    FORWARD         reduce using rule 29 (statute -> forward .)
    BACKWARD        reduce using rule 29 (statute -> forward .)
    TURNLEFT        reduce using rule 29 (statute -> forward .)
    TURNRIGHT       reduce using rule 29 (statute -> forward .)
    SERVO           reduce using rule 29 (statute -> forward .)
    LIGHTS          reduce using rule 29 (statute -> forward .)
    DISPLAY         reduce using rule 29 (statute -> forward .)
    DISTANCE        reduce using rule 29 (statute -> forward .)
    STOP            reduce using rule 29 (statute -> forward .)
    WHILE           reduce using rule 29 (statute -> forward .)
    RETURN          reduce using rule 29 (statute -> forward .)
    RCURLY          reduce using rule 29 (statute -> forward .)


state 62

    (30) statute -> backward .

    IF              reduce using rule 30 (statute -> backward .)
    ID              reduce using rule 30 (statute -> backward .)
    CALL            reduce using rule 30 (statute -> backward .)
    CIN             reduce using rule 30 (statute -> backward .)
    COUT            reduce using rule 30 (statute -> backward .)
    DELAY           reduce using rule 30 (statute -> backward .)
    FORWARD         reduce using rule 30 (statute -> backward .)
    BACKWARD        reduce using rule 30 (statute -> backward .)
    TURNLEFT        reduce using rule 30 (statute -> backward .)
    TURNRIGHT       reduce using rule 30 (statute -> backward .)
    SERVO           reduce using rule 30 (statute -> backward .)
    LIGHTS          reduce using rule 30 (statute -> backward .)
    DISPLAY         reduce using rule 30 (statute -> backward .)
    DISTANCE        reduce using rule 30 (statute -> backward .)
    STOP            reduce using rule 30 (statute -> backward .)
    WHILE           reduce using rule 30 (statute -> backward .)
    RETURN          reduce using rule 30 (statute -> backward .)
    RCURLY          reduce using rule 30 (statute -> backward .)


state 63

    (31) statute -> turnleft .

    IF              reduce using rule 31 (statute -> turnleft .)
    ID              reduce using rule 31 (statute -> turnleft .)
    CALL            reduce using rule 31 (statute -> turnleft .)
    CIN             reduce using rule 31 (statute -> turnleft .)
    COUT            reduce using rule 31 (statute -> turnleft .)
    DELAY           reduce using rule 31 (statute -> turnleft .)
    FORWARD         reduce using rule 31 (statute -> turnleft .)
    BACKWARD        reduce using rule 31 (statute -> turnleft .)
    TURNLEFT        reduce using rule 31 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 31 (statute -> turnleft .)
    SERVO           reduce using rule 31 (statute -> turnleft .)
    LIGHTS          reduce using rule 31 (statute -> turnleft .)
    DISPLAY         reduce using rule 31 (statute -> turnleft .)
    DISTANCE        reduce using rule 31 (statute -> turnleft .)
    STOP            reduce using rule 31 (statute -> turnleft .)
    WHILE           reduce using rule 31 (statute -> turnleft .)
    RETURN          reduce using rule 31 (statute -> turnleft .)
    RCURLY          reduce using rule 31 (statute -> turnleft .)


state 64

    (32) statute -> turnright .

    IF              reduce using rule 32 (statute -> turnright .)
    ID              reduce using rule 32 (statute -> turnright .)
    CALL            reduce using rule 32 (statute -> turnright .)
    CIN             reduce using rule 32 (statute -> turnright .)
    COUT            reduce using rule 32 (statute -> turnright .)
    DELAY           reduce using rule 32 (statute -> turnright .)
    FORWARD         reduce using rule 32 (statute -> turnright .)
    BACKWARD        reduce using rule 32 (statute -> turnright .)
    TURNLEFT        reduce using rule 32 (statute -> turnright .)
    TURNRIGHT       reduce using rule 32 (statute -> turnright .)
    SERVO           reduce using rule 32 (statute -> turnright .)
    LIGHTS          reduce using rule 32 (statute -> turnright .)
    DISPLAY         reduce using rule 32 (statute -> turnright .)
    DISTANCE        reduce using rule 32 (statute -> turnright .)
    STOP            reduce using rule 32 (statute -> turnright .)
    WHILE           reduce using rule 32 (statute -> turnright .)
    RETURN          reduce using rule 32 (statute -> turnright .)
    RCURLY          reduce using rule 32 (statute -> turnright .)


state 65

    (33) statute -> servo .

    IF              reduce using rule 33 (statute -> servo .)
    ID              reduce using rule 33 (statute -> servo .)
    CALL            reduce using rule 33 (statute -> servo .)
    CIN             reduce using rule 33 (statute -> servo .)
    COUT            reduce using rule 33 (statute -> servo .)
    DELAY           reduce using rule 33 (statute -> servo .)
    FORWARD         reduce using rule 33 (statute -> servo .)
    BACKWARD        reduce using rule 33 (statute -> servo .)
    TURNLEFT        reduce using rule 33 (statute -> servo .)
    TURNRIGHT       reduce using rule 33 (statute -> servo .)
    SERVO           reduce using rule 33 (statute -> servo .)
    LIGHTS          reduce using rule 33 (statute -> servo .)
    DISPLAY         reduce using rule 33 (statute -> servo .)
    DISTANCE        reduce using rule 33 (statute -> servo .)
    STOP            reduce using rule 33 (statute -> servo .)
    WHILE           reduce using rule 33 (statute -> servo .)
    RETURN          reduce using rule 33 (statute -> servo .)
    RCURLY          reduce using rule 33 (statute -> servo .)


state 66

    (34) statute -> lights .

    IF              reduce using rule 34 (statute -> lights .)
    ID              reduce using rule 34 (statute -> lights .)
    CALL            reduce using rule 34 (statute -> lights .)
    CIN             reduce using rule 34 (statute -> lights .)
    COUT            reduce using rule 34 (statute -> lights .)
    DELAY           reduce using rule 34 (statute -> lights .)
    FORWARD         reduce using rule 34 (statute -> lights .)
    BACKWARD        reduce using rule 34 (statute -> lights .)
    TURNLEFT        reduce using rule 34 (statute -> lights .)
    TURNRIGHT       reduce using rule 34 (statute -> lights .)
    SERVO           reduce using rule 34 (statute -> lights .)
    LIGHTS          reduce using rule 34 (statute -> lights .)
    DISPLAY         reduce using rule 34 (statute -> lights .)
    DISTANCE        reduce using rule 34 (statute -> lights .)
    STOP            reduce using rule 34 (statute -> lights .)
    WHILE           reduce using rule 34 (statute -> lights .)
    RETURN          reduce using rule 34 (statute -> lights .)
    RCURLY          reduce using rule 34 (statute -> lights .)


state 67

    (35) statute -> display .

    IF              reduce using rule 35 (statute -> display .)
    ID              reduce using rule 35 (statute -> display .)
    CALL            reduce using rule 35 (statute -> display .)
    CIN             reduce using rule 35 (statute -> display .)
    COUT            reduce using rule 35 (statute -> display .)
    DELAY           reduce using rule 35 (statute -> display .)
    FORWARD         reduce using rule 35 (statute -> display .)
    BACKWARD        reduce using rule 35 (statute -> display .)
    TURNLEFT        reduce using rule 35 (statute -> display .)
    TURNRIGHT       reduce using rule 35 (statute -> display .)
    SERVO           reduce using rule 35 (statute -> display .)
    LIGHTS          reduce using rule 35 (statute -> display .)
    DISPLAY         reduce using rule 35 (statute -> display .)
    DISTANCE        reduce using rule 35 (statute -> display .)
    STOP            reduce using rule 35 (statute -> display .)
    WHILE           reduce using rule 35 (statute -> display .)
    RETURN          reduce using rule 35 (statute -> display .)
    RCURLY          reduce using rule 35 (statute -> display .)


state 68

    (36) statute -> distance .

    IF              reduce using rule 36 (statute -> distance .)
    ID              reduce using rule 36 (statute -> distance .)
    CALL            reduce using rule 36 (statute -> distance .)
    CIN             reduce using rule 36 (statute -> distance .)
    COUT            reduce using rule 36 (statute -> distance .)
    DELAY           reduce using rule 36 (statute -> distance .)
    FORWARD         reduce using rule 36 (statute -> distance .)
    BACKWARD        reduce using rule 36 (statute -> distance .)
    TURNLEFT        reduce using rule 36 (statute -> distance .)
    TURNRIGHT       reduce using rule 36 (statute -> distance .)
    SERVO           reduce using rule 36 (statute -> distance .)
    LIGHTS          reduce using rule 36 (statute -> distance .)
    DISPLAY         reduce using rule 36 (statute -> distance .)
    DISTANCE        reduce using rule 36 (statute -> distance .)
    STOP            reduce using rule 36 (statute -> distance .)
    WHILE           reduce using rule 36 (statute -> distance .)
    RETURN          reduce using rule 36 (statute -> distance .)
    RCURLY          reduce using rule 36 (statute -> distance .)


state 69

    (37) statute -> stop .

    IF              reduce using rule 37 (statute -> stop .)
    ID              reduce using rule 37 (statute -> stop .)
    CALL            reduce using rule 37 (statute -> stop .)
    CIN             reduce using rule 37 (statute -> stop .)
    COUT            reduce using rule 37 (statute -> stop .)
    DELAY           reduce using rule 37 (statute -> stop .)
    FORWARD         reduce using rule 37 (statute -> stop .)
    BACKWARD        reduce using rule 37 (statute -> stop .)
    TURNLEFT        reduce using rule 37 (statute -> stop .)
    TURNRIGHT       reduce using rule 37 (statute -> stop .)
    SERVO           reduce using rule 37 (statute -> stop .)
    LIGHTS          reduce using rule 37 (statute -> stop .)
    DISPLAY         reduce using rule 37 (statute -> stop .)
    DISTANCE        reduce using rule 37 (statute -> stop .)
    STOP            reduce using rule 37 (statute -> stop .)
    WHILE           reduce using rule 37 (statute -> stop .)
    RETURN          reduce using rule 37 (statute -> stop .)
    RCURLY          reduce using rule 37 (statute -> stop .)


state 70

    (38) statute -> while .

    IF              reduce using rule 38 (statute -> while .)
    ID              reduce using rule 38 (statute -> while .)
    CALL            reduce using rule 38 (statute -> while .)
    CIN             reduce using rule 38 (statute -> while .)
    COUT            reduce using rule 38 (statute -> while .)
    DELAY           reduce using rule 38 (statute -> while .)
    FORWARD         reduce using rule 38 (statute -> while .)
    BACKWARD        reduce using rule 38 (statute -> while .)
    TURNLEFT        reduce using rule 38 (statute -> while .)
    TURNRIGHT       reduce using rule 38 (statute -> while .)
    SERVO           reduce using rule 38 (statute -> while .)
    LIGHTS          reduce using rule 38 (statute -> while .)
    DISPLAY         reduce using rule 38 (statute -> while .)
    DISTANCE        reduce using rule 38 (statute -> while .)
    STOP            reduce using rule 38 (statute -> while .)
    WHILE           reduce using rule 38 (statute -> while .)
    RETURN          reduce using rule 38 (statute -> while .)
    RCURLY          reduce using rule 38 (statute -> while .)


state 71

    (39) statute -> return .

    IF              reduce using rule 39 (statute -> return .)
    ID              reduce using rule 39 (statute -> return .)
    CALL            reduce using rule 39 (statute -> return .)
    CIN             reduce using rule 39 (statute -> return .)
    COUT            reduce using rule 39 (statute -> return .)
    DELAY           reduce using rule 39 (statute -> return .)
    FORWARD         reduce using rule 39 (statute -> return .)
    BACKWARD        reduce using rule 39 (statute -> return .)
    TURNLEFT        reduce using rule 39 (statute -> return .)
    TURNRIGHT       reduce using rule 39 (statute -> return .)
    SERVO           reduce using rule 39 (statute -> return .)
    LIGHTS          reduce using rule 39 (statute -> return .)
    DISPLAY         reduce using rule 39 (statute -> return .)
    DISTANCE        reduce using rule 39 (statute -> return .)
    STOP            reduce using rule 39 (statute -> return .)
    WHILE           reduce using rule 39 (statute -> return .)
    RETURN          reduce using rule 39 (statute -> return .)
    RCURLY          reduce using rule 39 (statute -> return .)


state 72

    (40) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 93


state 73

    (45) assign -> ID . assign1 ASSIGN express SEMICOLON
    (46) assign1 -> . LBRACKET express RBRACKET
    (47) assign1 -> . empty
    (110) empty -> .

    LBRACKET        shift and go to state 95
    ASSIGN          reduce using rule 110 (empty -> .)

    assign1                        shift and go to state 94
    empty                          shift and go to state 96

state 74

    (48) call -> CALL . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 97


state 75

    (53) cin -> CIN . cin1 SEMICOLON
    (54) cin1 -> . cin2
    (55) cin1 -> . cin3
    (56) cin2 -> . LPAREN ID RPAREN
    (57) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 101
    LBRACKET        shift and go to state 102

    cin1                           shift and go to state 98
    cin2                           shift and go to state 99
    cin3                           shift and go to state 100

state 76

    (60) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 103


state 77

    (61) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 104


state 78

    (62) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 79

    (63) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 80

    (64) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 81

    (65) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 108


state 82

    (66) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 83

    (67) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 110


state 84

    (68) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 85

    (69) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 86

    (70) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 87

    (71) while -> WHILE . LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON

    LPAREN          shift and go to state 114


state 88

    (73) return -> RETURN . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 115


state 89

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (110) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    CIN             reduce using rule 110 (empty -> .)
    COUT            reduce using rule 110 (empty -> .)
    DELAY           reduce using rule 110 (empty -> .)
    FORWARD         reduce using rule 110 (empty -> .)
    BACKWARD        reduce using rule 110 (empty -> .)
    TURNLEFT        reduce using rule 110 (empty -> .)
    TURNRIGHT       reduce using rule 110 (empty -> .)
    SERVO           reduce using rule 110 (empty -> .)
    LIGHTS          reduce using rule 110 (empty -> .)
    DISPLAY         reduce using rule 110 (empty -> .)
    DISTANCE        reduce using rule 110 (empty -> .)
    STOP            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    varsblock                      shift and go to state 116
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 90

    (17) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 17 (paramsblock -> COMMA params paramsblock .)


state 91

    (3) main2 -> varsblock block RCURLY .

    FIN             reduce using rule 3 (main2 -> varsblock block RCURLY .)


state 92

    (21) block -> statute block .

    RCURLY          reduce using rule 21 (block -> statute block .)


state 93

    (40) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 117
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 94

    (45) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 121


state 95

    (46) assign1 -> LBRACKET . express RBRACKET
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 122
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 96

    (47) assign1 -> empty .

    ASSIGN          reduce using rule 47 (assign1 -> empty .)


state 97

    (48) call -> CALL ID . LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 123


state 98

    (53) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 124


state 99

    (54) cin1 -> cin2 .

    SEMICOLON       reduce using rule 54 (cin1 -> cin2 .)


state 100

    (55) cin1 -> cin3 .

    SEMICOLON       reduce using rule 55 (cin1 -> cin3 .)


state 101

    (56) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 125


state 102

    (57) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 126


state 103

    (60) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 127
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 104

    (61) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 128


state 105

    (62) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 129
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 106

    (63) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 130
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 107

    (64) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 131
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 108

    (65) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 132
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 109

    (66) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 133
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 110

    (67) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 134


state 111

    (68) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 135


state 112

    (69) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 136


state 113

    (70) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 114

    (71) while -> WHILE LPAREN . express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 138
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 115

    (73) return -> RETURN LPAREN . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 139
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 116

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock . block RCURLY
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    block                          shift and go to state 140
    statute                        shift and go to state 53
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 117

    (40) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 141


state 118

    (83) express -> express1 . relational express2
    (90) relational -> . exp relational1
    (91) relational -> . NOT
    (98) exp -> . term exp1
    (103) term -> . factor term1
    (108) factor -> . LPAREN express RPAREN
    (109) factor -> . constant
    (78) constant -> . ID
    (79) constant -> . CTE_INT
    (80) constant -> . CTE_FLOAT
    (81) constant -> . CTE_CHAR
    (82) constant -> . CTE_BOOL

    NOT             shift and go to state 144
    LPAREN          shift and go to state 147
    ID              shift and go to state 149
    CTE_INT         shift and go to state 150
    CTE_FLOAT       shift and go to state 151
    CTE_CHAR        shift and go to state 152
    CTE_BOOL        shift and go to state 153

    relational                     shift and go to state 142
    exp                            shift and go to state 143
    term                           shift and go to state 145
    factor                         shift and go to state 146
    constant                       shift and go to state 148

state 119

    (84) express1 -> NOTEQUALS .

    NOT             reduce using rule 84 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 84 (express1 -> NOTEQUALS .)
    ID              reduce using rule 84 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 84 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 84 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 84 (express1 -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 84 (express1 -> NOTEQUALS .)


state 120

    (85) express1 -> empty .

    NOT             reduce using rule 85 (express1 -> empty .)
    LPAREN          reduce using rule 85 (express1 -> empty .)
    ID              reduce using rule 85 (express1 -> empty .)
    CTE_INT         reduce using rule 85 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 85 (express1 -> empty .)
    CTE_CHAR        reduce using rule 85 (express1 -> empty .)
    CTE_BOOL        reduce using rule 85 (express1 -> empty .)


state 121

    (45) assign -> ID assign1 ASSIGN . express SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 154
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 122

    (46) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 155


state 123

    (48) call -> CALL ID LPAREN . call1 RPAREN SEMICOLON
    (49) call1 -> . express call2
    (50) call1 -> . empty
    (83) express -> . express1 relational express2
    (110) empty -> .
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty

    RPAREN          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)
    NOTEQUALS       shift and go to state 119

    call1                          shift and go to state 156
    express                        shift and go to state 157
    empty                          shift and go to state 158
    express1                       shift and go to state 118

state 124

    (53) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    CALL            reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    WHILE           reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 53 (cin -> CIN cin1 SEMICOLON .)


state 125

    (56) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 159


state 126

    (57) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 160


state 127

    (60) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 161


state 128

    (61) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 162


state 129

    (62) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 163


state 130

    (63) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 164


state 131

    (64) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 165


state 132

    (65) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 166


state 133

    (66) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 134

    (67) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 168


state 135

    (68) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 169


state 136

    (69) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 170


state 137

    (70) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 171


state 138

    (71) while -> WHILE LPAREN express . RPAREN while1 LCURLY block RCURLY SEMICOLON

    RPAREN          shift and go to state 172


state 139

    (73) return -> RETURN LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 173


state 140

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 174


state 141

    (40) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 175


state 142

    (83) express -> express1 relational . express2
    (86) express2 -> . andor express
    (87) express2 -> . empty
    (88) andor -> . AND
    (89) andor -> . OR
    (110) empty -> .

    AND             shift and go to state 179
    OR              shift and go to state 180
    RPAREN          reduce using rule 110 (empty -> .)
    RBRACKET        reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)

    express2                       shift and go to state 176
    andor                          shift and go to state 177
    empty                          shift and go to state 178

state 143

    (90) relational -> exp . relational1
    (92) relational1 -> . compare exp
    (93) relational1 -> . empty
    (94) compare -> . LESSTHAN
    (95) compare -> . GREATERTHAN
    (96) compare -> . EQUALS
    (97) compare -> . NOTEQUALS
    (110) empty -> .

    LESSTHAN        shift and go to state 184
    GREATERTHAN     shift and go to state 185
    EQUALS          shift and go to state 186
    NOTEQUALS       shift and go to state 187
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    RBRACKET        reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)

    relational1                    shift and go to state 181
    compare                        shift and go to state 182
    empty                          shift and go to state 183

state 144

    (91) relational -> NOT .

    AND             reduce using rule 91 (relational -> NOT .)
    OR              reduce using rule 91 (relational -> NOT .)
    RPAREN          reduce using rule 91 (relational -> NOT .)
    RBRACKET        reduce using rule 91 (relational -> NOT .)
    COMMA           reduce using rule 91 (relational -> NOT .)
    SEMICOLON       reduce using rule 91 (relational -> NOT .)


state 145

    (98) exp -> term . exp1
    (99) exp1 -> . plusminus exp
    (100) exp1 -> . empty
    (101) plusminus -> . PLUS
    (102) plusminus -> . MINUS
    (110) empty -> .

    PLUS            shift and go to state 191
    MINUS           shift and go to state 192
    LESSTHAN        reduce using rule 110 (empty -> .)
    GREATERTHAN     reduce using rule 110 (empty -> .)
    EQUALS          reduce using rule 110 (empty -> .)
    NOTEQUALS       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    RBRACKET        reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)

    exp1                           shift and go to state 188
    plusminus                      shift and go to state 189
    empty                          shift and go to state 190

state 146

    (103) term -> factor . term1
    (104) term1 -> . multidivi term
    (105) term1 -> . empty
    (106) multidivi -> . MULTI
    (107) multidivi -> . DIVI
    (110) empty -> .

    MULTI           shift and go to state 196
    DIVI            shift and go to state 197
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    LESSTHAN        reduce using rule 110 (empty -> .)
    GREATERTHAN     reduce using rule 110 (empty -> .)
    EQUALS          reduce using rule 110 (empty -> .)
    NOTEQUALS       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    RBRACKET        reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)

    term1                          shift and go to state 193
    multidivi                      shift and go to state 194
    empty                          shift and go to state 195

state 147

    (108) factor -> LPAREN . express RPAREN
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 198
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 148

    (109) factor -> constant .

    MULTI           reduce using rule 109 (factor -> constant .)
    DIVI            reduce using rule 109 (factor -> constant .)
    PLUS            reduce using rule 109 (factor -> constant .)
    MINUS           reduce using rule 109 (factor -> constant .)
    LESSTHAN        reduce using rule 109 (factor -> constant .)
    GREATERTHAN     reduce using rule 109 (factor -> constant .)
    EQUALS          reduce using rule 109 (factor -> constant .)
    NOTEQUALS       reduce using rule 109 (factor -> constant .)
    AND             reduce using rule 109 (factor -> constant .)
    OR              reduce using rule 109 (factor -> constant .)
    RPAREN          reduce using rule 109 (factor -> constant .)
    RBRACKET        reduce using rule 109 (factor -> constant .)
    COMMA           reduce using rule 109 (factor -> constant .)
    SEMICOLON       reduce using rule 109 (factor -> constant .)


state 149

    (78) constant -> ID .

    MULTI           reduce using rule 78 (constant -> ID .)
    DIVI            reduce using rule 78 (constant -> ID .)
    PLUS            reduce using rule 78 (constant -> ID .)
    MINUS           reduce using rule 78 (constant -> ID .)
    LESSTHAN        reduce using rule 78 (constant -> ID .)
    GREATERTHAN     reduce using rule 78 (constant -> ID .)
    EQUALS          reduce using rule 78 (constant -> ID .)
    NOTEQUALS       reduce using rule 78 (constant -> ID .)
    AND             reduce using rule 78 (constant -> ID .)
    OR              reduce using rule 78 (constant -> ID .)
    RPAREN          reduce using rule 78 (constant -> ID .)
    RBRACKET        reduce using rule 78 (constant -> ID .)
    COMMA           reduce using rule 78 (constant -> ID .)
    SEMICOLON       reduce using rule 78 (constant -> ID .)


state 150

    (79) constant -> CTE_INT .

    MULTI           reduce using rule 79 (constant -> CTE_INT .)
    DIVI            reduce using rule 79 (constant -> CTE_INT .)
    PLUS            reduce using rule 79 (constant -> CTE_INT .)
    MINUS           reduce using rule 79 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 79 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 79 (constant -> CTE_INT .)
    EQUALS          reduce using rule 79 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 79 (constant -> CTE_INT .)
    AND             reduce using rule 79 (constant -> CTE_INT .)
    OR              reduce using rule 79 (constant -> CTE_INT .)
    RPAREN          reduce using rule 79 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 79 (constant -> CTE_INT .)
    COMMA           reduce using rule 79 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 79 (constant -> CTE_INT .)


state 151

    (80) constant -> CTE_FLOAT .

    MULTI           reduce using rule 80 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 80 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 80 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 80 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 80 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 80 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 80 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 80 (constant -> CTE_FLOAT .)
    AND             reduce using rule 80 (constant -> CTE_FLOAT .)
    OR              reduce using rule 80 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 80 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 80 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 80 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 80 (constant -> CTE_FLOAT .)


state 152

    (81) constant -> CTE_CHAR .

    MULTI           reduce using rule 81 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 81 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 81 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 81 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 81 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 81 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 81 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 81 (constant -> CTE_CHAR .)
    AND             reduce using rule 81 (constant -> CTE_CHAR .)
    OR              reduce using rule 81 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 81 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 81 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 81 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 81 (constant -> CTE_CHAR .)


state 153

    (82) constant -> CTE_BOOL .

    MULTI           reduce using rule 82 (constant -> CTE_BOOL .)
    DIVI            reduce using rule 82 (constant -> CTE_BOOL .)
    PLUS            reduce using rule 82 (constant -> CTE_BOOL .)
    MINUS           reduce using rule 82 (constant -> CTE_BOOL .)
    LESSTHAN        reduce using rule 82 (constant -> CTE_BOOL .)
    GREATERTHAN     reduce using rule 82 (constant -> CTE_BOOL .)
    EQUALS          reduce using rule 82 (constant -> CTE_BOOL .)
    NOTEQUALS       reduce using rule 82 (constant -> CTE_BOOL .)
    AND             reduce using rule 82 (constant -> CTE_BOOL .)
    OR              reduce using rule 82 (constant -> CTE_BOOL .)
    RPAREN          reduce using rule 82 (constant -> CTE_BOOL .)
    RBRACKET        reduce using rule 82 (constant -> CTE_BOOL .)
    COMMA           reduce using rule 82 (constant -> CTE_BOOL .)
    SEMICOLON       reduce using rule 82 (constant -> CTE_BOOL .)


state 154

    (45) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 199


state 155

    (46) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 46 (assign1 -> LBRACKET express RBRACKET .)


state 156

    (48) call -> CALL ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 200


state 157

    (49) call1 -> express . call2
    (51) call2 -> . COMMA call1
    (52) call2 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 202
    RPAREN          reduce using rule 110 (empty -> .)

    call2                          shift and go to state 201
    empty                          shift and go to state 203

state 158

    (50) call1 -> empty .
    (85) express1 -> empty .

    RPAREN          reduce using rule 50 (call1 -> empty .)
    NOT             reduce using rule 85 (express1 -> empty .)
    LPAREN          reduce using rule 85 (express1 -> empty .)
    ID              reduce using rule 85 (express1 -> empty .)
    CTE_INT         reduce using rule 85 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 85 (express1 -> empty .)
    CTE_CHAR        reduce using rule 85 (express1 -> empty .)
    CTE_BOOL        reduce using rule 85 (express1 -> empty .)


state 159

    (56) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 56 (cin2 -> LPAREN ID RPAREN .)


state 160

    (57) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 204


state 161

    (60) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 205


state 162

    (61) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 206


state 163

    (62) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 207
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 164

    (63) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 208
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 165

    (64) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 209
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 166

    (65) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 210
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 167

    (66) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 211


state 168

    (67) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 212


state 169

    (68) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 170

    (69) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 171

    (70) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 172

    (71) while -> WHILE LPAREN express RPAREN . while1 LCURLY block RCURLY SEMICOLON
    (72) while1 -> . empty
    (110) empty -> .

    LCURLY          reduce using rule 110 (empty -> .)

    while1                         shift and go to state 214
    empty                          shift and go to state 215

state 173

    (73) return -> RETURN LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 216


state 174

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .

    FUNCDEF         reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .)
    MAIN            reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .)


state 175

    (40) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (41) gotoif -> . empty
    (110) empty -> .

    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    CIN             reduce using rule 110 (empty -> .)
    COUT            reduce using rule 110 (empty -> .)
    DELAY           reduce using rule 110 (empty -> .)
    FORWARD         reduce using rule 110 (empty -> .)
    BACKWARD        reduce using rule 110 (empty -> .)
    TURNLEFT        reduce using rule 110 (empty -> .)
    TURNRIGHT       reduce using rule 110 (empty -> .)
    SERVO           reduce using rule 110 (empty -> .)
    LIGHTS          reduce using rule 110 (empty -> .)
    DISPLAY         reduce using rule 110 (empty -> .)
    DISTANCE        reduce using rule 110 (empty -> .)
    STOP            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    gotoif                         shift and go to state 217
    empty                          shift and go to state 218

state 176

    (83) express -> express1 relational express2 .

    RPAREN          reduce using rule 83 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 83 (express -> express1 relational express2 .)
    COMMA           reduce using rule 83 (express -> express1 relational express2 .)
    SEMICOLON       reduce using rule 83 (express -> express1 relational express2 .)


state 177

    (86) express2 -> andor . express
    (83) express -> . express1 relational express2
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty
    (110) empty -> .

    NOTEQUALS       shift and go to state 119
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)

    express                        shift and go to state 219
    express1                       shift and go to state 118
    empty                          shift and go to state 120

state 178

    (87) express2 -> empty .

    RPAREN          reduce using rule 87 (express2 -> empty .)
    RBRACKET        reduce using rule 87 (express2 -> empty .)
    COMMA           reduce using rule 87 (express2 -> empty .)
    SEMICOLON       reduce using rule 87 (express2 -> empty .)


state 179

    (88) andor -> AND .

    NOTEQUALS       reduce using rule 88 (andor -> AND .)
    NOT             reduce using rule 88 (andor -> AND .)
    LPAREN          reduce using rule 88 (andor -> AND .)
    ID              reduce using rule 88 (andor -> AND .)
    CTE_INT         reduce using rule 88 (andor -> AND .)
    CTE_FLOAT       reduce using rule 88 (andor -> AND .)
    CTE_CHAR        reduce using rule 88 (andor -> AND .)
    CTE_BOOL        reduce using rule 88 (andor -> AND .)


state 180

    (89) andor -> OR .

    NOTEQUALS       reduce using rule 89 (andor -> OR .)
    NOT             reduce using rule 89 (andor -> OR .)
    LPAREN          reduce using rule 89 (andor -> OR .)
    ID              reduce using rule 89 (andor -> OR .)
    CTE_INT         reduce using rule 89 (andor -> OR .)
    CTE_FLOAT       reduce using rule 89 (andor -> OR .)
    CTE_CHAR        reduce using rule 89 (andor -> OR .)
    CTE_BOOL        reduce using rule 89 (andor -> OR .)


state 181

    (90) relational -> exp relational1 .

    AND             reduce using rule 90 (relational -> exp relational1 .)
    OR              reduce using rule 90 (relational -> exp relational1 .)
    RPAREN          reduce using rule 90 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 90 (relational -> exp relational1 .)
    COMMA           reduce using rule 90 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 90 (relational -> exp relational1 .)


state 182

    (92) relational1 -> compare . exp
    (98) exp -> . term exp1
    (103) term -> . factor term1
    (108) factor -> . LPAREN express RPAREN
    (109) factor -> . constant
    (78) constant -> . ID
    (79) constant -> . CTE_INT
    (80) constant -> . CTE_FLOAT
    (81) constant -> . CTE_CHAR
    (82) constant -> . CTE_BOOL

    LPAREN          shift and go to state 147
    ID              shift and go to state 149
    CTE_INT         shift and go to state 150
    CTE_FLOAT       shift and go to state 151
    CTE_CHAR        shift and go to state 152
    CTE_BOOL        shift and go to state 153

    exp                            shift and go to state 220
    term                           shift and go to state 145
    factor                         shift and go to state 146
    constant                       shift and go to state 148

state 183

    (93) relational1 -> empty .

    AND             reduce using rule 93 (relational1 -> empty .)
    OR              reduce using rule 93 (relational1 -> empty .)
    RPAREN          reduce using rule 93 (relational1 -> empty .)
    RBRACKET        reduce using rule 93 (relational1 -> empty .)
    COMMA           reduce using rule 93 (relational1 -> empty .)
    SEMICOLON       reduce using rule 93 (relational1 -> empty .)


state 184

    (94) compare -> LESSTHAN .

    LPAREN          reduce using rule 94 (compare -> LESSTHAN .)
    ID              reduce using rule 94 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 94 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 94 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 94 (compare -> LESSTHAN .)
    CTE_BOOL        reduce using rule 94 (compare -> LESSTHAN .)


state 185

    (95) compare -> GREATERTHAN .

    LPAREN          reduce using rule 95 (compare -> GREATERTHAN .)
    ID              reduce using rule 95 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 95 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 95 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 95 (compare -> GREATERTHAN .)
    CTE_BOOL        reduce using rule 95 (compare -> GREATERTHAN .)


state 186

    (96) compare -> EQUALS .

    LPAREN          reduce using rule 96 (compare -> EQUALS .)
    ID              reduce using rule 96 (compare -> EQUALS .)
    CTE_INT         reduce using rule 96 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 96 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 96 (compare -> EQUALS .)
    CTE_BOOL        reduce using rule 96 (compare -> EQUALS .)


state 187

    (97) compare -> NOTEQUALS .

    LPAREN          reduce using rule 97 (compare -> NOTEQUALS .)
    ID              reduce using rule 97 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 97 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 97 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 97 (compare -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 97 (compare -> NOTEQUALS .)


state 188

    (98) exp -> term exp1 .

    LESSTHAN        reduce using rule 98 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 98 (exp -> term exp1 .)
    EQUALS          reduce using rule 98 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 98 (exp -> term exp1 .)
    AND             reduce using rule 98 (exp -> term exp1 .)
    OR              reduce using rule 98 (exp -> term exp1 .)
    RPAREN          reduce using rule 98 (exp -> term exp1 .)
    RBRACKET        reduce using rule 98 (exp -> term exp1 .)
    COMMA           reduce using rule 98 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 98 (exp -> term exp1 .)


state 189

    (99) exp1 -> plusminus . exp
    (98) exp -> . term exp1
    (103) term -> . factor term1
    (108) factor -> . LPAREN express RPAREN
    (109) factor -> . constant
    (78) constant -> . ID
    (79) constant -> . CTE_INT
    (80) constant -> . CTE_FLOAT
    (81) constant -> . CTE_CHAR
    (82) constant -> . CTE_BOOL

    LPAREN          shift and go to state 147
    ID              shift and go to state 149
    CTE_INT         shift and go to state 150
    CTE_FLOAT       shift and go to state 151
    CTE_CHAR        shift and go to state 152
    CTE_BOOL        shift and go to state 153

    exp                            shift and go to state 221
    term                           shift and go to state 145
    factor                         shift and go to state 146
    constant                       shift and go to state 148

state 190

    (100) exp1 -> empty .

    LESSTHAN        reduce using rule 100 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 100 (exp1 -> empty .)
    EQUALS          reduce using rule 100 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 100 (exp1 -> empty .)
    AND             reduce using rule 100 (exp1 -> empty .)
    OR              reduce using rule 100 (exp1 -> empty .)
    RPAREN          reduce using rule 100 (exp1 -> empty .)
    RBRACKET        reduce using rule 100 (exp1 -> empty .)
    COMMA           reduce using rule 100 (exp1 -> empty .)
    SEMICOLON       reduce using rule 100 (exp1 -> empty .)


state 191

    (101) plusminus -> PLUS .

    LPAREN          reduce using rule 101 (plusminus -> PLUS .)
    ID              reduce using rule 101 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 101 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 101 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 101 (plusminus -> PLUS .)
    CTE_BOOL        reduce using rule 101 (plusminus -> PLUS .)


state 192

    (102) plusminus -> MINUS .

    LPAREN          reduce using rule 102 (plusminus -> MINUS .)
    ID              reduce using rule 102 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 102 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 102 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 102 (plusminus -> MINUS .)
    CTE_BOOL        reduce using rule 102 (plusminus -> MINUS .)


state 193

    (103) term -> factor term1 .

    PLUS            reduce using rule 103 (term -> factor term1 .)
    MINUS           reduce using rule 103 (term -> factor term1 .)
    LESSTHAN        reduce using rule 103 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 103 (term -> factor term1 .)
    EQUALS          reduce using rule 103 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 103 (term -> factor term1 .)
    AND             reduce using rule 103 (term -> factor term1 .)
    OR              reduce using rule 103 (term -> factor term1 .)
    RPAREN          reduce using rule 103 (term -> factor term1 .)
    RBRACKET        reduce using rule 103 (term -> factor term1 .)
    COMMA           reduce using rule 103 (term -> factor term1 .)
    SEMICOLON       reduce using rule 103 (term -> factor term1 .)


state 194

    (104) term1 -> multidivi . term
    (103) term -> . factor term1
    (108) factor -> . LPAREN express RPAREN
    (109) factor -> . constant
    (78) constant -> . ID
    (79) constant -> . CTE_INT
    (80) constant -> . CTE_FLOAT
    (81) constant -> . CTE_CHAR
    (82) constant -> . CTE_BOOL

    LPAREN          shift and go to state 147
    ID              shift and go to state 149
    CTE_INT         shift and go to state 150
    CTE_FLOAT       shift and go to state 151
    CTE_CHAR        shift and go to state 152
    CTE_BOOL        shift and go to state 153

    term                           shift and go to state 222
    factor                         shift and go to state 146
    constant                       shift and go to state 148

state 195

    (105) term1 -> empty .

    PLUS            reduce using rule 105 (term1 -> empty .)
    MINUS           reduce using rule 105 (term1 -> empty .)
    LESSTHAN        reduce using rule 105 (term1 -> empty .)
    GREATERTHAN     reduce using rule 105 (term1 -> empty .)
    EQUALS          reduce using rule 105 (term1 -> empty .)
    NOTEQUALS       reduce using rule 105 (term1 -> empty .)
    AND             reduce using rule 105 (term1 -> empty .)
    OR              reduce using rule 105 (term1 -> empty .)
    RPAREN          reduce using rule 105 (term1 -> empty .)
    RBRACKET        reduce using rule 105 (term1 -> empty .)
    COMMA           reduce using rule 105 (term1 -> empty .)
    SEMICOLON       reduce using rule 105 (term1 -> empty .)


state 196

    (106) multidivi -> MULTI .

    LPAREN          reduce using rule 106 (multidivi -> MULTI .)
    ID              reduce using rule 106 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 106 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 106 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 106 (multidivi -> MULTI .)
    CTE_BOOL        reduce using rule 106 (multidivi -> MULTI .)


state 197

    (107) multidivi -> DIVI .

    LPAREN          reduce using rule 107 (multidivi -> DIVI .)
    ID              reduce using rule 107 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 107 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 107 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 107 (multidivi -> DIVI .)
    CTE_BOOL        reduce using rule 107 (multidivi -> DIVI .)


state 198

    (108) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 223


state 199

    (45) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CALL            reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    WHILE           reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 45 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 200

    (48) call -> CALL ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 224


state 201

    (49) call1 -> express call2 .

    RPAREN          reduce using rule 49 (call1 -> express call2 .)


state 202

    (51) call2 -> COMMA . call1
    (49) call1 -> . express call2
    (50) call1 -> . empty
    (83) express -> . express1 relational express2
    (110) empty -> .
    (84) express1 -> . NOTEQUALS
    (85) express1 -> . empty

    RPAREN          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTE_INT         reduce using rule 110 (empty -> .)
    CTE_FLOAT       reduce using rule 110 (empty -> .)
    CTE_CHAR        reduce using rule 110 (empty -> .)
    CTE_BOOL        reduce using rule 110 (empty -> .)
    NOTEQUALS       shift and go to state 119

    call1                          shift and go to state 225
    express                        shift and go to state 157
    empty                          shift and go to state 158
    express1                       shift and go to state 118

state 203

    (52) call2 -> empty .

    RPAREN          reduce using rule 52 (call2 -> empty .)


state 204

    (57) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (58) cin4 -> . COMMA ID cin4
    (59) cin4 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 227
    RPAREN          reduce using rule 110 (empty -> .)

    cin4                           shift and go to state 226
    empty                          shift and go to state 228

state 205

    (60) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 60 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 206

    (61) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    WHILE           reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 61 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 207

    (62) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 229


state 208

    (63) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 230


state 209

    (64) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 231


state 210

    (65) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 232


state 211

    (66) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 212

    (67) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 233


state 213

    (68) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CALL            reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 214

    (71) while -> WHILE LPAREN express RPAREN while1 . LCURLY block RCURLY SEMICOLON

    LCURLY          shift and go to state 234


state 215

    (72) while1 -> empty .

    LCURLY          reduce using rule 72 (while1 -> empty .)


state 216

    (73) return -> RETURN LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 73 (return -> RETURN LPAREN express RPAREN SEMICOLON .)


state 217

    (40) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    block                          shift and go to state 235
    statute                        shift and go to state 53
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 218

    (41) gotoif -> empty .

    IF              reduce using rule 41 (gotoif -> empty .)
    ID              reduce using rule 41 (gotoif -> empty .)
    CALL            reduce using rule 41 (gotoif -> empty .)
    CIN             reduce using rule 41 (gotoif -> empty .)
    COUT            reduce using rule 41 (gotoif -> empty .)
    DELAY           reduce using rule 41 (gotoif -> empty .)
    FORWARD         reduce using rule 41 (gotoif -> empty .)
    BACKWARD        reduce using rule 41 (gotoif -> empty .)
    TURNLEFT        reduce using rule 41 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 41 (gotoif -> empty .)
    SERVO           reduce using rule 41 (gotoif -> empty .)
    LIGHTS          reduce using rule 41 (gotoif -> empty .)
    DISPLAY         reduce using rule 41 (gotoif -> empty .)
    DISTANCE        reduce using rule 41 (gotoif -> empty .)
    STOP            reduce using rule 41 (gotoif -> empty .)
    WHILE           reduce using rule 41 (gotoif -> empty .)
    RETURN          reduce using rule 41 (gotoif -> empty .)
    RCURLY          reduce using rule 41 (gotoif -> empty .)


state 219

    (86) express2 -> andor express .

    RPAREN          reduce using rule 86 (express2 -> andor express .)
    RBRACKET        reduce using rule 86 (express2 -> andor express .)
    COMMA           reduce using rule 86 (express2 -> andor express .)
    SEMICOLON       reduce using rule 86 (express2 -> andor express .)


state 220

    (92) relational1 -> compare exp .

    AND             reduce using rule 92 (relational1 -> compare exp .)
    OR              reduce using rule 92 (relational1 -> compare exp .)
    RPAREN          reduce using rule 92 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 92 (relational1 -> compare exp .)
    COMMA           reduce using rule 92 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 92 (relational1 -> compare exp .)


state 221

    (99) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 99 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 99 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 99 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 99 (exp1 -> plusminus exp .)
    AND             reduce using rule 99 (exp1 -> plusminus exp .)
    OR              reduce using rule 99 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 99 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 99 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 99 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 99 (exp1 -> plusminus exp .)


state 222

    (104) term1 -> multidivi term .

    PLUS            reduce using rule 104 (term1 -> multidivi term .)
    MINUS           reduce using rule 104 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 104 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 104 (term1 -> multidivi term .)
    EQUALS          reduce using rule 104 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 104 (term1 -> multidivi term .)
    AND             reduce using rule 104 (term1 -> multidivi term .)
    OR              reduce using rule 104 (term1 -> multidivi term .)
    RPAREN          reduce using rule 104 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 104 (term1 -> multidivi term .)
    COMMA           reduce using rule 104 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 104 (term1 -> multidivi term .)


state 223

    (108) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 108 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 108 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 108 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 108 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 108 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 108 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 108 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 108 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 108 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 108 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 108 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 108 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 108 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 108 (factor -> LPAREN express RPAREN .)


state 224

    (48) call -> CALL ID LPAREN call1 RPAREN SEMICOLON .

    IF              reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ID              reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CALL            reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CIN             reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    COUT            reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    STOP            reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 48 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)


state 225

    (51) call2 -> COMMA call1 .

    RPAREN          reduce using rule 51 (call2 -> COMMA call1 .)


state 226

    (57) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 236


state 227

    (58) cin4 -> COMMA . ID cin4

    ID              shift and go to state 237


state 228

    (59) cin4 -> empty .

    RPAREN          reduce using rule 59 (cin4 -> empty .)


state 229

    (62) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 238


state 230

    (63) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 239


state 231

    (64) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 240


state 232

    (65) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 241


state 233

    (67) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 242


state 234

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY . block RCURLY SEMICOLON
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    block                          shift and go to state 243
    statute                        shift and go to state 53
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 235

    (40) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 244


state 236

    (57) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 57 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 237

    (58) cin4 -> COMMA ID . cin4
    (58) cin4 -> . COMMA ID cin4
    (59) cin4 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 227
    RPAREN          reduce using rule 110 (empty -> .)

    cin4                           shift and go to state 245
    empty                          shift and go to state 228

state 238

    (62) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 62 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 239

    (63) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 240

    (64) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 241

    (65) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 65 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 242

    (67) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 243

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY block . RCURLY SEMICOLON

    RCURLY          shift and go to state 246


state 244

    (40) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (42) else -> . ELSE LCURLY gotoelse block RCURLY else
    (43) else -> . SEMICOLON

    ELSE            shift and go to state 248
    SEMICOLON       shift and go to state 249

    else                           shift and go to state 247

state 245

    (58) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 58 (cin4 -> COMMA ID cin4 .)


state 246

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY . SEMICOLON

    SEMICOLON       shift and go to state 250


state 247

    (40) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    IF              reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    ID              reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CALL            reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CIN             reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    COUT            reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DELAY           reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    FORWARD         reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    BACKWARD        reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNLEFT        reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNRIGHT       reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    SERVO           reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    LIGHTS          reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISPLAY         reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISTANCE        reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    STOP            reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    WHILE           reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RETURN          reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RCURLY          reduce using rule 40 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 248

    (42) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 251


state 249

    (43) else -> SEMICOLON .

    IF              reduce using rule 43 (else -> SEMICOLON .)
    ID              reduce using rule 43 (else -> SEMICOLON .)
    CALL            reduce using rule 43 (else -> SEMICOLON .)
    CIN             reduce using rule 43 (else -> SEMICOLON .)
    COUT            reduce using rule 43 (else -> SEMICOLON .)
    DELAY           reduce using rule 43 (else -> SEMICOLON .)
    FORWARD         reduce using rule 43 (else -> SEMICOLON .)
    BACKWARD        reduce using rule 43 (else -> SEMICOLON .)
    TURNLEFT        reduce using rule 43 (else -> SEMICOLON .)
    TURNRIGHT       reduce using rule 43 (else -> SEMICOLON .)
    SERVO           reduce using rule 43 (else -> SEMICOLON .)
    LIGHTS          reduce using rule 43 (else -> SEMICOLON .)
    DISPLAY         reduce using rule 43 (else -> SEMICOLON .)
    DISTANCE        reduce using rule 43 (else -> SEMICOLON .)
    STOP            reduce using rule 43 (else -> SEMICOLON .)
    WHILE           reduce using rule 43 (else -> SEMICOLON .)
    RETURN          reduce using rule 43 (else -> SEMICOLON .)
    RCURLY          reduce using rule 43 (else -> SEMICOLON .)


state 250

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .

    IF              reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    ID              reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    CALL            reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    CIN             reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    COUT            reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DELAY           reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    FORWARD         reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    BACKWARD        reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNLEFT        reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNRIGHT       reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    SERVO           reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    LIGHTS          reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISPLAY         reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISTANCE        reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    STOP            reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    WHILE           reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RETURN          reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RCURLY          reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)


state 251

    (42) else -> ELSE LCURLY . gotoelse block RCURLY else
    (44) gotoelse -> . empty
    (110) empty -> .

    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    CIN             reduce using rule 110 (empty -> .)
    COUT            reduce using rule 110 (empty -> .)
    DELAY           reduce using rule 110 (empty -> .)
    FORWARD         reduce using rule 110 (empty -> .)
    BACKWARD        reduce using rule 110 (empty -> .)
    TURNLEFT        reduce using rule 110 (empty -> .)
    TURNRIGHT       reduce using rule 110 (empty -> .)
    SERVO           reduce using rule 110 (empty -> .)
    LIGHTS          reduce using rule 110 (empty -> .)
    DISPLAY         reduce using rule 110 (empty -> .)
    DISTANCE        reduce using rule 110 (empty -> .)
    STOP            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    gotoelse                       shift and go to state 252
    empty                          shift and go to state 253

state 252

    (42) else -> ELSE LCURLY gotoelse . block RCURLY else
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . while
    (39) statute -> . return
    (110) empty -> .
    (40) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (45) assign -> . ID assign1 ASSIGN express SEMICOLON
    (48) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (53) cin -> . CIN cin1 SEMICOLON
    (60) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (61) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (62) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (65) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (66) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (67) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (68) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (69) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (70) stop -> . STOP LPAREN RPAREN SEMICOLON
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (73) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 110 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    WHILE           shift and go to state 87
    RETURN          shift and go to state 88

    block                          shift and go to state 254
    statute                        shift and go to state 53
    empty                          shift and go to state 54
    cond                           shift and go to state 55
    assign                         shift and go to state 56
    call                           shift and go to state 57
    cin                            shift and go to state 58
    cout                           shift and go to state 59
    delay                          shift and go to state 60
    forward                        shift and go to state 61
    backward                       shift and go to state 62
    turnleft                       shift and go to state 63
    turnright                      shift and go to state 64
    servo                          shift and go to state 65
    lights                         shift and go to state 66
    display                        shift and go to state 67
    distance                       shift and go to state 68
    stop                           shift and go to state 69
    while                          shift and go to state 70
    return                         shift and go to state 71

state 253

    (44) gotoelse -> empty .

    IF              reduce using rule 44 (gotoelse -> empty .)
    ID              reduce using rule 44 (gotoelse -> empty .)
    CALL            reduce using rule 44 (gotoelse -> empty .)
    CIN             reduce using rule 44 (gotoelse -> empty .)
    COUT            reduce using rule 44 (gotoelse -> empty .)
    DELAY           reduce using rule 44 (gotoelse -> empty .)
    FORWARD         reduce using rule 44 (gotoelse -> empty .)
    BACKWARD        reduce using rule 44 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 44 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 44 (gotoelse -> empty .)
    SERVO           reduce using rule 44 (gotoelse -> empty .)
    LIGHTS          reduce using rule 44 (gotoelse -> empty .)
    DISPLAY         reduce using rule 44 (gotoelse -> empty .)
    DISTANCE        reduce using rule 44 (gotoelse -> empty .)
    STOP            reduce using rule 44 (gotoelse -> empty .)
    WHILE           reduce using rule 44 (gotoelse -> empty .)
    RETURN          reduce using rule 44 (gotoelse -> empty .)
    RCURLY          reduce using rule 44 (gotoelse -> empty .)


state 254

    (42) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 255


state 255

    (42) else -> ELSE LCURLY gotoelse block RCURLY . else
    (42) else -> . ELSE LCURLY gotoelse block RCURLY else
    (43) else -> . SEMICOLON

    ELSE            shift and go to state 248
    SEMICOLON       shift and go to state 249

    else                           shift and go to state 256

state 256

    (42) else -> ELSE LCURLY gotoelse block RCURLY else .

    IF              reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    ID              reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CALL            reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CIN             reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    COUT            reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DELAY           reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    FORWARD         reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    BACKWARD        reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNLEFT        reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNRIGHT       reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    SERVO           reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    LIGHTS          reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISPLAY         reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISTANCE        reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    STOP            reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    WHILE           reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RETURN          reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RCURLY          reduce using rule 42 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for INT in state 35 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 35 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 35 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 35 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 41 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
WARNING: shift/reduce conflict for INT in state 49 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 49 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 49 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 42
