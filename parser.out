Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
Rule 2     gotomain -> empty
Rule 3     globalstartingquad -> empty
Rule 4     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 5     main2 -> varsblock startingquad block RCURLY
Rule 6     funcsblock -> funcs funcsblock
Rule 7     funcsblock -> empty
Rule 8     funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
Rule 9     globalvarsblock -> vars varsblock
Rule 10    globalvarsblock -> empty
Rule 11    setscope -> ID
Rule 12    varsblock -> vars varsblock
Rule 13    varsblock -> empty
Rule 14    startingquad -> empty
Rule 15    vars -> VARDEF type ID vars1 SEMICOLON
Rule 16    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 17    vars1 -> empty
Rule 18    choosetype -> type
Rule 19    choosetype -> VOID
Rule 20    paramsblock -> params paramsblock
Rule 21    paramsblock -> COMMA params paramsblock
Rule 22    paramsblock -> empty
Rule 23    params -> type ID
Rule 24    params -> empty
Rule 25    block -> statute block
Rule 26    block -> empty
Rule 27    statute -> cond
Rule 28    statute -> assign
Rule 29    statute -> call
Rule 30    statute -> cin
Rule 31    statute -> cout
Rule 32    statute -> delay
Rule 33    statute -> forward
Rule 34    statute -> backward
Rule 35    statute -> turnleft
Rule 36    statute -> turnright
Rule 37    statute -> servo
Rule 38    statute -> lights
Rule 39    statute -> display
Rule 40    statute -> distance
Rule 41    statute -> stop
Rule 42    statute -> while
Rule 43    statute -> return
Rule 44    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 45    gotoif -> empty
Rule 46    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 47    else -> SEMICOLON
Rule 48    gotoelse -> empty
Rule 49    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 50    assign1 -> LBRACKET express RBRACKET
Rule 51    assign1 -> empty
Rule 52    call -> era LPAREN paramcall RPAREN SEMICOLON
Rule 53    era -> ID
Rule 54    paramcall -> express paramcall1
Rule 55    paramcall1 -> COMMA paramcall
Rule 56    paramcall1 -> empty
Rule 57    cin -> CIN cin1 SEMICOLON
Rule 58    cin1 -> cin2
Rule 59    cin1 -> cin3
Rule 60    cin2 -> LPAREN ID RPAREN
Rule 61    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 62    cin4 -> COMMA ID cin4
Rule 63    cin4 -> empty
Rule 64    cout -> COUT LPAREN express cout1 RPAREN SEMICOLON
Rule 65    cout1 -> COMMA express cout1
Rule 66    cout1 -> empty
Rule 67    delay -> DELAY LPAREN express RPAREN SEMICOLON
Rule 68    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 69    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 70    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 71    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 72    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 73    lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
Rule 74    display -> DISPLAY LPAREN express RPAREN SEMICOLON
Rule 75    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 76    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 77    while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
Rule 78    while1 -> empty
Rule 79    return -> RETURN LPAREN express RPAREN SEMICOLON
Rule 80    type -> INT
Rule 81    type -> FLOAT
Rule 82    type -> BOOL
Rule 83    type -> CHAR
Rule 84    constant -> ID
Rule 85    constant -> CTE_INT
Rule 86    constant -> CTE_FLOAT
Rule 87    constant -> CTE_CHAR
Rule 88    constant -> CTE_BOOL
Rule 89    express -> express1 relational express2
Rule 90    express1 -> NOTEQUALS
Rule 91    express1 -> empty
Rule 92    express2 -> andor express
Rule 93    express2 -> empty
Rule 94    andor -> AND
Rule 95    andor -> OR
Rule 96    relational -> exp relational1
Rule 97    relational -> NOT
Rule 98    relational1 -> compare exp
Rule 99    relational1 -> empty
Rule 100   compare -> LESSTHAN
Rule 101   compare -> GREATERTHAN
Rule 102   compare -> EQUALS
Rule 103   compare -> NOTEQUALS
Rule 104   exp -> term exp1
Rule 105   exp1 -> plusminus exp
Rule 106   exp1 -> empty
Rule 107   plusminus -> PLUS
Rule 108   plusminus -> MINUS
Rule 109   term -> factor term1
Rule 110   term1 -> multidivi term
Rule 111   term1 -> empty
Rule 112   multidivi -> MULTI
Rule 113   multidivi -> DIVI
Rule 114   factor -> LPAREN express RPAREN
Rule 115   factor -> constant
Rule 116   factor -> call
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AND                  : 94
ASSIGN               : 49
BACKWARD             : 69
BOOL                 : 82
CHAR                 : 83
CIN                  : 57
COMMA                : 21 55 62 65 68 69 70 71 73
COUT                 : 64
CTE_ARR              : 
CTE_BOOL             : 88
CTE_CHAR             : 87
CTE_FLOAT            : 86
CTE_INT              : 16 61 85
DELAY                : 67
DISPLAY              : 74
DISTANCE             : 75
DIVI                 : 113
ELSE                 : 46
EQUALS               : 102
FIN                  : 1
FLOAT                : 81
FORWARD              : 68
FUNCDEF              : 8
GREATERTHAN          : 101
ID                   : 11 15 23 49 53 60 62 84
IF                   : 44
INT                  : 80
LBRACKET             : 16 50 61
LCURLY               : 4 8 44 46 77
LESSTHAN             : 100
LIGHTS               : 73
LPAREN               : 4 8 44 52 60 61 64 67 68 69 70 71 72 73 74 75 76 77 79 114
MAIN                 : 4
MINUS                : 108
MULTI                : 112
NOT                  : 97
NOTEQUALS            : 90 103
OR                   : 95
PLUS                 : 107
PROGRAM              : 1
RBRACKET             : 16 50 61
RCURLY               : 5 8 44 46 77
RETURN               : 79
RPAREN               : 4 8 44 52 60 61 64 67 68 69 70 71 72 73 74 75 76 77 79 114
SEMICOLON            : 1 15 47 49 52 57 64 67 68 69 70 71 72 73 74 75 76 77 79
SERVO                : 72
STOP                 : 76
TURNLEFT             : 70
TURNRIGHT            : 71
VARDEF               : 15
VOID                 : 19
WHILE                : 77
error                : 

Nonterminals, with rules where they appear

andor                : 92
assign               : 28
assign1              : 49
backward             : 34
block                : 5 8 25 44 46 77
call                 : 29 116
choosetype           : 8
cin                  : 30
cin1                 : 57
cin2                 : 58
cin3                 : 59
cin4                 : 61 62
compare              : 98
cond                 : 27
constant             : 115
cout                 : 31
cout1                : 64 65
delay                : 32
display              : 39
distance             : 40
else                 : 44 46
empty                : 2 3 7 10 13 14 17 22 24 26 45 48 51 56 63 66 78 91 93 99 106 111
era                  : 52
exp                  : 96 98 105
exp1                 : 104
express              : 44 49 50 54 64 65 67 68 68 69 69 70 70 71 71 72 73 73 74 77 79 92 114
express1             : 89
express2             : 89
factor               : 109
forward              : 33
funcs                : 6
funcsblock           : 1 6
globalstartingquad   : 1
globalvarsblock      : 1
gotoelse             : 46
gotoif               : 44
gotomain             : 1
lights               : 38
main                 : 1
main2                : 4
multidivi            : 110
paramcall            : 52 55
paramcall1           : 54
params               : 20 21
paramsblock          : 8 20 21
plusminus            : 105
program              : 0
relational           : 89
relational1          : 96
return               : 43
servo                : 37
setscope             : 8
startingquad         : 5 8
statute              : 25
stop                 : 41
term                 : 104 110
term1                : 109
turnleft             : 35
turnright            : 36
type                 : 15 18 23
vars                 : 9 12
vars1                : 15
varsblock            : 5 8 9 12
while                : 42
while1               : 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
    (2) gotomain -> . empty
    (117) empty -> .

    VARDEF          reduce using rule 117 (empty -> .)
    FUNCDEF         reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)

    gotomain                       shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM gotomain . globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
    (9) globalvarsblock -> . vars varsblock
    (10) globalvarsblock -> . empty
    (15) vars -> . VARDEF type ID vars1 SEMICOLON
    (117) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)

    globalvarsblock                shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 4

    (2) gotomain -> empty .

    VARDEF          reduce using rule 2 (gotomain -> empty .)
    FUNCDEF         reduce using rule 2 (gotomain -> empty .)
    MAIN            reduce using rule 2 (gotomain -> empty .)


state 5

    (1) program -> PROGRAM gotomain globalvarsblock . globalstartingquad funcsblock main FIN SEMICOLON
    (3) globalstartingquad -> . empty
    (117) empty -> .

    FUNCDEF         reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)

    globalstartingquad             shift and go to state 9
    empty                          shift and go to state 10

state 6

    (9) globalvarsblock -> vars . varsblock
    (12) varsblock -> . vars varsblock
    (13) varsblock -> . empty
    (15) vars -> . VARDEF type ID vars1 SEMICOLON
    (117) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 12
    empty                          shift and go to state 13

state 7

    (10) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 10 (globalvarsblock -> empty .)
    MAIN            reduce using rule 10 (globalvarsblock -> empty .)


state 8

    (15) vars -> VARDEF . type ID vars1 SEMICOLON
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    type                           shift and go to state 14

state 9

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad . funcsblock main FIN SEMICOLON
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (117) empty -> .

    FUNCDEF         shift and go to state 22
    MAIN            reduce using rule 117 (empty -> .)

    funcsblock                     shift and go to state 19
    funcs                          shift and go to state 20
    empty                          shift and go to state 21

state 10

    (3) globalstartingquad -> empty .

    FUNCDEF         reduce using rule 3 (globalstartingquad -> empty .)
    MAIN            reduce using rule 3 (globalstartingquad -> empty .)


state 11

    (12) varsblock -> vars . varsblock
    (12) varsblock -> . vars varsblock
    (13) varsblock -> . empty
    (15) vars -> . VARDEF type ID vars1 SEMICOLON
    (117) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 23
    empty                          shift and go to state 13

state 12

    (9) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (globalvarsblock -> vars varsblock .)


state 13

    (13) varsblock -> empty .

    FUNCDEF         reduce using rule 13 (varsblock -> empty .)
    MAIN            reduce using rule 13 (varsblock -> empty .)
    IF              reduce using rule 13 (varsblock -> empty .)
    ID              reduce using rule 13 (varsblock -> empty .)
    CIN             reduce using rule 13 (varsblock -> empty .)
    COUT            reduce using rule 13 (varsblock -> empty .)
    DELAY           reduce using rule 13 (varsblock -> empty .)
    FORWARD         reduce using rule 13 (varsblock -> empty .)
    BACKWARD        reduce using rule 13 (varsblock -> empty .)
    TURNLEFT        reduce using rule 13 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 13 (varsblock -> empty .)
    SERVO           reduce using rule 13 (varsblock -> empty .)
    LIGHTS          reduce using rule 13 (varsblock -> empty .)
    DISPLAY         reduce using rule 13 (varsblock -> empty .)
    DISTANCE        reduce using rule 13 (varsblock -> empty .)
    STOP            reduce using rule 13 (varsblock -> empty .)
    WHILE           reduce using rule 13 (varsblock -> empty .)
    RETURN          reduce using rule 13 (varsblock -> empty .)
    RCURLY          reduce using rule 13 (varsblock -> empty .)


state 14

    (15) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 24


state 15

    (80) type -> INT .

    ID              reduce using rule 80 (type -> INT .)


state 16

    (81) type -> FLOAT .

    ID              reduce using rule 81 (type -> FLOAT .)


state 17

    (82) type -> BOOL .

    ID              reduce using rule 82 (type -> BOOL .)


state 18

    (83) type -> CHAR .

    ID              reduce using rule 83 (type -> CHAR .)


state 19

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock . main FIN SEMICOLON
    (4) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 26

    main                           shift and go to state 25

state 20

    (6) funcsblock -> funcs . funcsblock
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (117) empty -> .

    FUNCDEF         shift and go to state 22
    MAIN            reduce using rule 117 (empty -> .)

    funcs                          shift and go to state 20
    funcsblock                     shift and go to state 27
    empty                          shift and go to state 21

state 21

    (7) funcsblock -> empty .

    MAIN            reduce using rule 7 (funcsblock -> empty .)


state 22

    (8) funcs -> FUNCDEF . choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (18) choosetype -> . type
    (19) choosetype -> . VOID
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR

    VOID            shift and go to state 30
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    choosetype                     shift and go to state 28
    type                           shift and go to state 29

state 23

    (12) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 12 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 12 (varsblock -> vars varsblock .)
    IF              reduce using rule 12 (varsblock -> vars varsblock .)
    ID              reduce using rule 12 (varsblock -> vars varsblock .)
    CIN             reduce using rule 12 (varsblock -> vars varsblock .)
    COUT            reduce using rule 12 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 12 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 12 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 12 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 12 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 12 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 12 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 12 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 12 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 12 (varsblock -> vars varsblock .)
    STOP            reduce using rule 12 (varsblock -> vars varsblock .)
    WHILE           reduce using rule 12 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 12 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 12 (varsblock -> vars varsblock .)


state 24

    (15) vars -> VARDEF type ID . vars1 SEMICOLON
    (16) vars1 -> . LBRACKET CTE_INT RBRACKET
    (17) vars1 -> . empty
    (117) empty -> .

    LBRACKET        shift and go to state 32
    SEMICOLON       reduce using rule 117 (empty -> .)

    vars1                          shift and go to state 31
    empty                          shift and go to state 33

state 25

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 34


state 26

    (4) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 35


state 27

    (6) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 6 (funcsblock -> funcs funcsblock .)


state 28

    (8) funcs -> FUNCDEF choosetype . setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (11) setscope -> . ID

    ID              shift and go to state 37

    setscope                       shift and go to state 36

state 29

    (18) choosetype -> type .

    ID              reduce using rule 18 (choosetype -> type .)


state 30

    (19) choosetype -> VOID .

    ID              reduce using rule 19 (choosetype -> VOID .)


state 31

    (15) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 38


state 32

    (16) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 39


state 33

    (17) vars1 -> empty .

    SEMICOLON       reduce using rule 17 (vars1 -> empty .)


state 34

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 40


state 35

    (4) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 41


state 36

    (8) funcs -> FUNCDEF choosetype setscope . LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY

    LPAREN          shift and go to state 42


state 37

    (11) setscope -> ID .

    LPAREN          reduce using rule 11 (setscope -> ID .)


state 38

    (15) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    WHILE           reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 15 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 39

    (16) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 43


state 40

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON .)


state 41

    (4) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 44


state 42

    (8) funcs -> FUNCDEF choosetype setscope LPAREN . paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (20) paramsblock -> . params paramsblock
    (21) paramsblock -> . COMMA params paramsblock
    (22) paramsblock -> . empty
    (23) params -> . type ID
    (24) params -> . empty
    (117) empty -> .
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 47
    RPAREN          reduce using rule 117 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 117 (empty -> .) ]
  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! BOOL            [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]

    paramsblock                    shift and go to state 45
    params                         shift and go to state 46
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 43

    (16) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 16 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 44

    (4) main -> MAIN LPAREN RPAREN LCURLY . main2
    (5) main2 -> . varsblock startingquad block RCURLY
    (12) varsblock -> . vars varsblock
    (13) varsblock -> . empty
    (15) vars -> . VARDEF type ID vars1 SEMICOLON
    (117) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    main2                          shift and go to state 50
    varsblock                      shift and go to state 51
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 45

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock . RPAREN LCURLY varsblock startingquad block RCURLY

    RPAREN          shift and go to state 52


state 46

    (20) paramsblock -> params . paramsblock
    (20) paramsblock -> . params paramsblock
    (21) paramsblock -> . COMMA params paramsblock
    (22) paramsblock -> . empty
    (23) params -> . type ID
    (24) params -> . empty
    (117) empty -> .
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 47
    RPAREN          reduce using rule 117 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 117 (empty -> .) ]
  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! BOOL            [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]

    params                         shift and go to state 46
    paramsblock                    shift and go to state 53
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 47

    (21) paramsblock -> COMMA . params paramsblock
    (23) params -> . type ID
    (24) params -> . empty
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR
    (117) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    COMMA           reduce using rule 117 (empty -> .)
    RPAREN          reduce using rule 117 (empty -> .)

  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! BOOL            [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]

    params                         shift and go to state 54
    type                           shift and go to state 49
    empty                          shift and go to state 55

state 48

    (22) paramsblock -> empty .
    (24) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 22 (paramsblock -> empty .)
    RPAREN          reduce using rule 22 (paramsblock -> empty .)
    COMMA           reduce using rule 24 (params -> empty .)
    INT             reduce using rule 24 (params -> empty .)
    FLOAT           reduce using rule 24 (params -> empty .)
    BOOL            reduce using rule 24 (params -> empty .)
    CHAR            reduce using rule 24 (params -> empty .)

  ! RPAREN          [ reduce using rule 24 (params -> empty .) ]


state 49

    (23) params -> type . ID

    ID              shift and go to state 56


state 50

    (4) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 4 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 51

    (5) main2 -> varsblock . startingquad block RCURLY
    (14) startingquad -> . empty
    (117) empty -> .

    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    startingquad                   shift and go to state 57
    empty                          shift and go to state 58

state 52

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN . LCURLY varsblock startingquad block RCURLY

    LCURLY          shift and go to state 59


state 53

    (20) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 20 (paramsblock -> params paramsblock .)


state 54

    (21) paramsblock -> COMMA params . paramsblock
    (20) paramsblock -> . params paramsblock
    (21) paramsblock -> . COMMA params paramsblock
    (22) paramsblock -> . empty
    (23) params -> . type ID
    (24) params -> . empty
    (117) empty -> .
    (80) type -> . INT
    (81) type -> . FLOAT
    (82) type -> . BOOL
    (83) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 47
    RPAREN          reduce using rule 117 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 117 (empty -> .) ]
  ! INT             [ reduce using rule 117 (empty -> .) ]
  ! FLOAT           [ reduce using rule 117 (empty -> .) ]
  ! BOOL            [ reduce using rule 117 (empty -> .) ]
  ! CHAR            [ reduce using rule 117 (empty -> .) ]

    params                         shift and go to state 46
    paramsblock                    shift and go to state 60
    empty                          shift and go to state 48
    type                           shift and go to state 49

state 55

    (24) params -> empty .

    COMMA           reduce using rule 24 (params -> empty .)
    INT             reduce using rule 24 (params -> empty .)
    FLOAT           reduce using rule 24 (params -> empty .)
    BOOL            reduce using rule 24 (params -> empty .)
    CHAR            reduce using rule 24 (params -> empty .)
    RPAREN          reduce using rule 24 (params -> empty .)


state 56

    (23) params -> type ID .

    COMMA           reduce using rule 23 (params -> type ID .)
    INT             reduce using rule 23 (params -> type ID .)
    FLOAT           reduce using rule 23 (params -> type ID .)
    BOOL            reduce using rule 23 (params -> type ID .)
    CHAR            reduce using rule 23 (params -> type ID .)
    RPAREN          reduce using rule 23 (params -> type ID .)


state 57

    (5) main2 -> varsblock startingquad . block RCURLY
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    block                          shift and go to state 61
    statute                        shift and go to state 62
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 58

    (14) startingquad -> empty .

    IF              reduce using rule 14 (startingquad -> empty .)
    ID              reduce using rule 14 (startingquad -> empty .)
    CIN             reduce using rule 14 (startingquad -> empty .)
    COUT            reduce using rule 14 (startingquad -> empty .)
    DELAY           reduce using rule 14 (startingquad -> empty .)
    FORWARD         reduce using rule 14 (startingquad -> empty .)
    BACKWARD        reduce using rule 14 (startingquad -> empty .)
    TURNLEFT        reduce using rule 14 (startingquad -> empty .)
    TURNRIGHT       reduce using rule 14 (startingquad -> empty .)
    SERVO           reduce using rule 14 (startingquad -> empty .)
    LIGHTS          reduce using rule 14 (startingquad -> empty .)
    DISPLAY         reduce using rule 14 (startingquad -> empty .)
    DISTANCE        reduce using rule 14 (startingquad -> empty .)
    STOP            reduce using rule 14 (startingquad -> empty .)
    WHILE           reduce using rule 14 (startingquad -> empty .)
    RETURN          reduce using rule 14 (startingquad -> empty .)
    RCURLY          reduce using rule 14 (startingquad -> empty .)


state 59

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY . varsblock startingquad block RCURLY
    (12) varsblock -> . vars varsblock
    (13) varsblock -> . empty
    (15) vars -> . VARDEF type ID vars1 SEMICOLON
    (117) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    varsblock                      shift and go to state 98
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 60

    (21) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 21 (paramsblock -> COMMA params paramsblock .)


state 61

    (5) main2 -> varsblock startingquad block . RCURLY

    RCURLY          shift and go to state 99


state 62

    (25) block -> statute . block
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    statute                        shift and go to state 62
    block                          shift and go to state 100
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 63

    (26) block -> empty .

    RCURLY          reduce using rule 26 (block -> empty .)


state 64

    (27) statute -> cond .

    IF              reduce using rule 27 (statute -> cond .)
    ID              reduce using rule 27 (statute -> cond .)
    CIN             reduce using rule 27 (statute -> cond .)
    COUT            reduce using rule 27 (statute -> cond .)
    DELAY           reduce using rule 27 (statute -> cond .)
    FORWARD         reduce using rule 27 (statute -> cond .)
    BACKWARD        reduce using rule 27 (statute -> cond .)
    TURNLEFT        reduce using rule 27 (statute -> cond .)
    TURNRIGHT       reduce using rule 27 (statute -> cond .)
    SERVO           reduce using rule 27 (statute -> cond .)
    LIGHTS          reduce using rule 27 (statute -> cond .)
    DISPLAY         reduce using rule 27 (statute -> cond .)
    DISTANCE        reduce using rule 27 (statute -> cond .)
    STOP            reduce using rule 27 (statute -> cond .)
    WHILE           reduce using rule 27 (statute -> cond .)
    RETURN          reduce using rule 27 (statute -> cond .)
    RCURLY          reduce using rule 27 (statute -> cond .)


state 65

    (28) statute -> assign .

    IF              reduce using rule 28 (statute -> assign .)
    ID              reduce using rule 28 (statute -> assign .)
    CIN             reduce using rule 28 (statute -> assign .)
    COUT            reduce using rule 28 (statute -> assign .)
    DELAY           reduce using rule 28 (statute -> assign .)
    FORWARD         reduce using rule 28 (statute -> assign .)
    BACKWARD        reduce using rule 28 (statute -> assign .)
    TURNLEFT        reduce using rule 28 (statute -> assign .)
    TURNRIGHT       reduce using rule 28 (statute -> assign .)
    SERVO           reduce using rule 28 (statute -> assign .)
    LIGHTS          reduce using rule 28 (statute -> assign .)
    DISPLAY         reduce using rule 28 (statute -> assign .)
    DISTANCE        reduce using rule 28 (statute -> assign .)
    STOP            reduce using rule 28 (statute -> assign .)
    WHILE           reduce using rule 28 (statute -> assign .)
    RETURN          reduce using rule 28 (statute -> assign .)
    RCURLY          reduce using rule 28 (statute -> assign .)


state 66

    (29) statute -> call .

    IF              reduce using rule 29 (statute -> call .)
    ID              reduce using rule 29 (statute -> call .)
    CIN             reduce using rule 29 (statute -> call .)
    COUT            reduce using rule 29 (statute -> call .)
    DELAY           reduce using rule 29 (statute -> call .)
    FORWARD         reduce using rule 29 (statute -> call .)
    BACKWARD        reduce using rule 29 (statute -> call .)
    TURNLEFT        reduce using rule 29 (statute -> call .)
    TURNRIGHT       reduce using rule 29 (statute -> call .)
    SERVO           reduce using rule 29 (statute -> call .)
    LIGHTS          reduce using rule 29 (statute -> call .)
    DISPLAY         reduce using rule 29 (statute -> call .)
    DISTANCE        reduce using rule 29 (statute -> call .)
    STOP            reduce using rule 29 (statute -> call .)
    WHILE           reduce using rule 29 (statute -> call .)
    RETURN          reduce using rule 29 (statute -> call .)
    RCURLY          reduce using rule 29 (statute -> call .)


state 67

    (30) statute -> cin .

    IF              reduce using rule 30 (statute -> cin .)
    ID              reduce using rule 30 (statute -> cin .)
    CIN             reduce using rule 30 (statute -> cin .)
    COUT            reduce using rule 30 (statute -> cin .)
    DELAY           reduce using rule 30 (statute -> cin .)
    FORWARD         reduce using rule 30 (statute -> cin .)
    BACKWARD        reduce using rule 30 (statute -> cin .)
    TURNLEFT        reduce using rule 30 (statute -> cin .)
    TURNRIGHT       reduce using rule 30 (statute -> cin .)
    SERVO           reduce using rule 30 (statute -> cin .)
    LIGHTS          reduce using rule 30 (statute -> cin .)
    DISPLAY         reduce using rule 30 (statute -> cin .)
    DISTANCE        reduce using rule 30 (statute -> cin .)
    STOP            reduce using rule 30 (statute -> cin .)
    WHILE           reduce using rule 30 (statute -> cin .)
    RETURN          reduce using rule 30 (statute -> cin .)
    RCURLY          reduce using rule 30 (statute -> cin .)


state 68

    (31) statute -> cout .

    IF              reduce using rule 31 (statute -> cout .)
    ID              reduce using rule 31 (statute -> cout .)
    CIN             reduce using rule 31 (statute -> cout .)
    COUT            reduce using rule 31 (statute -> cout .)
    DELAY           reduce using rule 31 (statute -> cout .)
    FORWARD         reduce using rule 31 (statute -> cout .)
    BACKWARD        reduce using rule 31 (statute -> cout .)
    TURNLEFT        reduce using rule 31 (statute -> cout .)
    TURNRIGHT       reduce using rule 31 (statute -> cout .)
    SERVO           reduce using rule 31 (statute -> cout .)
    LIGHTS          reduce using rule 31 (statute -> cout .)
    DISPLAY         reduce using rule 31 (statute -> cout .)
    DISTANCE        reduce using rule 31 (statute -> cout .)
    STOP            reduce using rule 31 (statute -> cout .)
    WHILE           reduce using rule 31 (statute -> cout .)
    RETURN          reduce using rule 31 (statute -> cout .)
    RCURLY          reduce using rule 31 (statute -> cout .)


state 69

    (32) statute -> delay .

    IF              reduce using rule 32 (statute -> delay .)
    ID              reduce using rule 32 (statute -> delay .)
    CIN             reduce using rule 32 (statute -> delay .)
    COUT            reduce using rule 32 (statute -> delay .)
    DELAY           reduce using rule 32 (statute -> delay .)
    FORWARD         reduce using rule 32 (statute -> delay .)
    BACKWARD        reduce using rule 32 (statute -> delay .)
    TURNLEFT        reduce using rule 32 (statute -> delay .)
    TURNRIGHT       reduce using rule 32 (statute -> delay .)
    SERVO           reduce using rule 32 (statute -> delay .)
    LIGHTS          reduce using rule 32 (statute -> delay .)
    DISPLAY         reduce using rule 32 (statute -> delay .)
    DISTANCE        reduce using rule 32 (statute -> delay .)
    STOP            reduce using rule 32 (statute -> delay .)
    WHILE           reduce using rule 32 (statute -> delay .)
    RETURN          reduce using rule 32 (statute -> delay .)
    RCURLY          reduce using rule 32 (statute -> delay .)


state 70

    (33) statute -> forward .

    IF              reduce using rule 33 (statute -> forward .)
    ID              reduce using rule 33 (statute -> forward .)
    CIN             reduce using rule 33 (statute -> forward .)
    COUT            reduce using rule 33 (statute -> forward .)
    DELAY           reduce using rule 33 (statute -> forward .)
    FORWARD         reduce using rule 33 (statute -> forward .)
    BACKWARD        reduce using rule 33 (statute -> forward .)
    TURNLEFT        reduce using rule 33 (statute -> forward .)
    TURNRIGHT       reduce using rule 33 (statute -> forward .)
    SERVO           reduce using rule 33 (statute -> forward .)
    LIGHTS          reduce using rule 33 (statute -> forward .)
    DISPLAY         reduce using rule 33 (statute -> forward .)
    DISTANCE        reduce using rule 33 (statute -> forward .)
    STOP            reduce using rule 33 (statute -> forward .)
    WHILE           reduce using rule 33 (statute -> forward .)
    RETURN          reduce using rule 33 (statute -> forward .)
    RCURLY          reduce using rule 33 (statute -> forward .)


state 71

    (34) statute -> backward .

    IF              reduce using rule 34 (statute -> backward .)
    ID              reduce using rule 34 (statute -> backward .)
    CIN             reduce using rule 34 (statute -> backward .)
    COUT            reduce using rule 34 (statute -> backward .)
    DELAY           reduce using rule 34 (statute -> backward .)
    FORWARD         reduce using rule 34 (statute -> backward .)
    BACKWARD        reduce using rule 34 (statute -> backward .)
    TURNLEFT        reduce using rule 34 (statute -> backward .)
    TURNRIGHT       reduce using rule 34 (statute -> backward .)
    SERVO           reduce using rule 34 (statute -> backward .)
    LIGHTS          reduce using rule 34 (statute -> backward .)
    DISPLAY         reduce using rule 34 (statute -> backward .)
    DISTANCE        reduce using rule 34 (statute -> backward .)
    STOP            reduce using rule 34 (statute -> backward .)
    WHILE           reduce using rule 34 (statute -> backward .)
    RETURN          reduce using rule 34 (statute -> backward .)
    RCURLY          reduce using rule 34 (statute -> backward .)


state 72

    (35) statute -> turnleft .

    IF              reduce using rule 35 (statute -> turnleft .)
    ID              reduce using rule 35 (statute -> turnleft .)
    CIN             reduce using rule 35 (statute -> turnleft .)
    COUT            reduce using rule 35 (statute -> turnleft .)
    DELAY           reduce using rule 35 (statute -> turnleft .)
    FORWARD         reduce using rule 35 (statute -> turnleft .)
    BACKWARD        reduce using rule 35 (statute -> turnleft .)
    TURNLEFT        reduce using rule 35 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 35 (statute -> turnleft .)
    SERVO           reduce using rule 35 (statute -> turnleft .)
    LIGHTS          reduce using rule 35 (statute -> turnleft .)
    DISPLAY         reduce using rule 35 (statute -> turnleft .)
    DISTANCE        reduce using rule 35 (statute -> turnleft .)
    STOP            reduce using rule 35 (statute -> turnleft .)
    WHILE           reduce using rule 35 (statute -> turnleft .)
    RETURN          reduce using rule 35 (statute -> turnleft .)
    RCURLY          reduce using rule 35 (statute -> turnleft .)


state 73

    (36) statute -> turnright .

    IF              reduce using rule 36 (statute -> turnright .)
    ID              reduce using rule 36 (statute -> turnright .)
    CIN             reduce using rule 36 (statute -> turnright .)
    COUT            reduce using rule 36 (statute -> turnright .)
    DELAY           reduce using rule 36 (statute -> turnright .)
    FORWARD         reduce using rule 36 (statute -> turnright .)
    BACKWARD        reduce using rule 36 (statute -> turnright .)
    TURNLEFT        reduce using rule 36 (statute -> turnright .)
    TURNRIGHT       reduce using rule 36 (statute -> turnright .)
    SERVO           reduce using rule 36 (statute -> turnright .)
    LIGHTS          reduce using rule 36 (statute -> turnright .)
    DISPLAY         reduce using rule 36 (statute -> turnright .)
    DISTANCE        reduce using rule 36 (statute -> turnright .)
    STOP            reduce using rule 36 (statute -> turnright .)
    WHILE           reduce using rule 36 (statute -> turnright .)
    RETURN          reduce using rule 36 (statute -> turnright .)
    RCURLY          reduce using rule 36 (statute -> turnright .)


state 74

    (37) statute -> servo .

    IF              reduce using rule 37 (statute -> servo .)
    ID              reduce using rule 37 (statute -> servo .)
    CIN             reduce using rule 37 (statute -> servo .)
    COUT            reduce using rule 37 (statute -> servo .)
    DELAY           reduce using rule 37 (statute -> servo .)
    FORWARD         reduce using rule 37 (statute -> servo .)
    BACKWARD        reduce using rule 37 (statute -> servo .)
    TURNLEFT        reduce using rule 37 (statute -> servo .)
    TURNRIGHT       reduce using rule 37 (statute -> servo .)
    SERVO           reduce using rule 37 (statute -> servo .)
    LIGHTS          reduce using rule 37 (statute -> servo .)
    DISPLAY         reduce using rule 37 (statute -> servo .)
    DISTANCE        reduce using rule 37 (statute -> servo .)
    STOP            reduce using rule 37 (statute -> servo .)
    WHILE           reduce using rule 37 (statute -> servo .)
    RETURN          reduce using rule 37 (statute -> servo .)
    RCURLY          reduce using rule 37 (statute -> servo .)


state 75

    (38) statute -> lights .

    IF              reduce using rule 38 (statute -> lights .)
    ID              reduce using rule 38 (statute -> lights .)
    CIN             reduce using rule 38 (statute -> lights .)
    COUT            reduce using rule 38 (statute -> lights .)
    DELAY           reduce using rule 38 (statute -> lights .)
    FORWARD         reduce using rule 38 (statute -> lights .)
    BACKWARD        reduce using rule 38 (statute -> lights .)
    TURNLEFT        reduce using rule 38 (statute -> lights .)
    TURNRIGHT       reduce using rule 38 (statute -> lights .)
    SERVO           reduce using rule 38 (statute -> lights .)
    LIGHTS          reduce using rule 38 (statute -> lights .)
    DISPLAY         reduce using rule 38 (statute -> lights .)
    DISTANCE        reduce using rule 38 (statute -> lights .)
    STOP            reduce using rule 38 (statute -> lights .)
    WHILE           reduce using rule 38 (statute -> lights .)
    RETURN          reduce using rule 38 (statute -> lights .)
    RCURLY          reduce using rule 38 (statute -> lights .)


state 76

    (39) statute -> display .

    IF              reduce using rule 39 (statute -> display .)
    ID              reduce using rule 39 (statute -> display .)
    CIN             reduce using rule 39 (statute -> display .)
    COUT            reduce using rule 39 (statute -> display .)
    DELAY           reduce using rule 39 (statute -> display .)
    FORWARD         reduce using rule 39 (statute -> display .)
    BACKWARD        reduce using rule 39 (statute -> display .)
    TURNLEFT        reduce using rule 39 (statute -> display .)
    TURNRIGHT       reduce using rule 39 (statute -> display .)
    SERVO           reduce using rule 39 (statute -> display .)
    LIGHTS          reduce using rule 39 (statute -> display .)
    DISPLAY         reduce using rule 39 (statute -> display .)
    DISTANCE        reduce using rule 39 (statute -> display .)
    STOP            reduce using rule 39 (statute -> display .)
    WHILE           reduce using rule 39 (statute -> display .)
    RETURN          reduce using rule 39 (statute -> display .)
    RCURLY          reduce using rule 39 (statute -> display .)


state 77

    (40) statute -> distance .

    IF              reduce using rule 40 (statute -> distance .)
    ID              reduce using rule 40 (statute -> distance .)
    CIN             reduce using rule 40 (statute -> distance .)
    COUT            reduce using rule 40 (statute -> distance .)
    DELAY           reduce using rule 40 (statute -> distance .)
    FORWARD         reduce using rule 40 (statute -> distance .)
    BACKWARD        reduce using rule 40 (statute -> distance .)
    TURNLEFT        reduce using rule 40 (statute -> distance .)
    TURNRIGHT       reduce using rule 40 (statute -> distance .)
    SERVO           reduce using rule 40 (statute -> distance .)
    LIGHTS          reduce using rule 40 (statute -> distance .)
    DISPLAY         reduce using rule 40 (statute -> distance .)
    DISTANCE        reduce using rule 40 (statute -> distance .)
    STOP            reduce using rule 40 (statute -> distance .)
    WHILE           reduce using rule 40 (statute -> distance .)
    RETURN          reduce using rule 40 (statute -> distance .)
    RCURLY          reduce using rule 40 (statute -> distance .)


state 78

    (41) statute -> stop .

    IF              reduce using rule 41 (statute -> stop .)
    ID              reduce using rule 41 (statute -> stop .)
    CIN             reduce using rule 41 (statute -> stop .)
    COUT            reduce using rule 41 (statute -> stop .)
    DELAY           reduce using rule 41 (statute -> stop .)
    FORWARD         reduce using rule 41 (statute -> stop .)
    BACKWARD        reduce using rule 41 (statute -> stop .)
    TURNLEFT        reduce using rule 41 (statute -> stop .)
    TURNRIGHT       reduce using rule 41 (statute -> stop .)
    SERVO           reduce using rule 41 (statute -> stop .)
    LIGHTS          reduce using rule 41 (statute -> stop .)
    DISPLAY         reduce using rule 41 (statute -> stop .)
    DISTANCE        reduce using rule 41 (statute -> stop .)
    STOP            reduce using rule 41 (statute -> stop .)
    WHILE           reduce using rule 41 (statute -> stop .)
    RETURN          reduce using rule 41 (statute -> stop .)
    RCURLY          reduce using rule 41 (statute -> stop .)


state 79

    (42) statute -> while .

    IF              reduce using rule 42 (statute -> while .)
    ID              reduce using rule 42 (statute -> while .)
    CIN             reduce using rule 42 (statute -> while .)
    COUT            reduce using rule 42 (statute -> while .)
    DELAY           reduce using rule 42 (statute -> while .)
    FORWARD         reduce using rule 42 (statute -> while .)
    BACKWARD        reduce using rule 42 (statute -> while .)
    TURNLEFT        reduce using rule 42 (statute -> while .)
    TURNRIGHT       reduce using rule 42 (statute -> while .)
    SERVO           reduce using rule 42 (statute -> while .)
    LIGHTS          reduce using rule 42 (statute -> while .)
    DISPLAY         reduce using rule 42 (statute -> while .)
    DISTANCE        reduce using rule 42 (statute -> while .)
    STOP            reduce using rule 42 (statute -> while .)
    WHILE           reduce using rule 42 (statute -> while .)
    RETURN          reduce using rule 42 (statute -> while .)
    RCURLY          reduce using rule 42 (statute -> while .)


state 80

    (43) statute -> return .

    IF              reduce using rule 43 (statute -> return .)
    ID              reduce using rule 43 (statute -> return .)
    CIN             reduce using rule 43 (statute -> return .)
    COUT            reduce using rule 43 (statute -> return .)
    DELAY           reduce using rule 43 (statute -> return .)
    FORWARD         reduce using rule 43 (statute -> return .)
    BACKWARD        reduce using rule 43 (statute -> return .)
    TURNLEFT        reduce using rule 43 (statute -> return .)
    TURNRIGHT       reduce using rule 43 (statute -> return .)
    SERVO           reduce using rule 43 (statute -> return .)
    LIGHTS          reduce using rule 43 (statute -> return .)
    DISPLAY         reduce using rule 43 (statute -> return .)
    DISTANCE        reduce using rule 43 (statute -> return .)
    STOP            reduce using rule 43 (statute -> return .)
    WHILE           reduce using rule 43 (statute -> return .)
    RETURN          reduce using rule 43 (statute -> return .)
    RCURLY          reduce using rule 43 (statute -> return .)


state 81

    (44) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 101


state 82

    (49) assign -> ID . assign1 ASSIGN express SEMICOLON
    (53) era -> ID .
    (50) assign1 -> . LBRACKET express RBRACKET
    (51) assign1 -> . empty
    (117) empty -> .

    LPAREN          reduce using rule 53 (era -> ID .)
    LBRACKET        shift and go to state 103
    ASSIGN          reduce using rule 117 (empty -> .)

    assign1                        shift and go to state 102
    empty                          shift and go to state 104

state 83

    (52) call -> era . LPAREN paramcall RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 84

    (57) cin -> CIN . cin1 SEMICOLON
    (58) cin1 -> . cin2
    (59) cin1 -> . cin3
    (60) cin2 -> . LPAREN ID RPAREN
    (61) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 109
    LBRACKET        shift and go to state 110

    cin1                           shift and go to state 106
    cin2                           shift and go to state 107
    cin3                           shift and go to state 108

state 85

    (64) cout -> COUT . LPAREN express cout1 RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 86

    (67) delay -> DELAY . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 87

    (68) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 88

    (69) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 114


state 89

    (70) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 115


state 90

    (71) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 116


state 91

    (72) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 117


state 92

    (73) lights -> LIGHTS . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 118


state 93

    (74) display -> DISPLAY . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 119


state 94

    (75) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 120


state 95

    (76) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 121


state 96

    (77) while -> WHILE . LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON

    LPAREN          shift and go to state 122


state 97

    (79) return -> RETURN . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 123


state 98

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock . startingquad block RCURLY
    (14) startingquad -> . empty
    (117) empty -> .

    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    startingquad                   shift and go to state 124
    empty                          shift and go to state 58

state 99

    (5) main2 -> varsblock startingquad block RCURLY .

    FIN             reduce using rule 5 (main2 -> varsblock startingquad block RCURLY .)


state 100

    (25) block -> statute block .

    RCURLY          reduce using rule 25 (block -> statute block .)


state 101

    (44) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 125
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 102

    (49) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 129


state 103

    (50) assign1 -> LBRACKET . express RBRACKET
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 130
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 104

    (51) assign1 -> empty .

    ASSIGN          reduce using rule 51 (assign1 -> empty .)


state 105

    (52) call -> era LPAREN . paramcall RPAREN SEMICOLON
    (54) paramcall -> . express paramcall1
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    paramcall                      shift and go to state 131
    express                        shift and go to state 132
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 106

    (57) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 133


state 107

    (58) cin1 -> cin2 .

    SEMICOLON       reduce using rule 58 (cin1 -> cin2 .)


state 108

    (59) cin1 -> cin3 .

    SEMICOLON       reduce using rule 59 (cin1 -> cin3 .)


state 109

    (60) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 134


state 110

    (61) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 135


state 111

    (64) cout -> COUT LPAREN . express cout1 RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 136
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 112

    (67) delay -> DELAY LPAREN . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 137
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 113

    (68) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 138
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 114

    (69) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 139
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 115

    (70) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 140
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 116

    (71) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 141
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 117

    (72) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 142
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 118

    (73) lights -> LIGHTS LPAREN . express COMMA express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 143
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 119

    (74) display -> DISPLAY LPAREN . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 144
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 120

    (75) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 121

    (76) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 146


state 122

    (77) while -> WHILE LPAREN . express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 147
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 123

    (79) return -> RETURN LPAREN . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 148
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 124

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad . block RCURLY
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    block                          shift and go to state 149
    statute                        shift and go to state 62
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 125

    (44) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 150


state 126

    (89) express -> express1 . relational express2
    (96) relational -> . exp relational1
    (97) relational -> . NOT
    (104) exp -> . term exp1
    (109) term -> . factor term1
    (114) factor -> . LPAREN express RPAREN
    (115) factor -> . constant
    (116) factor -> . call
    (84) constant -> . ID
    (85) constant -> . CTE_INT
    (86) constant -> . CTE_FLOAT
    (87) constant -> . CTE_CHAR
    (88) constant -> . CTE_BOOL
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (53) era -> . ID

    NOT             shift and go to state 153
    LPAREN          shift and go to state 156
    ID              shift and go to state 159
    CTE_INT         shift and go to state 160
    CTE_FLOAT       shift and go to state 161
    CTE_CHAR        shift and go to state 162
    CTE_BOOL        shift and go to state 163

    relational                     shift and go to state 151
    exp                            shift and go to state 152
    term                           shift and go to state 154
    factor                         shift and go to state 155
    constant                       shift and go to state 157
    call                           shift and go to state 158
    era                            shift and go to state 83

state 127

    (90) express1 -> NOTEQUALS .

    NOT             reduce using rule 90 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 90 (express1 -> NOTEQUALS .)
    ID              reduce using rule 90 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 90 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 90 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 90 (express1 -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 90 (express1 -> NOTEQUALS .)


state 128

    (91) express1 -> empty .

    NOT             reduce using rule 91 (express1 -> empty .)
    LPAREN          reduce using rule 91 (express1 -> empty .)
    ID              reduce using rule 91 (express1 -> empty .)
    CTE_INT         reduce using rule 91 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 91 (express1 -> empty .)
    CTE_CHAR        reduce using rule 91 (express1 -> empty .)
    CTE_BOOL        reduce using rule 91 (express1 -> empty .)


state 129

    (49) assign -> ID assign1 ASSIGN . express SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 164
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 130

    (50) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 165


state 131

    (52) call -> era LPAREN paramcall . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 132

    (54) paramcall -> express . paramcall1
    (55) paramcall1 -> . COMMA paramcall
    (56) paramcall1 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 117 (empty -> .)

    paramcall1                     shift and go to state 167
    empty                          shift and go to state 169

state 133

    (57) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    WHILE           reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 57 (cin -> CIN cin1 SEMICOLON .)


state 134

    (60) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 170


state 135

    (61) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 171


state 136

    (64) cout -> COUT LPAREN express . cout1 RPAREN SEMICOLON
    (65) cout1 -> . COMMA express cout1
    (66) cout1 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 117 (empty -> .)

    cout1                          shift and go to state 172
    empty                          shift and go to state 174

state 137

    (67) delay -> DELAY LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 175


state 138

    (68) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 176


state 139

    (69) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 177


state 140

    (70) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 178


state 141

    (71) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 179


state 142

    (72) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 180


state 143

    (73) lights -> LIGHTS LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 181


state 144

    (74) display -> DISPLAY LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 145

    (75) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 183


state 146

    (76) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 184


state 147

    (77) while -> WHILE LPAREN express . RPAREN while1 LCURLY block RCURLY SEMICOLON

    RPAREN          shift and go to state 185


state 148

    (79) return -> RETURN LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 186


state 149

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block . RCURLY

    RCURLY          shift and go to state 187


state 150

    (44) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 188


state 151

    (89) express -> express1 relational . express2
    (92) express2 -> . andor express
    (93) express2 -> . empty
    (94) andor -> . AND
    (95) andor -> . OR
    (117) empty -> .

    AND             shift and go to state 192
    OR              shift and go to state 193
    RPAREN          reduce using rule 117 (empty -> .)
    RBRACKET        reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    express2                       shift and go to state 189
    andor                          shift and go to state 190
    empty                          shift and go to state 191

state 152

    (96) relational -> exp . relational1
    (98) relational1 -> . compare exp
    (99) relational1 -> . empty
    (100) compare -> . LESSTHAN
    (101) compare -> . GREATERTHAN
    (102) compare -> . EQUALS
    (103) compare -> . NOTEQUALS
    (117) empty -> .

    LESSTHAN        shift and go to state 197
    GREATERTHAN     shift and go to state 198
    EQUALS          shift and go to state 199
    NOTEQUALS       shift and go to state 200
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    RPAREN          reduce using rule 117 (empty -> .)
    RBRACKET        reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    relational1                    shift and go to state 194
    compare                        shift and go to state 195
    empty                          shift and go to state 196

state 153

    (97) relational -> NOT .

    AND             reduce using rule 97 (relational -> NOT .)
    OR              reduce using rule 97 (relational -> NOT .)
    RPAREN          reduce using rule 97 (relational -> NOT .)
    RBRACKET        reduce using rule 97 (relational -> NOT .)
    COMMA           reduce using rule 97 (relational -> NOT .)
    SEMICOLON       reduce using rule 97 (relational -> NOT .)


state 154

    (104) exp -> term . exp1
    (105) exp1 -> . plusminus exp
    (106) exp1 -> . empty
    (107) plusminus -> . PLUS
    (108) plusminus -> . MINUS
    (117) empty -> .

    PLUS            shift and go to state 204
    MINUS           shift and go to state 205
    LESSTHAN        reduce using rule 117 (empty -> .)
    GREATERTHAN     reduce using rule 117 (empty -> .)
    EQUALS          reduce using rule 117 (empty -> .)
    NOTEQUALS       reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    RPAREN          reduce using rule 117 (empty -> .)
    RBRACKET        reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    exp1                           shift and go to state 201
    plusminus                      shift and go to state 202
    empty                          shift and go to state 203

state 155

    (109) term -> factor . term1
    (110) term1 -> . multidivi term
    (111) term1 -> . empty
    (112) multidivi -> . MULTI
    (113) multidivi -> . DIVI
    (117) empty -> .

    MULTI           shift and go to state 209
    DIVI            shift and go to state 210
    PLUS            reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    LESSTHAN        reduce using rule 117 (empty -> .)
    GREATERTHAN     reduce using rule 117 (empty -> .)
    EQUALS          reduce using rule 117 (empty -> .)
    NOTEQUALS       reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    RPAREN          reduce using rule 117 (empty -> .)
    RBRACKET        reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    term1                          shift and go to state 206
    multidivi                      shift and go to state 207
    empty                          shift and go to state 208

state 156

    (114) factor -> LPAREN . express RPAREN
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 211
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 157

    (115) factor -> constant .

    MULTI           reduce using rule 115 (factor -> constant .)
    DIVI            reduce using rule 115 (factor -> constant .)
    PLUS            reduce using rule 115 (factor -> constant .)
    MINUS           reduce using rule 115 (factor -> constant .)
    LESSTHAN        reduce using rule 115 (factor -> constant .)
    GREATERTHAN     reduce using rule 115 (factor -> constant .)
    EQUALS          reduce using rule 115 (factor -> constant .)
    NOTEQUALS       reduce using rule 115 (factor -> constant .)
    AND             reduce using rule 115 (factor -> constant .)
    OR              reduce using rule 115 (factor -> constant .)
    RPAREN          reduce using rule 115 (factor -> constant .)
    RBRACKET        reduce using rule 115 (factor -> constant .)
    COMMA           reduce using rule 115 (factor -> constant .)
    SEMICOLON       reduce using rule 115 (factor -> constant .)


state 158

    (116) factor -> call .

    MULTI           reduce using rule 116 (factor -> call .)
    DIVI            reduce using rule 116 (factor -> call .)
    PLUS            reduce using rule 116 (factor -> call .)
    MINUS           reduce using rule 116 (factor -> call .)
    LESSTHAN        reduce using rule 116 (factor -> call .)
    GREATERTHAN     reduce using rule 116 (factor -> call .)
    EQUALS          reduce using rule 116 (factor -> call .)
    NOTEQUALS       reduce using rule 116 (factor -> call .)
    AND             reduce using rule 116 (factor -> call .)
    OR              reduce using rule 116 (factor -> call .)
    RPAREN          reduce using rule 116 (factor -> call .)
    RBRACKET        reduce using rule 116 (factor -> call .)
    COMMA           reduce using rule 116 (factor -> call .)
    SEMICOLON       reduce using rule 116 (factor -> call .)


state 159

    (84) constant -> ID .
    (53) era -> ID .

    MULTI           reduce using rule 84 (constant -> ID .)
    DIVI            reduce using rule 84 (constant -> ID .)
    PLUS            reduce using rule 84 (constant -> ID .)
    MINUS           reduce using rule 84 (constant -> ID .)
    LESSTHAN        reduce using rule 84 (constant -> ID .)
    GREATERTHAN     reduce using rule 84 (constant -> ID .)
    EQUALS          reduce using rule 84 (constant -> ID .)
    NOTEQUALS       reduce using rule 84 (constant -> ID .)
    AND             reduce using rule 84 (constant -> ID .)
    OR              reduce using rule 84 (constant -> ID .)
    RPAREN          reduce using rule 84 (constant -> ID .)
    RBRACKET        reduce using rule 84 (constant -> ID .)
    COMMA           reduce using rule 84 (constant -> ID .)
    SEMICOLON       reduce using rule 84 (constant -> ID .)
    LPAREN          reduce using rule 53 (era -> ID .)


state 160

    (85) constant -> CTE_INT .

    MULTI           reduce using rule 85 (constant -> CTE_INT .)
    DIVI            reduce using rule 85 (constant -> CTE_INT .)
    PLUS            reduce using rule 85 (constant -> CTE_INT .)
    MINUS           reduce using rule 85 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 85 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 85 (constant -> CTE_INT .)
    EQUALS          reduce using rule 85 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 85 (constant -> CTE_INT .)
    AND             reduce using rule 85 (constant -> CTE_INT .)
    OR              reduce using rule 85 (constant -> CTE_INT .)
    RPAREN          reduce using rule 85 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 85 (constant -> CTE_INT .)
    COMMA           reduce using rule 85 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 85 (constant -> CTE_INT .)


state 161

    (86) constant -> CTE_FLOAT .

    MULTI           reduce using rule 86 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 86 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 86 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 86 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 86 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 86 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 86 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 86 (constant -> CTE_FLOAT .)
    AND             reduce using rule 86 (constant -> CTE_FLOAT .)
    OR              reduce using rule 86 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 86 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 86 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 86 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 86 (constant -> CTE_FLOAT .)


state 162

    (87) constant -> CTE_CHAR .

    MULTI           reduce using rule 87 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 87 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 87 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 87 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 87 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 87 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 87 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 87 (constant -> CTE_CHAR .)
    AND             reduce using rule 87 (constant -> CTE_CHAR .)
    OR              reduce using rule 87 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 87 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 87 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 87 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 87 (constant -> CTE_CHAR .)


state 163

    (88) constant -> CTE_BOOL .

    MULTI           reduce using rule 88 (constant -> CTE_BOOL .)
    DIVI            reduce using rule 88 (constant -> CTE_BOOL .)
    PLUS            reduce using rule 88 (constant -> CTE_BOOL .)
    MINUS           reduce using rule 88 (constant -> CTE_BOOL .)
    LESSTHAN        reduce using rule 88 (constant -> CTE_BOOL .)
    GREATERTHAN     reduce using rule 88 (constant -> CTE_BOOL .)
    EQUALS          reduce using rule 88 (constant -> CTE_BOOL .)
    NOTEQUALS       reduce using rule 88 (constant -> CTE_BOOL .)
    AND             reduce using rule 88 (constant -> CTE_BOOL .)
    OR              reduce using rule 88 (constant -> CTE_BOOL .)
    RPAREN          reduce using rule 88 (constant -> CTE_BOOL .)
    RBRACKET        reduce using rule 88 (constant -> CTE_BOOL .)
    COMMA           reduce using rule 88 (constant -> CTE_BOOL .)
    SEMICOLON       reduce using rule 88 (constant -> CTE_BOOL .)


state 164

    (49) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 212


state 165

    (50) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 50 (assign1 -> LBRACKET express RBRACKET .)


state 166

    (52) call -> era LPAREN paramcall RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 167

    (54) paramcall -> express paramcall1 .

    RPAREN          reduce using rule 54 (paramcall -> express paramcall1 .)


state 168

    (55) paramcall1 -> COMMA . paramcall
    (54) paramcall -> . express paramcall1
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    paramcall                      shift and go to state 214
    express                        shift and go to state 132
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 169

    (56) paramcall1 -> empty .

    RPAREN          reduce using rule 56 (paramcall1 -> empty .)


state 170

    (60) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 60 (cin2 -> LPAREN ID RPAREN .)


state 171

    (61) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 215


state 172

    (64) cout -> COUT LPAREN express cout1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 216


state 173

    (65) cout1 -> COMMA . express cout1
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 217
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 174

    (66) cout1 -> empty .

    RPAREN          reduce using rule 66 (cout1 -> empty .)


state 175

    (67) delay -> DELAY LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 218


state 176

    (68) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 219
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 177

    (69) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 220
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 178

    (70) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 221
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 179

    (71) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 222
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 180

    (72) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 181

    (73) lights -> LIGHTS LPAREN express COMMA . express RPAREN SEMICOLON
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 224
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 182

    (74) display -> DISPLAY LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 225


state 183

    (75) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 75 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 184

    (76) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 76 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 185

    (77) while -> WHILE LPAREN express RPAREN . while1 LCURLY block RCURLY SEMICOLON
    (78) while1 -> . empty
    (117) empty -> .

    LCURLY          reduce using rule 117 (empty -> .)

    while1                         shift and go to state 226
    empty                          shift and go to state 227

state 186

    (79) return -> RETURN LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 228


state 187

    (8) funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .

    FUNCDEF         reduce using rule 8 (funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .)
    MAIN            reduce using rule 8 (funcs -> FUNCDEF choosetype setscope LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .)


state 188

    (44) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (45) gotoif -> . empty
    (117) empty -> .

    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    gotoif                         shift and go to state 229
    empty                          shift and go to state 230

state 189

    (89) express -> express1 relational express2 .

    RPAREN          reduce using rule 89 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 89 (express -> express1 relational express2 .)
    COMMA           reduce using rule 89 (express -> express1 relational express2 .)
    SEMICOLON       reduce using rule 89 (express -> express1 relational express2 .)


state 190

    (92) express2 -> andor . express
    (89) express -> . express1 relational express2
    (90) express1 -> . NOTEQUALS
    (91) express1 -> . empty
    (117) empty -> .

    NOTEQUALS       shift and go to state 127
    NOT             reduce using rule 117 (empty -> .)
    LPAREN          reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CTE_INT         reduce using rule 117 (empty -> .)
    CTE_FLOAT       reduce using rule 117 (empty -> .)
    CTE_CHAR        reduce using rule 117 (empty -> .)
    CTE_BOOL        reduce using rule 117 (empty -> .)

    express                        shift and go to state 231
    express1                       shift and go to state 126
    empty                          shift and go to state 128

state 191

    (93) express2 -> empty .

    RPAREN          reduce using rule 93 (express2 -> empty .)
    RBRACKET        reduce using rule 93 (express2 -> empty .)
    COMMA           reduce using rule 93 (express2 -> empty .)
    SEMICOLON       reduce using rule 93 (express2 -> empty .)


state 192

    (94) andor -> AND .

    NOTEQUALS       reduce using rule 94 (andor -> AND .)
    NOT             reduce using rule 94 (andor -> AND .)
    LPAREN          reduce using rule 94 (andor -> AND .)
    ID              reduce using rule 94 (andor -> AND .)
    CTE_INT         reduce using rule 94 (andor -> AND .)
    CTE_FLOAT       reduce using rule 94 (andor -> AND .)
    CTE_CHAR        reduce using rule 94 (andor -> AND .)
    CTE_BOOL        reduce using rule 94 (andor -> AND .)


state 193

    (95) andor -> OR .

    NOTEQUALS       reduce using rule 95 (andor -> OR .)
    NOT             reduce using rule 95 (andor -> OR .)
    LPAREN          reduce using rule 95 (andor -> OR .)
    ID              reduce using rule 95 (andor -> OR .)
    CTE_INT         reduce using rule 95 (andor -> OR .)
    CTE_FLOAT       reduce using rule 95 (andor -> OR .)
    CTE_CHAR        reduce using rule 95 (andor -> OR .)
    CTE_BOOL        reduce using rule 95 (andor -> OR .)


state 194

    (96) relational -> exp relational1 .

    AND             reduce using rule 96 (relational -> exp relational1 .)
    OR              reduce using rule 96 (relational -> exp relational1 .)
    RPAREN          reduce using rule 96 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 96 (relational -> exp relational1 .)
    COMMA           reduce using rule 96 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 96 (relational -> exp relational1 .)


state 195

    (98) relational1 -> compare . exp
    (104) exp -> . term exp1
    (109) term -> . factor term1
    (114) factor -> . LPAREN express RPAREN
    (115) factor -> . constant
    (116) factor -> . call
    (84) constant -> . ID
    (85) constant -> . CTE_INT
    (86) constant -> . CTE_FLOAT
    (87) constant -> . CTE_CHAR
    (88) constant -> . CTE_BOOL
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (53) era -> . ID

    LPAREN          shift and go to state 156
    ID              shift and go to state 159
    CTE_INT         shift and go to state 160
    CTE_FLOAT       shift and go to state 161
    CTE_CHAR        shift and go to state 162
    CTE_BOOL        shift and go to state 163

    exp                            shift and go to state 232
    term                           shift and go to state 154
    factor                         shift and go to state 155
    constant                       shift and go to state 157
    call                           shift and go to state 158
    era                            shift and go to state 83

state 196

    (99) relational1 -> empty .

    AND             reduce using rule 99 (relational1 -> empty .)
    OR              reduce using rule 99 (relational1 -> empty .)
    RPAREN          reduce using rule 99 (relational1 -> empty .)
    RBRACKET        reduce using rule 99 (relational1 -> empty .)
    COMMA           reduce using rule 99 (relational1 -> empty .)
    SEMICOLON       reduce using rule 99 (relational1 -> empty .)


state 197

    (100) compare -> LESSTHAN .

    LPAREN          reduce using rule 100 (compare -> LESSTHAN .)
    ID              reduce using rule 100 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 100 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 100 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 100 (compare -> LESSTHAN .)
    CTE_BOOL        reduce using rule 100 (compare -> LESSTHAN .)


state 198

    (101) compare -> GREATERTHAN .

    LPAREN          reduce using rule 101 (compare -> GREATERTHAN .)
    ID              reduce using rule 101 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 101 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 101 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 101 (compare -> GREATERTHAN .)
    CTE_BOOL        reduce using rule 101 (compare -> GREATERTHAN .)


state 199

    (102) compare -> EQUALS .

    LPAREN          reduce using rule 102 (compare -> EQUALS .)
    ID              reduce using rule 102 (compare -> EQUALS .)
    CTE_INT         reduce using rule 102 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 102 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 102 (compare -> EQUALS .)
    CTE_BOOL        reduce using rule 102 (compare -> EQUALS .)


state 200

    (103) compare -> NOTEQUALS .

    LPAREN          reduce using rule 103 (compare -> NOTEQUALS .)
    ID              reduce using rule 103 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 103 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 103 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 103 (compare -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 103 (compare -> NOTEQUALS .)


state 201

    (104) exp -> term exp1 .

    LESSTHAN        reduce using rule 104 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 104 (exp -> term exp1 .)
    EQUALS          reduce using rule 104 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 104 (exp -> term exp1 .)
    AND             reduce using rule 104 (exp -> term exp1 .)
    OR              reduce using rule 104 (exp -> term exp1 .)
    RPAREN          reduce using rule 104 (exp -> term exp1 .)
    RBRACKET        reduce using rule 104 (exp -> term exp1 .)
    COMMA           reduce using rule 104 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 104 (exp -> term exp1 .)


state 202

    (105) exp1 -> plusminus . exp
    (104) exp -> . term exp1
    (109) term -> . factor term1
    (114) factor -> . LPAREN express RPAREN
    (115) factor -> . constant
    (116) factor -> . call
    (84) constant -> . ID
    (85) constant -> . CTE_INT
    (86) constant -> . CTE_FLOAT
    (87) constant -> . CTE_CHAR
    (88) constant -> . CTE_BOOL
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (53) era -> . ID

    LPAREN          shift and go to state 156
    ID              shift and go to state 159
    CTE_INT         shift and go to state 160
    CTE_FLOAT       shift and go to state 161
    CTE_CHAR        shift and go to state 162
    CTE_BOOL        shift and go to state 163

    exp                            shift and go to state 233
    term                           shift and go to state 154
    factor                         shift and go to state 155
    constant                       shift and go to state 157
    call                           shift and go to state 158
    era                            shift and go to state 83

state 203

    (106) exp1 -> empty .

    LESSTHAN        reduce using rule 106 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 106 (exp1 -> empty .)
    EQUALS          reduce using rule 106 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 106 (exp1 -> empty .)
    AND             reduce using rule 106 (exp1 -> empty .)
    OR              reduce using rule 106 (exp1 -> empty .)
    RPAREN          reduce using rule 106 (exp1 -> empty .)
    RBRACKET        reduce using rule 106 (exp1 -> empty .)
    COMMA           reduce using rule 106 (exp1 -> empty .)
    SEMICOLON       reduce using rule 106 (exp1 -> empty .)


state 204

    (107) plusminus -> PLUS .

    LPAREN          reduce using rule 107 (plusminus -> PLUS .)
    ID              reduce using rule 107 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 107 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 107 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 107 (plusminus -> PLUS .)
    CTE_BOOL        reduce using rule 107 (plusminus -> PLUS .)


state 205

    (108) plusminus -> MINUS .

    LPAREN          reduce using rule 108 (plusminus -> MINUS .)
    ID              reduce using rule 108 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 108 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 108 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 108 (plusminus -> MINUS .)
    CTE_BOOL        reduce using rule 108 (plusminus -> MINUS .)


state 206

    (109) term -> factor term1 .

    PLUS            reduce using rule 109 (term -> factor term1 .)
    MINUS           reduce using rule 109 (term -> factor term1 .)
    LESSTHAN        reduce using rule 109 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 109 (term -> factor term1 .)
    EQUALS          reduce using rule 109 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 109 (term -> factor term1 .)
    AND             reduce using rule 109 (term -> factor term1 .)
    OR              reduce using rule 109 (term -> factor term1 .)
    RPAREN          reduce using rule 109 (term -> factor term1 .)
    RBRACKET        reduce using rule 109 (term -> factor term1 .)
    COMMA           reduce using rule 109 (term -> factor term1 .)
    SEMICOLON       reduce using rule 109 (term -> factor term1 .)


state 207

    (110) term1 -> multidivi . term
    (109) term -> . factor term1
    (114) factor -> . LPAREN express RPAREN
    (115) factor -> . constant
    (116) factor -> . call
    (84) constant -> . ID
    (85) constant -> . CTE_INT
    (86) constant -> . CTE_FLOAT
    (87) constant -> . CTE_CHAR
    (88) constant -> . CTE_BOOL
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (53) era -> . ID

    LPAREN          shift and go to state 156
    ID              shift and go to state 159
    CTE_INT         shift and go to state 160
    CTE_FLOAT       shift and go to state 161
    CTE_CHAR        shift and go to state 162
    CTE_BOOL        shift and go to state 163

    term                           shift and go to state 234
    factor                         shift and go to state 155
    constant                       shift and go to state 157
    call                           shift and go to state 158
    era                            shift and go to state 83

state 208

    (111) term1 -> empty .

    PLUS            reduce using rule 111 (term1 -> empty .)
    MINUS           reduce using rule 111 (term1 -> empty .)
    LESSTHAN        reduce using rule 111 (term1 -> empty .)
    GREATERTHAN     reduce using rule 111 (term1 -> empty .)
    EQUALS          reduce using rule 111 (term1 -> empty .)
    NOTEQUALS       reduce using rule 111 (term1 -> empty .)
    AND             reduce using rule 111 (term1 -> empty .)
    OR              reduce using rule 111 (term1 -> empty .)
    RPAREN          reduce using rule 111 (term1 -> empty .)
    RBRACKET        reduce using rule 111 (term1 -> empty .)
    COMMA           reduce using rule 111 (term1 -> empty .)
    SEMICOLON       reduce using rule 111 (term1 -> empty .)


state 209

    (112) multidivi -> MULTI .

    LPAREN          reduce using rule 112 (multidivi -> MULTI .)
    ID              reduce using rule 112 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 112 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 112 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 112 (multidivi -> MULTI .)
    CTE_BOOL        reduce using rule 112 (multidivi -> MULTI .)


state 210

    (113) multidivi -> DIVI .

    LPAREN          reduce using rule 113 (multidivi -> DIVI .)
    ID              reduce using rule 113 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 113 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 113 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 113 (multidivi -> DIVI .)
    CTE_BOOL        reduce using rule 113 (multidivi -> DIVI .)


state 211

    (114) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 235


state 212

    (49) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    WHILE           reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 49 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 213

    (52) call -> era LPAREN paramcall RPAREN SEMICOLON .

    IF              reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    ID              reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    CIN             reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    COUT            reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DELAY           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    FORWARD         reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    SERVO           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    STOP            reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RETURN          reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RCURLY          reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    MULTI           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DIVI            reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    PLUS            reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    MINUS           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    LESSTHAN        reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    GREATERTHAN     reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    EQUALS          reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    NOTEQUALS       reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    AND             reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    OR              reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RPAREN          reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    COMMA           reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 52 (call -> era LPAREN paramcall RPAREN SEMICOLON .)


state 214

    (55) paramcall1 -> COMMA paramcall .

    RPAREN          reduce using rule 55 (paramcall1 -> COMMA paramcall .)


state 215

    (61) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (62) cin4 -> . COMMA ID cin4
    (63) cin4 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 237
    RPAREN          reduce using rule 117 (empty -> .)

    cin4                           shift and go to state 236
    empty                          shift and go to state 238

state 216

    (64) cout -> COUT LPAREN express cout1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 239


state 217

    (65) cout1 -> COMMA express . cout1
    (65) cout1 -> . COMMA express cout1
    (66) cout1 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 117 (empty -> .)

    cout1                          shift and go to state 240
    empty                          shift and go to state 174

state 218

    (67) delay -> DELAY LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (delay -> DELAY LPAREN express RPAREN SEMICOLON .)


state 219

    (68) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 241


state 220

    (69) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 242


state 221

    (70) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 243


state 222

    (71) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 244


state 223

    (72) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 72 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 224

    (73) lights -> LIGHTS LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 245


state 225

    (74) display -> DISPLAY LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 74 (display -> DISPLAY LPAREN express RPAREN SEMICOLON .)


state 226

    (77) while -> WHILE LPAREN express RPAREN while1 . LCURLY block RCURLY SEMICOLON

    LCURLY          shift and go to state 246


state 227

    (78) while1 -> empty .

    LCURLY          reduce using rule 78 (while1 -> empty .)


state 228

    (79) return -> RETURN LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 79 (return -> RETURN LPAREN express RPAREN SEMICOLON .)


state 229

    (44) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    block                          shift and go to state 247
    statute                        shift and go to state 62
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 230

    (45) gotoif -> empty .

    IF              reduce using rule 45 (gotoif -> empty .)
    ID              reduce using rule 45 (gotoif -> empty .)
    CIN             reduce using rule 45 (gotoif -> empty .)
    COUT            reduce using rule 45 (gotoif -> empty .)
    DELAY           reduce using rule 45 (gotoif -> empty .)
    FORWARD         reduce using rule 45 (gotoif -> empty .)
    BACKWARD        reduce using rule 45 (gotoif -> empty .)
    TURNLEFT        reduce using rule 45 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 45 (gotoif -> empty .)
    SERVO           reduce using rule 45 (gotoif -> empty .)
    LIGHTS          reduce using rule 45 (gotoif -> empty .)
    DISPLAY         reduce using rule 45 (gotoif -> empty .)
    DISTANCE        reduce using rule 45 (gotoif -> empty .)
    STOP            reduce using rule 45 (gotoif -> empty .)
    WHILE           reduce using rule 45 (gotoif -> empty .)
    RETURN          reduce using rule 45 (gotoif -> empty .)
    RCURLY          reduce using rule 45 (gotoif -> empty .)


state 231

    (92) express2 -> andor express .

    RPAREN          reduce using rule 92 (express2 -> andor express .)
    RBRACKET        reduce using rule 92 (express2 -> andor express .)
    COMMA           reduce using rule 92 (express2 -> andor express .)
    SEMICOLON       reduce using rule 92 (express2 -> andor express .)


state 232

    (98) relational1 -> compare exp .

    AND             reduce using rule 98 (relational1 -> compare exp .)
    OR              reduce using rule 98 (relational1 -> compare exp .)
    RPAREN          reduce using rule 98 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 98 (relational1 -> compare exp .)
    COMMA           reduce using rule 98 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 98 (relational1 -> compare exp .)


state 233

    (105) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 105 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 105 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 105 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 105 (exp1 -> plusminus exp .)
    AND             reduce using rule 105 (exp1 -> plusminus exp .)
    OR              reduce using rule 105 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 105 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 105 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 105 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 105 (exp1 -> plusminus exp .)


state 234

    (110) term1 -> multidivi term .

    PLUS            reduce using rule 110 (term1 -> multidivi term .)
    MINUS           reduce using rule 110 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 110 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 110 (term1 -> multidivi term .)
    EQUALS          reduce using rule 110 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 110 (term1 -> multidivi term .)
    AND             reduce using rule 110 (term1 -> multidivi term .)
    OR              reduce using rule 110 (term1 -> multidivi term .)
    RPAREN          reduce using rule 110 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 110 (term1 -> multidivi term .)
    COMMA           reduce using rule 110 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 110 (term1 -> multidivi term .)


state 235

    (114) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 114 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 114 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 114 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 114 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 114 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 114 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 114 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 114 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 114 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 114 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 114 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 114 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 114 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 114 (factor -> LPAREN express RPAREN .)


state 236

    (61) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 248


state 237

    (62) cin4 -> COMMA . ID cin4

    ID              shift and go to state 249


state 238

    (63) cin4 -> empty .

    RPAREN          reduce using rule 63 (cin4 -> empty .)


state 239

    (64) cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .

    IF              reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    ID              reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (cout -> COUT LPAREN express cout1 RPAREN SEMICOLON .)


state 240

    (65) cout1 -> COMMA express cout1 .

    RPAREN          reduce using rule 65 (cout1 -> COMMA express cout1 .)


state 241

    (68) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 250


state 242

    (69) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 251


state 243

    (70) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 252


state 244

    (71) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 253


state 245

    (73) lights -> LIGHTS LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 254


state 246

    (77) while -> WHILE LPAREN express RPAREN while1 LCURLY . block RCURLY SEMICOLON
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    block                          shift and go to state 255
    statute                        shift and go to state 62
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 247

    (44) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 256


state 248

    (61) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 61 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 249

    (62) cin4 -> COMMA ID . cin4
    (62) cin4 -> . COMMA ID cin4
    (63) cin4 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 237
    RPAREN          reduce using rule 117 (empty -> .)

    cin4                           shift and go to state 257
    empty                          shift and go to state 238

state 250

    (68) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 251

    (69) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 252

    (70) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 253

    (71) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 71 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 254

    (73) lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 73 (lights -> LIGHTS LPAREN express COMMA express RPAREN SEMICOLON .)


state 255

    (77) while -> WHILE LPAREN express RPAREN while1 LCURLY block . RCURLY SEMICOLON

    RCURLY          shift and go to state 258


state 256

    (44) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (46) else -> . ELSE LCURLY gotoelse block RCURLY else
    (47) else -> . SEMICOLON

    ELSE            shift and go to state 260
    SEMICOLON       shift and go to state 261

    else                           shift and go to state 259

state 257

    (62) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 62 (cin4 -> COMMA ID cin4 .)


state 258

    (77) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY . SEMICOLON

    SEMICOLON       shift and go to state 262


state 259

    (44) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    IF              reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    ID              reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CIN             reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    COUT            reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DELAY           reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    FORWARD         reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    BACKWARD        reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNLEFT        reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNRIGHT       reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    SERVO           reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    LIGHTS          reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISPLAY         reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISTANCE        reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    STOP            reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    WHILE           reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RETURN          reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RCURLY          reduce using rule 44 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 260

    (46) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 263


state 261

    (47) else -> SEMICOLON .

    IF              reduce using rule 47 (else -> SEMICOLON .)
    ID              reduce using rule 47 (else -> SEMICOLON .)
    CIN             reduce using rule 47 (else -> SEMICOLON .)
    COUT            reduce using rule 47 (else -> SEMICOLON .)
    DELAY           reduce using rule 47 (else -> SEMICOLON .)
    FORWARD         reduce using rule 47 (else -> SEMICOLON .)
    BACKWARD        reduce using rule 47 (else -> SEMICOLON .)
    TURNLEFT        reduce using rule 47 (else -> SEMICOLON .)
    TURNRIGHT       reduce using rule 47 (else -> SEMICOLON .)
    SERVO           reduce using rule 47 (else -> SEMICOLON .)
    LIGHTS          reduce using rule 47 (else -> SEMICOLON .)
    DISPLAY         reduce using rule 47 (else -> SEMICOLON .)
    DISTANCE        reduce using rule 47 (else -> SEMICOLON .)
    STOP            reduce using rule 47 (else -> SEMICOLON .)
    WHILE           reduce using rule 47 (else -> SEMICOLON .)
    RETURN          reduce using rule 47 (else -> SEMICOLON .)
    RCURLY          reduce using rule 47 (else -> SEMICOLON .)


state 262

    (77) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .

    IF              reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    ID              reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    CIN             reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    COUT            reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DELAY           reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    FORWARD         reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    BACKWARD        reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNLEFT        reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNRIGHT       reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    SERVO           reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    LIGHTS          reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISPLAY         reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISTANCE        reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    STOP            reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    WHILE           reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RETURN          reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RCURLY          reduce using rule 77 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)


state 263

    (46) else -> ELSE LCURLY . gotoelse block RCURLY else
    (48) gotoelse -> . empty
    (117) empty -> .

    IF              reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    CIN             reduce using rule 117 (empty -> .)
    COUT            reduce using rule 117 (empty -> .)
    DELAY           reduce using rule 117 (empty -> .)
    FORWARD         reduce using rule 117 (empty -> .)
    BACKWARD        reduce using rule 117 (empty -> .)
    TURNLEFT        reduce using rule 117 (empty -> .)
    TURNRIGHT       reduce using rule 117 (empty -> .)
    SERVO           reduce using rule 117 (empty -> .)
    LIGHTS          reduce using rule 117 (empty -> .)
    DISPLAY         reduce using rule 117 (empty -> .)
    DISTANCE        reduce using rule 117 (empty -> .)
    STOP            reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    RCURLY          reduce using rule 117 (empty -> .)

    gotoelse                       shift and go to state 264
    empty                          shift and go to state 265

state 264

    (46) else -> ELSE LCURLY gotoelse . block RCURLY else
    (25) block -> . statute block
    (26) block -> . empty
    (27) statute -> . cond
    (28) statute -> . assign
    (29) statute -> . call
    (30) statute -> . cin
    (31) statute -> . cout
    (32) statute -> . delay
    (33) statute -> . forward
    (34) statute -> . backward
    (35) statute -> . turnleft
    (36) statute -> . turnright
    (37) statute -> . servo
    (38) statute -> . lights
    (39) statute -> . display
    (40) statute -> . distance
    (41) statute -> . stop
    (42) statute -> . while
    (43) statute -> . return
    (117) empty -> .
    (44) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (49) assign -> . ID assign1 ASSIGN express SEMICOLON
    (52) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (57) cin -> . CIN cin1 SEMICOLON
    (64) cout -> . COUT LPAREN express cout1 RPAREN SEMICOLON
    (67) delay -> . DELAY LPAREN express RPAREN SEMICOLON
    (68) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (69) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (70) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (71) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (72) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (73) lights -> . LIGHTS LPAREN express COMMA express RPAREN SEMICOLON
    (74) display -> . DISPLAY LPAREN express RPAREN SEMICOLON
    (75) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (76) stop -> . STOP LPAREN RPAREN SEMICOLON
    (77) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (79) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (53) era -> . ID

    RCURLY          reduce using rule 117 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 82
    CIN             shift and go to state 84
    COUT            shift and go to state 85
    DELAY           shift and go to state 86
    FORWARD         shift and go to state 87
    BACKWARD        shift and go to state 88
    TURNLEFT        shift and go to state 89
    TURNRIGHT       shift and go to state 90
    SERVO           shift and go to state 91
    LIGHTS          shift and go to state 92
    DISPLAY         shift and go to state 93
    DISTANCE        shift and go to state 94
    STOP            shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97

    block                          shift and go to state 266
    statute                        shift and go to state 62
    empty                          shift and go to state 63
    cond                           shift and go to state 64
    assign                         shift and go to state 65
    call                           shift and go to state 66
    cin                            shift and go to state 67
    cout                           shift and go to state 68
    delay                          shift and go to state 69
    forward                        shift and go to state 70
    backward                       shift and go to state 71
    turnleft                       shift and go to state 72
    turnright                      shift and go to state 73
    servo                          shift and go to state 74
    lights                         shift and go to state 75
    display                        shift and go to state 76
    distance                       shift and go to state 77
    stop                           shift and go to state 78
    while                          shift and go to state 79
    return                         shift and go to state 80
    era                            shift and go to state 83

state 265

    (48) gotoelse -> empty .

    IF              reduce using rule 48 (gotoelse -> empty .)
    ID              reduce using rule 48 (gotoelse -> empty .)
    CIN             reduce using rule 48 (gotoelse -> empty .)
    COUT            reduce using rule 48 (gotoelse -> empty .)
    DELAY           reduce using rule 48 (gotoelse -> empty .)
    FORWARD         reduce using rule 48 (gotoelse -> empty .)
    BACKWARD        reduce using rule 48 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 48 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 48 (gotoelse -> empty .)
    SERVO           reduce using rule 48 (gotoelse -> empty .)
    LIGHTS          reduce using rule 48 (gotoelse -> empty .)
    DISPLAY         reduce using rule 48 (gotoelse -> empty .)
    DISTANCE        reduce using rule 48 (gotoelse -> empty .)
    STOP            reduce using rule 48 (gotoelse -> empty .)
    WHILE           reduce using rule 48 (gotoelse -> empty .)
    RETURN          reduce using rule 48 (gotoelse -> empty .)
    RCURLY          reduce using rule 48 (gotoelse -> empty .)


state 266

    (46) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 267


state 267

    (46) else -> ELSE LCURLY gotoelse block RCURLY . else
    (46) else -> . ELSE LCURLY gotoelse block RCURLY else
    (47) else -> . SEMICOLON

    ELSE            shift and go to state 260
    SEMICOLON       shift and go to state 261

    else                           shift and go to state 268

state 268

    (46) else -> ELSE LCURLY gotoelse block RCURLY else .

    IF              reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    ID              reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CIN             reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    COUT            reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DELAY           reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    FORWARD         reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    BACKWARD        reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNLEFT        reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNRIGHT       reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    SERVO           reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    LIGHTS          reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISPLAY         reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISTANCE        reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    STOP            reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    WHILE           reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RETURN          reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RCURLY          reduce using rule 46 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 42 resolved as shift
WARNING: shift/reduce conflict for INT in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 42 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 42 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 46 resolved as shift
WARNING: shift/reduce conflict for INT in state 46 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 46 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 47 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for INT in state 54 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 54 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 54 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 54 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 48
