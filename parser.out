Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON
Rule 2     gotomain -> empty
Rule 3     main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY
Rule 4     main1 -> empty
Rule 5     setmain -> empty
Rule 6     funcsblock -> funcs funcsblock
Rule 7     funcsblock -> empty
Rule 8     funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
Rule 9     funcs1 -> empty
Rule 10    setscope -> ID
Rule 11    varsblock -> vars varsblock
Rule 12    varsblock -> empty
Rule 13    vars -> VARDEF type ID dimvar SEMICOLON
Rule 14    dimvar -> LBRACKET express RBRACKET
Rule 15    dimvar -> empty
Rule 16    paramsblock -> params paramsblock
Rule 17    paramsblock -> COMMA params paramsblock
Rule 18    paramsblock -> empty
Rule 19    params -> type ID
Rule 20    params -> empty
Rule 21    block -> statute SEMICOLON block
Rule 22    block -> empty
Rule 23    statute -> cond
Rule 24    statute -> assign
Rule 25    statute -> call
Rule 26    statute -> cin
Rule 27    statute -> cout
Rule 28    statute -> delay
Rule 29    statute -> forward
Rule 30    statute -> backward
Rule 31    statute -> turnleft
Rule 32    statute -> turnright
Rule 33    statute -> servo
Rule 34    statute -> lights
Rule 35    statute -> distance
Rule 36    statute -> stop
Rule 37    statute -> while
Rule 38    statute -> return
Rule 39    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 40    gotoif -> empty
Rule 41    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 42    else -> empty
Rule 43    gotoelse -> empty
Rule 44    assign -> ID punto array ASSIGN express
Rule 45    call -> era LPAREN insertfloor paramcall RPAREN endfloor
Rule 46    era -> ID
Rule 47    paramcall -> express paramcall1
Rule 48    paramcall -> empty
Rule 49    paramcall1 -> COMMA paramcall
Rule 50    paramcall1 -> empty
Rule 51    cin -> CIN cin1
Rule 52    cin1 -> cin2
Rule 53    cin1 -> cin3
Rule 54    cin2 -> LPAREN ID RPAREN
Rule 55    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 56    cin4 -> COMMA ID cin4
Rule 57    cin4 -> empty
Rule 58    cout -> COUT LPAREN express cout1 RPAREN
Rule 59    cout1 -> COMMA express cout1
Rule 60    cout1 -> empty
Rule 61    delay -> DELAY LPAREN express RPAREN
Rule 62    forward -> FORWARD LPAREN express RPAREN
Rule 63    backward -> BACKWARD LPAREN express RPAREN
Rule 64    turnleft -> TURNLEFT LPAREN express RPAREN
Rule 65    turnright -> TURNRIGHT LPAREN express RPAREN
Rule 66    servo -> SERVO LPAREN express RPAREN
Rule 67    lights -> LIGHTS LPAREN express COMMA express RPAREN
Rule 68    distance -> DISTANCE LPAREN RPAREN
Rule 69    stop -> STOP LPAREN RPAREN
Rule 70    while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
Rule 71    while1 -> empty
Rule 72    return -> RETURN LPAREN express RPAREN
Rule 73    len -> LEN LPAREN ID RPAREN
Rule 74    type -> INT
Rule 75    type -> FLOAT
Rule 76    type -> BOOL
Rule 77    type -> CHAR
Rule 78    type -> VOID
Rule 79    constant -> ID punto array
Rule 80    constant -> CTE_INT
Rule 81    constant -> CTE_FLOAT
Rule 82    constant -> CTE_CHAR
Rule 83    constant -> CTE_BOOL
Rule 84    array -> LBRACKET insertfloor express RBRACKET endfloor
Rule 85    array -> empty
Rule 86    punto -> empty
Rule 87    express -> relational express1
Rule 88    express1 -> andor express
Rule 89    express1 -> empty
Rule 90    andor -> AND
Rule 91    andor -> OR
Rule 92    relational -> exp relational1
Rule 93    relational -> NOT
Rule 94    relational1 -> compare exp
Rule 95    relational1 -> empty
Rule 96    compare -> LESSTHAN
Rule 97    compare -> GREATERTHAN
Rule 98    compare -> EQUALS
Rule 99    compare -> NOTEQUALS
Rule 100   exp -> term exp1
Rule 101   exp1 -> plusminus exp
Rule 102   exp1 -> empty
Rule 103   plusminus -> PLUS
Rule 104   plusminus -> MINUS
Rule 105   term -> factor term1
Rule 106   term1 -> multidivi term
Rule 107   term1 -> empty
Rule 108   multidivi -> MULTI
Rule 109   multidivi -> DIVI
Rule 110   factor -> LPAREN insertfloor express RPAREN endfloor
Rule 111   factor -> constant
Rule 112   factor -> call
Rule 113   factor -> len
Rule 114   insertfloor -> empty
Rule 115   endfloor -> empty
Rule 116   empty -> <empty>

Terminals, with rules where they appear

AND                  : 90
ASSIGN               : 44
BACKWARD             : 63
BOOL                 : 76
CHAR                 : 77
CIN                  : 51
COMMA                : 17 49 56 59 67
COUT                 : 58
CTE_BOOL             : 83
CTE_CHAR             : 82
CTE_FLOAT            : 81
CTE_INT              : 55 80
DELAY                : 61
DISTANCE             : 68
DIVI                 : 109
ELSE                 : 41
EQUALS               : 98
FIN                  : 1
FLOAT                : 75
FORWARD              : 62
FUNCDEF              : 8
GREATERTHAN          : 97
ID                   : 10 13 19 44 46 54 56 73 79
IF                   : 39
INT                  : 74
LBRACKET             : 14 55 84
LCURLY               : 3 8 39 41 70
LEN                  : 73
LESSTHAN             : 96
LIGHTS               : 67
LPAREN               : 3 8 39 45 54 55 58 61 62 63 64 65 66 67 68 69 70 72 73 110
MAIN                 : 3
MINUS                : 104
MULTI                : 108
NOT                  : 93
NOTEQUALS            : 99
OR                   : 91
PLUS                 : 103
PROGRAM              : 1
RBRACKET             : 14 55 84
RCURLY               : 3 8 39 41 70
RETURN               : 72
RPAREN               : 3 8 39 45 54 55 58 61 62 63 64 65 66 67 68 69 70 72 73 110
SEMICOLON            : 1 13 21
SERVO                : 66
STOP                 : 69
TURNLEFT             : 64
TURNRIGHT            : 65
VARDEF               : 13
VOID                 : 78
WHILE                : 70
error                : 

Nonterminals, with rules where they appear

andor                : 88
array                : 44 79
assign               : 24
backward             : 30
block                : 3 8 21 39 41 70
call                 : 25 112
cin                  : 26
cin1                 : 51
cin2                 : 52
cin3                 : 53
cin4                 : 55 56
compare              : 94
cond                 : 23
constant             : 111
cout                 : 27
cout1                : 58 59
delay                : 28
dimvar               : 13
distance             : 35
else                 : 39 41
empty                : 2 4 5 7 9 12 15 18 20 22 40 42 43 48 50 57 60 71 85 86 89 95 102 107 114 115
endfloor             : 45 84 110
era                  : 45
exp                  : 92 94 101
exp1                 : 100
express              : 14 39 44 47 58 59 61 62 63 64 65 66 67 67 70 72 84 88 110
express1             : 87
factor               : 105
forward              : 29
funcs                : 6
funcs1               : 8
funcsblock           : 1 6
gotoelse             : 41
gotoif               : 39
gotomain             : 1
insertfloor          : 45 84 110
len                  : 113
lights               : 34
main                 : 1
main1                : 3
multidivi            : 106
paramcall            : 45 49
paramcall1           : 47
params               : 16 17
paramsblock          : 8 16 17
plusminus            : 101
program              : 0
punto                : 44 79
relational           : 87
relational1          : 92
return               : 38
servo                : 33
setmain              : 3
setscope             : 8
statute              : 21
stop                 : 36
term                 : 100 106
term1                : 105
turnleft             : 31
turnright            : 32
type                 : 8 13 19
vars                 : 11
varsblock            : 1 3 8 11
while                : 37
while1               : 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain varsblock funcsblock main FIN SEMICOLON
    (2) gotomain -> . empty
    (116) empty -> .

    VARDEF          reduce using rule 116 (empty -> .)
    FUNCDEF         reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)

    gotomain                       shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM gotomain . varsblock funcsblock main FIN SEMICOLON
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID dimvar SEMICOLON
    (116) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)

    varsblock                      shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 4

    (2) gotomain -> empty .

    VARDEF          reduce using rule 2 (gotomain -> empty .)
    FUNCDEF         reduce using rule 2 (gotomain -> empty .)
    MAIN            reduce using rule 2 (gotomain -> empty .)


state 5

    (1) program -> PROGRAM gotomain varsblock . funcsblock main FIN SEMICOLON
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (116) empty -> .

    FUNCDEF         shift and go to state 12
    MAIN            reduce using rule 116 (empty -> .)

    funcsblock                     shift and go to state 9
    funcs                          shift and go to state 10
    empty                          shift and go to state 11

state 6

    (11) varsblock -> vars . varsblock
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID dimvar SEMICOLON
    (116) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    vars                           shift and go to state 6
    varsblock                      shift and go to state 13
    empty                          shift and go to state 7

state 7

    (12) varsblock -> empty .

    FUNCDEF         reduce using rule 12 (varsblock -> empty .)
    MAIN            reduce using rule 12 (varsblock -> empty .)
    IF              reduce using rule 12 (varsblock -> empty .)
    ID              reduce using rule 12 (varsblock -> empty .)
    CIN             reduce using rule 12 (varsblock -> empty .)
    COUT            reduce using rule 12 (varsblock -> empty .)
    DELAY           reduce using rule 12 (varsblock -> empty .)
    FORWARD         reduce using rule 12 (varsblock -> empty .)
    BACKWARD        reduce using rule 12 (varsblock -> empty .)
    TURNLEFT        reduce using rule 12 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 12 (varsblock -> empty .)
    SERVO           reduce using rule 12 (varsblock -> empty .)
    LIGHTS          reduce using rule 12 (varsblock -> empty .)
    DISTANCE        reduce using rule 12 (varsblock -> empty .)
    STOP            reduce using rule 12 (varsblock -> empty .)
    WHILE           reduce using rule 12 (varsblock -> empty .)
    RETURN          reduce using rule 12 (varsblock -> empty .)
    RCURLY          reduce using rule 12 (varsblock -> empty .)


state 8

    (13) vars -> VARDEF . type ID dimvar SEMICOLON
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

    type                           shift and go to state 14

state 9

    (1) program -> PROGRAM gotomain varsblock funcsblock . main FIN SEMICOLON
    (3) main -> . MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 10

    (6) funcsblock -> funcs . funcsblock
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (116) empty -> .

    FUNCDEF         shift and go to state 12
    MAIN            reduce using rule 116 (empty -> .)

    funcs                          shift and go to state 10
    funcsblock                     shift and go to state 22
    empty                          shift and go to state 11

state 11

    (7) funcsblock -> empty .

    MAIN            reduce using rule 7 (funcsblock -> empty .)


state 12

    (8) funcs -> FUNCDEF . type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

    type                           shift and go to state 23

state 13

    (11) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 11 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 11 (varsblock -> vars varsblock .)
    IF              reduce using rule 11 (varsblock -> vars varsblock .)
    ID              reduce using rule 11 (varsblock -> vars varsblock .)
    CIN             reduce using rule 11 (varsblock -> vars varsblock .)
    COUT            reduce using rule 11 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 11 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 11 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 11 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 11 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 11 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 11 (varsblock -> vars varsblock .)
    STOP            reduce using rule 11 (varsblock -> vars varsblock .)
    WHILE           reduce using rule 11 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 11 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 11 (varsblock -> vars varsblock .)


state 14

    (13) vars -> VARDEF type . ID dimvar SEMICOLON

    ID              shift and go to state 24


state 15

    (74) type -> INT .

    ID              reduce using rule 74 (type -> INT .)


state 16

    (75) type -> FLOAT .

    ID              reduce using rule 75 (type -> FLOAT .)


state 17

    (76) type -> BOOL .

    ID              reduce using rule 76 (type -> BOOL .)


state 18

    (77) type -> CHAR .

    ID              reduce using rule 77 (type -> CHAR .)


state 19

    (78) type -> VOID .

    ID              reduce using rule 78 (type -> VOID .)


state 20

    (1) program -> PROGRAM gotomain varsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 25


state 21

    (3) main -> MAIN . setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY
    (5) setmain -> . empty
    (116) empty -> .

    LPAREN          reduce using rule 116 (empty -> .)

    setmain                        shift and go to state 26
    empty                          shift and go to state 27

state 22

    (6) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 6 (funcsblock -> funcs funcsblock .)


state 23

    (8) funcs -> FUNCDEF type . setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (10) setscope -> . ID

    ID              shift and go to state 29

    setscope                       shift and go to state 28

state 24

    (13) vars -> VARDEF type ID . dimvar SEMICOLON
    (14) dimvar -> . LBRACKET express RBRACKET
    (15) dimvar -> . empty
    (116) empty -> .

    LBRACKET        shift and go to state 31
    SEMICOLON       reduce using rule 116 (empty -> .)

    dimvar                         shift and go to state 30
    empty                          shift and go to state 32

state 25

    (1) program -> PROGRAM gotomain varsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 33


state 26

    (3) main -> MAIN setmain . LPAREN RPAREN LCURLY varsblock main1 block RCURLY

    LPAREN          shift and go to state 34


state 27

    (5) setmain -> empty .

    LPAREN          reduce using rule 5 (setmain -> empty .)


state 28

    (8) funcs -> FUNCDEF type setscope . LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY

    LPAREN          shift and go to state 35


state 29

    (10) setscope -> ID .

    LPAREN          reduce using rule 10 (setscope -> ID .)


state 30

    (13) vars -> VARDEF type ID dimvar . SEMICOLON

    SEMICOLON       shift and go to state 36


state 31

    (14) dimvar -> LBRACKET . express RBRACKET
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 37
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 32

    (15) dimvar -> empty .

    SEMICOLON       reduce using rule 15 (dimvar -> empty .)


state 33

    (1) program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON .)


state 34

    (3) main -> MAIN setmain LPAREN . RPAREN LCURLY varsblock main1 block RCURLY

    RPAREN          shift and go to state 54


state 35

    (8) funcs -> FUNCDEF type setscope LPAREN . paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (116) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 58
    RPAREN          reduce using rule 116 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! BOOL            [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]

    type                           shift and go to state 55
    paramsblock                    shift and go to state 56
    params                         shift and go to state 57
    empty                          shift and go to state 59

state 36

    (13) vars -> VARDEF type ID dimvar SEMICOLON .

    VARDEF          reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    FUNCDEF         reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    MAIN            reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    IF              reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    ID              reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    CIN             reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    COUT            reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    DELAY           reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    FORWARD         reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    BACKWARD        reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    TURNLEFT        reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    TURNRIGHT       reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    SERVO           reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    LIGHTS          reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    DISTANCE        reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    STOP            reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    WHILE           reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    RETURN          reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)
    RCURLY          reduce using rule 13 (vars -> VARDEF type ID dimvar SEMICOLON .)


state 37

    (14) dimvar -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 60


state 38

    (87) express -> relational . express1
    (88) express1 -> . andor express
    (89) express1 -> . empty
    (90) andor -> . AND
    (91) andor -> . OR
    (116) empty -> .

    AND             shift and go to state 64
    OR              shift and go to state 65
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    express1                       shift and go to state 61
    andor                          shift and go to state 62
    empty                          shift and go to state 63

state 39

    (92) relational -> exp . relational1
    (94) relational1 -> . compare exp
    (95) relational1 -> . empty
    (96) compare -> . LESSTHAN
    (97) compare -> . GREATERTHAN
    (98) compare -> . EQUALS
    (99) compare -> . NOTEQUALS
    (116) empty -> .

    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    EQUALS          shift and go to state 71
    NOTEQUALS       shift and go to state 72
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    relational1                    shift and go to state 66
    compare                        shift and go to state 67
    empty                          shift and go to state 68

state 40

    (93) relational -> NOT .

    AND             reduce using rule 93 (relational -> NOT .)
    OR              reduce using rule 93 (relational -> NOT .)
    RBRACKET        reduce using rule 93 (relational -> NOT .)
    RPAREN          reduce using rule 93 (relational -> NOT .)
    COMMA           reduce using rule 93 (relational -> NOT .)
    SEMICOLON       reduce using rule 93 (relational -> NOT .)


state 41

    (100) exp -> term . exp1
    (101) exp1 -> . plusminus exp
    (102) exp1 -> . empty
    (103) plusminus -> . PLUS
    (104) plusminus -> . MINUS
    (116) empty -> .

    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    exp1                           shift and go to state 73
    plusminus                      shift and go to state 74
    empty                          shift and go to state 75

state 42

    (105) term -> factor . term1
    (106) term1 -> . multidivi term
    (107) term1 -> . empty
    (108) multidivi -> . MULTI
    (109) multidivi -> . DIVI
    (116) empty -> .

    MULTI           shift and go to state 81
    DIVI            shift and go to state 82
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    term1                          shift and go to state 78
    multidivi                      shift and go to state 79
    empty                          shift and go to state 80

state 43

    (110) factor -> LPAREN . insertfloor express RPAREN endfloor
    (114) insertfloor -> . empty
    (116) empty -> .

    NOT             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CTE_INT         reduce using rule 116 (empty -> .)
    CTE_FLOAT       reduce using rule 116 (empty -> .)
    CTE_CHAR        reduce using rule 116 (empty -> .)
    CTE_BOOL        reduce using rule 116 (empty -> .)
    LEN             reduce using rule 116 (empty -> .)

    insertfloor                    shift and go to state 83
    empty                          shift and go to state 84

state 44

    (111) factor -> constant .

    MULTI           reduce using rule 111 (factor -> constant .)
    DIVI            reduce using rule 111 (factor -> constant .)
    PLUS            reduce using rule 111 (factor -> constant .)
    MINUS           reduce using rule 111 (factor -> constant .)
    LESSTHAN        reduce using rule 111 (factor -> constant .)
    GREATERTHAN     reduce using rule 111 (factor -> constant .)
    EQUALS          reduce using rule 111 (factor -> constant .)
    NOTEQUALS       reduce using rule 111 (factor -> constant .)
    AND             reduce using rule 111 (factor -> constant .)
    OR              reduce using rule 111 (factor -> constant .)
    RBRACKET        reduce using rule 111 (factor -> constant .)
    RPAREN          reduce using rule 111 (factor -> constant .)
    COMMA           reduce using rule 111 (factor -> constant .)
    SEMICOLON       reduce using rule 111 (factor -> constant .)


state 45

    (112) factor -> call .

    MULTI           reduce using rule 112 (factor -> call .)
    DIVI            reduce using rule 112 (factor -> call .)
    PLUS            reduce using rule 112 (factor -> call .)
    MINUS           reduce using rule 112 (factor -> call .)
    LESSTHAN        reduce using rule 112 (factor -> call .)
    GREATERTHAN     reduce using rule 112 (factor -> call .)
    EQUALS          reduce using rule 112 (factor -> call .)
    NOTEQUALS       reduce using rule 112 (factor -> call .)
    AND             reduce using rule 112 (factor -> call .)
    OR              reduce using rule 112 (factor -> call .)
    RBRACKET        reduce using rule 112 (factor -> call .)
    RPAREN          reduce using rule 112 (factor -> call .)
    COMMA           reduce using rule 112 (factor -> call .)
    SEMICOLON       reduce using rule 112 (factor -> call .)


state 46

    (113) factor -> len .

    MULTI           reduce using rule 113 (factor -> len .)
    DIVI            reduce using rule 113 (factor -> len .)
    PLUS            reduce using rule 113 (factor -> len .)
    MINUS           reduce using rule 113 (factor -> len .)
    LESSTHAN        reduce using rule 113 (factor -> len .)
    GREATERTHAN     reduce using rule 113 (factor -> len .)
    EQUALS          reduce using rule 113 (factor -> len .)
    NOTEQUALS       reduce using rule 113 (factor -> len .)
    AND             reduce using rule 113 (factor -> len .)
    OR              reduce using rule 113 (factor -> len .)
    RBRACKET        reduce using rule 113 (factor -> len .)
    RPAREN          reduce using rule 113 (factor -> len .)
    COMMA           reduce using rule 113 (factor -> len .)
    SEMICOLON       reduce using rule 113 (factor -> len .)


state 47

    (79) constant -> ID . punto array
    (46) era -> ID .
    (86) punto -> . empty
    (116) empty -> .

    LPAREN          reduce using rule 46 (era -> ID .)
    LBRACKET        reduce using rule 116 (empty -> .)
    MULTI           reduce using rule 116 (empty -> .)
    DIVI            reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    punto                          shift and go to state 85
    empty                          shift and go to state 86

state 48

    (80) constant -> CTE_INT .

    MULTI           reduce using rule 80 (constant -> CTE_INT .)
    DIVI            reduce using rule 80 (constant -> CTE_INT .)
    PLUS            reduce using rule 80 (constant -> CTE_INT .)
    MINUS           reduce using rule 80 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 80 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 80 (constant -> CTE_INT .)
    EQUALS          reduce using rule 80 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 80 (constant -> CTE_INT .)
    AND             reduce using rule 80 (constant -> CTE_INT .)
    OR              reduce using rule 80 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 80 (constant -> CTE_INT .)
    RPAREN          reduce using rule 80 (constant -> CTE_INT .)
    COMMA           reduce using rule 80 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 80 (constant -> CTE_INT .)


state 49

    (81) constant -> CTE_FLOAT .

    MULTI           reduce using rule 81 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 81 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 81 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 81 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 81 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 81 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 81 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 81 (constant -> CTE_FLOAT .)
    AND             reduce using rule 81 (constant -> CTE_FLOAT .)
    OR              reduce using rule 81 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 81 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 81 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 81 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 81 (constant -> CTE_FLOAT .)


state 50

    (82) constant -> CTE_CHAR .

    MULTI           reduce using rule 82 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 82 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 82 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 82 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 82 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 82 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 82 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 82 (constant -> CTE_CHAR .)
    AND             reduce using rule 82 (constant -> CTE_CHAR .)
    OR              reduce using rule 82 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 82 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 82 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 82 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 82 (constant -> CTE_CHAR .)


state 51

    (83) constant -> CTE_BOOL .

    MULTI           reduce using rule 83 (constant -> CTE_BOOL .)
    DIVI            reduce using rule 83 (constant -> CTE_BOOL .)
    PLUS            reduce using rule 83 (constant -> CTE_BOOL .)
    MINUS           reduce using rule 83 (constant -> CTE_BOOL .)
    LESSTHAN        reduce using rule 83 (constant -> CTE_BOOL .)
    GREATERTHAN     reduce using rule 83 (constant -> CTE_BOOL .)
    EQUALS          reduce using rule 83 (constant -> CTE_BOOL .)
    NOTEQUALS       reduce using rule 83 (constant -> CTE_BOOL .)
    AND             reduce using rule 83 (constant -> CTE_BOOL .)
    OR              reduce using rule 83 (constant -> CTE_BOOL .)
    RBRACKET        reduce using rule 83 (constant -> CTE_BOOL .)
    RPAREN          reduce using rule 83 (constant -> CTE_BOOL .)
    COMMA           reduce using rule 83 (constant -> CTE_BOOL .)
    SEMICOLON       reduce using rule 83 (constant -> CTE_BOOL .)


state 52

    (45) call -> era . LPAREN insertfloor paramcall RPAREN endfloor

    LPAREN          shift and go to state 87


state 53

    (73) len -> LEN . LPAREN ID RPAREN

    LPAREN          shift and go to state 88


state 54

    (3) main -> MAIN setmain LPAREN RPAREN . LCURLY varsblock main1 block RCURLY

    LCURLY          shift and go to state 89


state 55

    (19) params -> type . ID

    ID              shift and go to state 90


state 56

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock . RPAREN LCURLY varsblock funcs1 block RCURLY

    RPAREN          shift and go to state 91


state 57

    (16) paramsblock -> params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (116) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 58
    RPAREN          reduce using rule 116 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! BOOL            [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]

    params                         shift and go to state 57
    paramsblock                    shift and go to state 92
    empty                          shift and go to state 59
    type                           shift and go to state 55

state 58

    (17) paramsblock -> COMMA . params paramsblock
    (19) params -> . type ID
    (20) params -> . empty
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID
    (116) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    COMMA           reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)

  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! BOOL            [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]

    params                         shift and go to state 93
    type                           shift and go to state 55
    empty                          shift and go to state 94

state 59

    (18) paramsblock -> empty .
    (20) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 18 (paramsblock -> empty .)
    RPAREN          reduce using rule 18 (paramsblock -> empty .)
    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    VOID            reduce using rule 20 (params -> empty .)

  ! RPAREN          [ reduce using rule 20 (params -> empty .) ]


state 60

    (14) dimvar -> LBRACKET express RBRACKET .

    SEMICOLON       reduce using rule 14 (dimvar -> LBRACKET express RBRACKET .)


state 61

    (87) express -> relational express1 .

    RBRACKET        reduce using rule 87 (express -> relational express1 .)
    RPAREN          reduce using rule 87 (express -> relational express1 .)
    COMMA           reduce using rule 87 (express -> relational express1 .)
    SEMICOLON       reduce using rule 87 (express -> relational express1 .)


state 62

    (88) express1 -> andor . express
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 95
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 63

    (89) express1 -> empty .

    RBRACKET        reduce using rule 89 (express1 -> empty .)
    RPAREN          reduce using rule 89 (express1 -> empty .)
    COMMA           reduce using rule 89 (express1 -> empty .)
    SEMICOLON       reduce using rule 89 (express1 -> empty .)


state 64

    (90) andor -> AND .

    NOT             reduce using rule 90 (andor -> AND .)
    LPAREN          reduce using rule 90 (andor -> AND .)
    ID              reduce using rule 90 (andor -> AND .)
    CTE_INT         reduce using rule 90 (andor -> AND .)
    CTE_FLOAT       reduce using rule 90 (andor -> AND .)
    CTE_CHAR        reduce using rule 90 (andor -> AND .)
    CTE_BOOL        reduce using rule 90 (andor -> AND .)
    LEN             reduce using rule 90 (andor -> AND .)


state 65

    (91) andor -> OR .

    NOT             reduce using rule 91 (andor -> OR .)
    LPAREN          reduce using rule 91 (andor -> OR .)
    ID              reduce using rule 91 (andor -> OR .)
    CTE_INT         reduce using rule 91 (andor -> OR .)
    CTE_FLOAT       reduce using rule 91 (andor -> OR .)
    CTE_CHAR        reduce using rule 91 (andor -> OR .)
    CTE_BOOL        reduce using rule 91 (andor -> OR .)
    LEN             reduce using rule 91 (andor -> OR .)


state 66

    (92) relational -> exp relational1 .

    AND             reduce using rule 92 (relational -> exp relational1 .)
    OR              reduce using rule 92 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 92 (relational -> exp relational1 .)
    RPAREN          reduce using rule 92 (relational -> exp relational1 .)
    COMMA           reduce using rule 92 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 92 (relational -> exp relational1 .)


state 67

    (94) relational1 -> compare . exp
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    exp                            shift and go to state 96
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 68

    (95) relational1 -> empty .

    AND             reduce using rule 95 (relational1 -> empty .)
    OR              reduce using rule 95 (relational1 -> empty .)
    RBRACKET        reduce using rule 95 (relational1 -> empty .)
    RPAREN          reduce using rule 95 (relational1 -> empty .)
    COMMA           reduce using rule 95 (relational1 -> empty .)
    SEMICOLON       reduce using rule 95 (relational1 -> empty .)


state 69

    (96) compare -> LESSTHAN .

    LPAREN          reduce using rule 96 (compare -> LESSTHAN .)
    ID              reduce using rule 96 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 96 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 96 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 96 (compare -> LESSTHAN .)
    CTE_BOOL        reduce using rule 96 (compare -> LESSTHAN .)
    LEN             reduce using rule 96 (compare -> LESSTHAN .)


state 70

    (97) compare -> GREATERTHAN .

    LPAREN          reduce using rule 97 (compare -> GREATERTHAN .)
    ID              reduce using rule 97 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 97 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 97 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 97 (compare -> GREATERTHAN .)
    CTE_BOOL        reduce using rule 97 (compare -> GREATERTHAN .)
    LEN             reduce using rule 97 (compare -> GREATERTHAN .)


state 71

    (98) compare -> EQUALS .

    LPAREN          reduce using rule 98 (compare -> EQUALS .)
    ID              reduce using rule 98 (compare -> EQUALS .)
    CTE_INT         reduce using rule 98 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 98 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 98 (compare -> EQUALS .)
    CTE_BOOL        reduce using rule 98 (compare -> EQUALS .)
    LEN             reduce using rule 98 (compare -> EQUALS .)


state 72

    (99) compare -> NOTEQUALS .

    LPAREN          reduce using rule 99 (compare -> NOTEQUALS .)
    ID              reduce using rule 99 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 99 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 99 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 99 (compare -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 99 (compare -> NOTEQUALS .)
    LEN             reduce using rule 99 (compare -> NOTEQUALS .)


state 73

    (100) exp -> term exp1 .

    LESSTHAN        reduce using rule 100 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 100 (exp -> term exp1 .)
    EQUALS          reduce using rule 100 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 100 (exp -> term exp1 .)
    AND             reduce using rule 100 (exp -> term exp1 .)
    OR              reduce using rule 100 (exp -> term exp1 .)
    RBRACKET        reduce using rule 100 (exp -> term exp1 .)
    RPAREN          reduce using rule 100 (exp -> term exp1 .)
    COMMA           reduce using rule 100 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 100 (exp -> term exp1 .)


state 74

    (101) exp1 -> plusminus . exp
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    exp                            shift and go to state 97
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 75

    (102) exp1 -> empty .

    LESSTHAN        reduce using rule 102 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 102 (exp1 -> empty .)
    EQUALS          reduce using rule 102 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 102 (exp1 -> empty .)
    AND             reduce using rule 102 (exp1 -> empty .)
    OR              reduce using rule 102 (exp1 -> empty .)
    RBRACKET        reduce using rule 102 (exp1 -> empty .)
    RPAREN          reduce using rule 102 (exp1 -> empty .)
    COMMA           reduce using rule 102 (exp1 -> empty .)
    SEMICOLON       reduce using rule 102 (exp1 -> empty .)


state 76

    (103) plusminus -> PLUS .

    LPAREN          reduce using rule 103 (plusminus -> PLUS .)
    ID              reduce using rule 103 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 103 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 103 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 103 (plusminus -> PLUS .)
    CTE_BOOL        reduce using rule 103 (plusminus -> PLUS .)
    LEN             reduce using rule 103 (plusminus -> PLUS .)


state 77

    (104) plusminus -> MINUS .

    LPAREN          reduce using rule 104 (plusminus -> MINUS .)
    ID              reduce using rule 104 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 104 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 104 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 104 (plusminus -> MINUS .)
    CTE_BOOL        reduce using rule 104 (plusminus -> MINUS .)
    LEN             reduce using rule 104 (plusminus -> MINUS .)


state 78

    (105) term -> factor term1 .

    PLUS            reduce using rule 105 (term -> factor term1 .)
    MINUS           reduce using rule 105 (term -> factor term1 .)
    LESSTHAN        reduce using rule 105 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 105 (term -> factor term1 .)
    EQUALS          reduce using rule 105 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 105 (term -> factor term1 .)
    AND             reduce using rule 105 (term -> factor term1 .)
    OR              reduce using rule 105 (term -> factor term1 .)
    RBRACKET        reduce using rule 105 (term -> factor term1 .)
    RPAREN          reduce using rule 105 (term -> factor term1 .)
    COMMA           reduce using rule 105 (term -> factor term1 .)
    SEMICOLON       reduce using rule 105 (term -> factor term1 .)


state 79

    (106) term1 -> multidivi . term
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    term                           shift and go to state 98
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 80

    (107) term1 -> empty .

    PLUS            reduce using rule 107 (term1 -> empty .)
    MINUS           reduce using rule 107 (term1 -> empty .)
    LESSTHAN        reduce using rule 107 (term1 -> empty .)
    GREATERTHAN     reduce using rule 107 (term1 -> empty .)
    EQUALS          reduce using rule 107 (term1 -> empty .)
    NOTEQUALS       reduce using rule 107 (term1 -> empty .)
    AND             reduce using rule 107 (term1 -> empty .)
    OR              reduce using rule 107 (term1 -> empty .)
    RBRACKET        reduce using rule 107 (term1 -> empty .)
    RPAREN          reduce using rule 107 (term1 -> empty .)
    COMMA           reduce using rule 107 (term1 -> empty .)
    SEMICOLON       reduce using rule 107 (term1 -> empty .)


state 81

    (108) multidivi -> MULTI .

    LPAREN          reduce using rule 108 (multidivi -> MULTI .)
    ID              reduce using rule 108 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 108 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 108 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 108 (multidivi -> MULTI .)
    CTE_BOOL        reduce using rule 108 (multidivi -> MULTI .)
    LEN             reduce using rule 108 (multidivi -> MULTI .)


state 82

    (109) multidivi -> DIVI .

    LPAREN          reduce using rule 109 (multidivi -> DIVI .)
    ID              reduce using rule 109 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 109 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 109 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 109 (multidivi -> DIVI .)
    CTE_BOOL        reduce using rule 109 (multidivi -> DIVI .)
    LEN             reduce using rule 109 (multidivi -> DIVI .)


state 83

    (110) factor -> LPAREN insertfloor . express RPAREN endfloor
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 99
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 84

    (114) insertfloor -> empty .

    NOT             reduce using rule 114 (insertfloor -> empty .)
    LPAREN          reduce using rule 114 (insertfloor -> empty .)
    ID              reduce using rule 114 (insertfloor -> empty .)
    CTE_INT         reduce using rule 114 (insertfloor -> empty .)
    CTE_FLOAT       reduce using rule 114 (insertfloor -> empty .)
    CTE_CHAR        reduce using rule 114 (insertfloor -> empty .)
    CTE_BOOL        reduce using rule 114 (insertfloor -> empty .)
    LEN             reduce using rule 114 (insertfloor -> empty .)
    RPAREN          reduce using rule 114 (insertfloor -> empty .)


state 85

    (79) constant -> ID punto . array
    (84) array -> . LBRACKET insertfloor express RBRACKET endfloor
    (85) array -> . empty
    (116) empty -> .

    LBRACKET        shift and go to state 101
    MULTI           reduce using rule 116 (empty -> .)
    DIVI            reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    array                          shift and go to state 100
    empty                          shift and go to state 102

state 86

    (86) punto -> empty .

    LBRACKET        reduce using rule 86 (punto -> empty .)
    MULTI           reduce using rule 86 (punto -> empty .)
    DIVI            reduce using rule 86 (punto -> empty .)
    PLUS            reduce using rule 86 (punto -> empty .)
    MINUS           reduce using rule 86 (punto -> empty .)
    LESSTHAN        reduce using rule 86 (punto -> empty .)
    GREATERTHAN     reduce using rule 86 (punto -> empty .)
    EQUALS          reduce using rule 86 (punto -> empty .)
    NOTEQUALS       reduce using rule 86 (punto -> empty .)
    AND             reduce using rule 86 (punto -> empty .)
    OR              reduce using rule 86 (punto -> empty .)
    RBRACKET        reduce using rule 86 (punto -> empty .)
    RPAREN          reduce using rule 86 (punto -> empty .)
    COMMA           reduce using rule 86 (punto -> empty .)
    SEMICOLON       reduce using rule 86 (punto -> empty .)
    ASSIGN          reduce using rule 86 (punto -> empty .)


state 87

    (45) call -> era LPAREN . insertfloor paramcall RPAREN endfloor
    (114) insertfloor -> . empty
    (116) empty -> .

    NOT             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CTE_INT         reduce using rule 116 (empty -> .)
    CTE_FLOAT       reduce using rule 116 (empty -> .)
    CTE_CHAR        reduce using rule 116 (empty -> .)
    CTE_BOOL        reduce using rule 116 (empty -> .)
    LEN             reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)

    insertfloor                    shift and go to state 103
    empty                          shift and go to state 84

state 88

    (73) len -> LEN LPAREN . ID RPAREN

    ID              shift and go to state 104


state 89

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY . varsblock main1 block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID dimvar SEMICOLON
    (116) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    varsblock                      shift and go to state 105
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 90

    (19) params -> type ID .

    COMMA           reduce using rule 19 (params -> type ID .)
    INT             reduce using rule 19 (params -> type ID .)
    FLOAT           reduce using rule 19 (params -> type ID .)
    BOOL            reduce using rule 19 (params -> type ID .)
    CHAR            reduce using rule 19 (params -> type ID .)
    VOID            reduce using rule 19 (params -> type ID .)
    RPAREN          reduce using rule 19 (params -> type ID .)


state 91

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN . LCURLY varsblock funcs1 block RCURLY

    LCURLY          shift and go to state 106


state 92

    (16) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 16 (paramsblock -> params paramsblock .)


state 93

    (17) paramsblock -> COMMA params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (116) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 58
    RPAREN          reduce using rule 116 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! BOOL            [ reduce using rule 116 (empty -> .) ]
  ! CHAR            [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]

    params                         shift and go to state 57
    paramsblock                    shift and go to state 107
    empty                          shift and go to state 59
    type                           shift and go to state 55

state 94

    (20) params -> empty .

    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    VOID            reduce using rule 20 (params -> empty .)
    RPAREN          reduce using rule 20 (params -> empty .)


state 95

    (88) express1 -> andor express .

    RBRACKET        reduce using rule 88 (express1 -> andor express .)
    RPAREN          reduce using rule 88 (express1 -> andor express .)
    COMMA           reduce using rule 88 (express1 -> andor express .)
    SEMICOLON       reduce using rule 88 (express1 -> andor express .)


state 96

    (94) relational1 -> compare exp .

    AND             reduce using rule 94 (relational1 -> compare exp .)
    OR              reduce using rule 94 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 94 (relational1 -> compare exp .)
    RPAREN          reduce using rule 94 (relational1 -> compare exp .)
    COMMA           reduce using rule 94 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 94 (relational1 -> compare exp .)


state 97

    (101) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 101 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 101 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 101 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 101 (exp1 -> plusminus exp .)
    AND             reduce using rule 101 (exp1 -> plusminus exp .)
    OR              reduce using rule 101 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 101 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 101 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 101 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 101 (exp1 -> plusminus exp .)


state 98

    (106) term1 -> multidivi term .

    PLUS            reduce using rule 106 (term1 -> multidivi term .)
    MINUS           reduce using rule 106 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 106 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 106 (term1 -> multidivi term .)
    EQUALS          reduce using rule 106 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 106 (term1 -> multidivi term .)
    AND             reduce using rule 106 (term1 -> multidivi term .)
    OR              reduce using rule 106 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 106 (term1 -> multidivi term .)
    RPAREN          reduce using rule 106 (term1 -> multidivi term .)
    COMMA           reduce using rule 106 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 106 (term1 -> multidivi term .)


state 99

    (110) factor -> LPAREN insertfloor express . RPAREN endfloor

    RPAREN          shift and go to state 108


state 100

    (79) constant -> ID punto array .

    MULTI           reduce using rule 79 (constant -> ID punto array .)
    DIVI            reduce using rule 79 (constant -> ID punto array .)
    PLUS            reduce using rule 79 (constant -> ID punto array .)
    MINUS           reduce using rule 79 (constant -> ID punto array .)
    LESSTHAN        reduce using rule 79 (constant -> ID punto array .)
    GREATERTHAN     reduce using rule 79 (constant -> ID punto array .)
    EQUALS          reduce using rule 79 (constant -> ID punto array .)
    NOTEQUALS       reduce using rule 79 (constant -> ID punto array .)
    AND             reduce using rule 79 (constant -> ID punto array .)
    OR              reduce using rule 79 (constant -> ID punto array .)
    RBRACKET        reduce using rule 79 (constant -> ID punto array .)
    RPAREN          reduce using rule 79 (constant -> ID punto array .)
    COMMA           reduce using rule 79 (constant -> ID punto array .)
    SEMICOLON       reduce using rule 79 (constant -> ID punto array .)


state 101

    (84) array -> LBRACKET . insertfloor express RBRACKET endfloor
    (114) insertfloor -> . empty
    (116) empty -> .

    NOT             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CTE_INT         reduce using rule 116 (empty -> .)
    CTE_FLOAT       reduce using rule 116 (empty -> .)
    CTE_CHAR        reduce using rule 116 (empty -> .)
    CTE_BOOL        reduce using rule 116 (empty -> .)
    LEN             reduce using rule 116 (empty -> .)

    insertfloor                    shift and go to state 109
    empty                          shift and go to state 84

state 102

    (85) array -> empty .

    MULTI           reduce using rule 85 (array -> empty .)
    DIVI            reduce using rule 85 (array -> empty .)
    PLUS            reduce using rule 85 (array -> empty .)
    MINUS           reduce using rule 85 (array -> empty .)
    LESSTHAN        reduce using rule 85 (array -> empty .)
    GREATERTHAN     reduce using rule 85 (array -> empty .)
    EQUALS          reduce using rule 85 (array -> empty .)
    NOTEQUALS       reduce using rule 85 (array -> empty .)
    AND             reduce using rule 85 (array -> empty .)
    OR              reduce using rule 85 (array -> empty .)
    RBRACKET        reduce using rule 85 (array -> empty .)
    RPAREN          reduce using rule 85 (array -> empty .)
    COMMA           reduce using rule 85 (array -> empty .)
    SEMICOLON       reduce using rule 85 (array -> empty .)
    ASSIGN          reduce using rule 85 (array -> empty .)


state 103

    (45) call -> era LPAREN insertfloor . paramcall RPAREN endfloor
    (47) paramcall -> . express paramcall1
    (48) paramcall -> . empty
    (87) express -> . relational express1
    (116) empty -> .
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    RPAREN          reduce using rule 116 (empty -> .)
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    era                            shift and go to state 52
    paramcall                      shift and go to state 110
    express                        shift and go to state 111
    empty                          shift and go to state 112
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46

state 104

    (73) len -> LEN LPAREN ID . RPAREN

    RPAREN          shift and go to state 113


state 105

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock . main1 block RCURLY
    (4) main1 -> . empty
    (116) empty -> .

    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    main1                          shift and go to state 114
    empty                          shift and go to state 115

state 106

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY . varsblock funcs1 block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID dimvar SEMICOLON
    (116) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    varsblock                      shift and go to state 116
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 107

    (17) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 17 (paramsblock -> COMMA params paramsblock .)


state 108

    (110) factor -> LPAREN insertfloor express RPAREN . endfloor
    (115) endfloor -> . empty
    (116) empty -> .

    MULTI           reduce using rule 116 (empty -> .)
    DIVI            reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    endfloor                       shift and go to state 117
    empty                          shift and go to state 118

state 109

    (84) array -> LBRACKET insertfloor . express RBRACKET endfloor
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 119
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 110

    (45) call -> era LPAREN insertfloor paramcall . RPAREN endfloor

    RPAREN          shift and go to state 120


state 111

    (47) paramcall -> express . paramcall1
    (49) paramcall1 -> . COMMA paramcall
    (50) paramcall1 -> . empty
    (116) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 116 (empty -> .)

    paramcall1                     shift and go to state 121
    empty                          shift and go to state 123

state 112

    (48) paramcall -> empty .

    RPAREN          reduce using rule 48 (paramcall -> empty .)


state 113

    (73) len -> LEN LPAREN ID RPAREN .

    MULTI           reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    DIVI            reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    PLUS            reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    MINUS           reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    LESSTHAN        reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    GREATERTHAN     reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    EQUALS          reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    NOTEQUALS       reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    AND             reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    OR              reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    RPAREN          reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    COMMA           reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)
    SEMICOLON       reduce using rule 73 (len -> LEN LPAREN ID RPAREN .)


state 114

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    block                          shift and go to state 124
    statute                        shift and go to state 125
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 115

    (4) main1 -> empty .

    IF              reduce using rule 4 (main1 -> empty .)
    ID              reduce using rule 4 (main1 -> empty .)
    CIN             reduce using rule 4 (main1 -> empty .)
    COUT            reduce using rule 4 (main1 -> empty .)
    DELAY           reduce using rule 4 (main1 -> empty .)
    FORWARD         reduce using rule 4 (main1 -> empty .)
    BACKWARD        reduce using rule 4 (main1 -> empty .)
    TURNLEFT        reduce using rule 4 (main1 -> empty .)
    TURNRIGHT       reduce using rule 4 (main1 -> empty .)
    SERVO           reduce using rule 4 (main1 -> empty .)
    LIGHTS          reduce using rule 4 (main1 -> empty .)
    DISTANCE        reduce using rule 4 (main1 -> empty .)
    STOP            reduce using rule 4 (main1 -> empty .)
    WHILE           reduce using rule 4 (main1 -> empty .)
    RETURN          reduce using rule 4 (main1 -> empty .)
    RCURLY          reduce using rule 4 (main1 -> empty .)


state 116

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock . funcs1 block RCURLY
    (9) funcs1 -> . empty
    (116) empty -> .

    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    funcs1                         shift and go to state 158
    empty                          shift and go to state 159

state 117

    (110) factor -> LPAREN insertfloor express RPAREN endfloor .

    MULTI           reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    DIVI            reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    PLUS            reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    MINUS           reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    LESSTHAN        reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    GREATERTHAN     reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    EQUALS          reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    NOTEQUALS       reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    AND             reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    OR              reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    RBRACKET        reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    RPAREN          reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    COMMA           reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)
    SEMICOLON       reduce using rule 110 (factor -> LPAREN insertfloor express RPAREN endfloor .)


state 118

    (115) endfloor -> empty .

    MULTI           reduce using rule 115 (endfloor -> empty .)
    DIVI            reduce using rule 115 (endfloor -> empty .)
    PLUS            reduce using rule 115 (endfloor -> empty .)
    MINUS           reduce using rule 115 (endfloor -> empty .)
    LESSTHAN        reduce using rule 115 (endfloor -> empty .)
    GREATERTHAN     reduce using rule 115 (endfloor -> empty .)
    EQUALS          reduce using rule 115 (endfloor -> empty .)
    NOTEQUALS       reduce using rule 115 (endfloor -> empty .)
    AND             reduce using rule 115 (endfloor -> empty .)
    OR              reduce using rule 115 (endfloor -> empty .)
    RBRACKET        reduce using rule 115 (endfloor -> empty .)
    RPAREN          reduce using rule 115 (endfloor -> empty .)
    COMMA           reduce using rule 115 (endfloor -> empty .)
    SEMICOLON       reduce using rule 115 (endfloor -> empty .)
    ASSIGN          reduce using rule 115 (endfloor -> empty .)


state 119

    (84) array -> LBRACKET insertfloor express . RBRACKET endfloor

    RBRACKET        shift and go to state 160


state 120

    (45) call -> era LPAREN insertfloor paramcall RPAREN . endfloor
    (115) endfloor -> . empty
    (116) empty -> .

    MULTI           reduce using rule 116 (empty -> .)
    DIVI            reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    endfloor                       shift and go to state 161
    empty                          shift and go to state 118

state 121

    (47) paramcall -> express paramcall1 .

    RPAREN          reduce using rule 47 (paramcall -> express paramcall1 .)


state 122

    (49) paramcall1 -> COMMA . paramcall
    (47) paramcall -> . express paramcall1
    (48) paramcall -> . empty
    (87) express -> . relational express1
    (116) empty -> .
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    RPAREN          reduce using rule 116 (empty -> .)
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    paramcall                      shift and go to state 162
    express                        shift and go to state 111
    empty                          shift and go to state 112
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 123

    (50) paramcall1 -> empty .

    RPAREN          reduce using rule 50 (paramcall1 -> empty .)


state 124

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block . RCURLY

    RCURLY          shift and go to state 163


state 125

    (21) block -> statute . SEMICOLON block

    SEMICOLON       shift and go to state 164


state 126

    (22) block -> empty .

    RCURLY          reduce using rule 22 (block -> empty .)


state 127

    (23) statute -> cond .

    SEMICOLON       reduce using rule 23 (statute -> cond .)


state 128

    (24) statute -> assign .

    SEMICOLON       reduce using rule 24 (statute -> assign .)


state 129

    (25) statute -> call .

    SEMICOLON       reduce using rule 25 (statute -> call .)


state 130

    (26) statute -> cin .

    SEMICOLON       reduce using rule 26 (statute -> cin .)


state 131

    (27) statute -> cout .

    SEMICOLON       reduce using rule 27 (statute -> cout .)


state 132

    (28) statute -> delay .

    SEMICOLON       reduce using rule 28 (statute -> delay .)


state 133

    (29) statute -> forward .

    SEMICOLON       reduce using rule 29 (statute -> forward .)


state 134

    (30) statute -> backward .

    SEMICOLON       reduce using rule 30 (statute -> backward .)


state 135

    (31) statute -> turnleft .

    SEMICOLON       reduce using rule 31 (statute -> turnleft .)


state 136

    (32) statute -> turnright .

    SEMICOLON       reduce using rule 32 (statute -> turnright .)


state 137

    (33) statute -> servo .

    SEMICOLON       reduce using rule 33 (statute -> servo .)


state 138

    (34) statute -> lights .

    SEMICOLON       reduce using rule 34 (statute -> lights .)


state 139

    (35) statute -> distance .

    SEMICOLON       reduce using rule 35 (statute -> distance .)


state 140

    (36) statute -> stop .

    SEMICOLON       reduce using rule 36 (statute -> stop .)


state 141

    (37) statute -> while .

    SEMICOLON       reduce using rule 37 (statute -> while .)


state 142

    (38) statute -> return .

    SEMICOLON       reduce using rule 38 (statute -> return .)


state 143

    (39) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 165


state 144

    (44) assign -> ID . punto array ASSIGN express
    (46) era -> ID .
    (86) punto -> . empty
    (116) empty -> .

    LPAREN          reduce using rule 46 (era -> ID .)
    LBRACKET        reduce using rule 116 (empty -> .)
    ASSIGN          reduce using rule 116 (empty -> .)

    punto                          shift and go to state 166
    empty                          shift and go to state 86

state 145

    (51) cin -> CIN . cin1
    (52) cin1 -> . cin2
    (53) cin1 -> . cin3
    (54) cin2 -> . LPAREN ID RPAREN
    (55) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 170
    LBRACKET        shift and go to state 171

    cin1                           shift and go to state 167
    cin2                           shift and go to state 168
    cin3                           shift and go to state 169

state 146

    (58) cout -> COUT . LPAREN express cout1 RPAREN

    LPAREN          shift and go to state 172


state 147

    (61) delay -> DELAY . LPAREN express RPAREN

    LPAREN          shift and go to state 173


state 148

    (62) forward -> FORWARD . LPAREN express RPAREN

    LPAREN          shift and go to state 174


state 149

    (63) backward -> BACKWARD . LPAREN express RPAREN

    LPAREN          shift and go to state 175


state 150

    (64) turnleft -> TURNLEFT . LPAREN express RPAREN

    LPAREN          shift and go to state 176


state 151

    (65) turnright -> TURNRIGHT . LPAREN express RPAREN

    LPAREN          shift and go to state 177


state 152

    (66) servo -> SERVO . LPAREN express RPAREN

    LPAREN          shift and go to state 178


state 153

    (67) lights -> LIGHTS . LPAREN express COMMA express RPAREN

    LPAREN          shift and go to state 179


state 154

    (68) distance -> DISTANCE . LPAREN RPAREN

    LPAREN          shift and go to state 180


state 155

    (69) stop -> STOP . LPAREN RPAREN

    LPAREN          shift and go to state 181


state 156

    (70) while -> WHILE . LPAREN express RPAREN while1 LCURLY block RCURLY

    LPAREN          shift and go to state 182


state 157

    (72) return -> RETURN . LPAREN express RPAREN

    LPAREN          shift and go to state 183


state 158

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    block                          shift and go to state 184
    statute                        shift and go to state 125
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 159

    (9) funcs1 -> empty .

    IF              reduce using rule 9 (funcs1 -> empty .)
    ID              reduce using rule 9 (funcs1 -> empty .)
    CIN             reduce using rule 9 (funcs1 -> empty .)
    COUT            reduce using rule 9 (funcs1 -> empty .)
    DELAY           reduce using rule 9 (funcs1 -> empty .)
    FORWARD         reduce using rule 9 (funcs1 -> empty .)
    BACKWARD        reduce using rule 9 (funcs1 -> empty .)
    TURNLEFT        reduce using rule 9 (funcs1 -> empty .)
    TURNRIGHT       reduce using rule 9 (funcs1 -> empty .)
    SERVO           reduce using rule 9 (funcs1 -> empty .)
    LIGHTS          reduce using rule 9 (funcs1 -> empty .)
    DISTANCE        reduce using rule 9 (funcs1 -> empty .)
    STOP            reduce using rule 9 (funcs1 -> empty .)
    WHILE           reduce using rule 9 (funcs1 -> empty .)
    RETURN          reduce using rule 9 (funcs1 -> empty .)
    RCURLY          reduce using rule 9 (funcs1 -> empty .)


state 160

    (84) array -> LBRACKET insertfloor express RBRACKET . endfloor
    (115) endfloor -> . empty
    (116) empty -> .

    MULTI           reduce using rule 116 (empty -> .)
    DIVI            reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    LESSTHAN        reduce using rule 116 (empty -> .)
    GREATERTHAN     reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOTEQUALS       reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    RBRACKET        reduce using rule 116 (empty -> .)
    RPAREN          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    ASSIGN          reduce using rule 116 (empty -> .)

    endfloor                       shift and go to state 185
    empty                          shift and go to state 118

state 161

    (45) call -> era LPAREN insertfloor paramcall RPAREN endfloor .

    MULTI           reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    DIVI            reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    PLUS            reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    MINUS           reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    LESSTHAN        reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    GREATERTHAN     reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    EQUALS          reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    NOTEQUALS       reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    AND             reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    OR              reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    RBRACKET        reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    RPAREN          reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    COMMA           reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)
    SEMICOLON       reduce using rule 45 (call -> era LPAREN insertfloor paramcall RPAREN endfloor .)


state 162

    (49) paramcall1 -> COMMA paramcall .

    RPAREN          reduce using rule 49 (paramcall1 -> COMMA paramcall .)


state 163

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY .

    FIN             reduce using rule 3 (main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY .)


state 164

    (21) block -> statute SEMICOLON . block
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    statute                        shift and go to state 125
    block                          shift and go to state 186
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 165

    (39) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 187
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 166

    (44) assign -> ID punto . array ASSIGN express
    (84) array -> . LBRACKET insertfloor express RBRACKET endfloor
    (85) array -> . empty
    (116) empty -> .

    LBRACKET        shift and go to state 101
    ASSIGN          reduce using rule 116 (empty -> .)

    array                          shift and go to state 188
    empty                          shift and go to state 102

state 167

    (51) cin -> CIN cin1 .

    SEMICOLON       reduce using rule 51 (cin -> CIN cin1 .)


state 168

    (52) cin1 -> cin2 .

    SEMICOLON       reduce using rule 52 (cin1 -> cin2 .)


state 169

    (53) cin1 -> cin3 .

    SEMICOLON       reduce using rule 53 (cin1 -> cin3 .)


state 170

    (54) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 189


state 171

    (55) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 190


state 172

    (58) cout -> COUT LPAREN . express cout1 RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 191
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 173

    (61) delay -> DELAY LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 192
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 174

    (62) forward -> FORWARD LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 193
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 175

    (63) backward -> BACKWARD LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 194
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 176

    (64) turnleft -> TURNLEFT LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 195
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 177

    (65) turnright -> TURNRIGHT LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 196
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 178

    (66) servo -> SERVO LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 197
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 179

    (67) lights -> LIGHTS LPAREN . express COMMA express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 198
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 180

    (68) distance -> DISTANCE LPAREN . RPAREN

    RPAREN          shift and go to state 199


state 181

    (69) stop -> STOP LPAREN . RPAREN

    RPAREN          shift and go to state 200


state 182

    (70) while -> WHILE LPAREN . express RPAREN while1 LCURLY block RCURLY
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 201
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 183

    (72) return -> RETURN LPAREN . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 202
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 184

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block . RCURLY

    RCURLY          shift and go to state 203


state 185

    (84) array -> LBRACKET insertfloor express RBRACKET endfloor .

    MULTI           reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    DIVI            reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    PLUS            reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    MINUS           reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    LESSTHAN        reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    GREATERTHAN     reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    EQUALS          reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    NOTEQUALS       reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    AND             reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    OR              reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    RBRACKET        reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    RPAREN          reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    COMMA           reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    SEMICOLON       reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)
    ASSIGN          reduce using rule 84 (array -> LBRACKET insertfloor express RBRACKET endfloor .)


state 186

    (21) block -> statute SEMICOLON block .

    RCURLY          reduce using rule 21 (block -> statute SEMICOLON block .)


state 187

    (39) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 204


state 188

    (44) assign -> ID punto array . ASSIGN express

    ASSIGN          shift and go to state 205


state 189

    (54) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 206


state 190

    (55) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 207


state 191

    (58) cout -> COUT LPAREN express . cout1 RPAREN
    (59) cout1 -> . COMMA express cout1
    (60) cout1 -> . empty
    (116) empty -> .

    COMMA           shift and go to state 209
    RPAREN          reduce using rule 116 (empty -> .)

    cout1                          shift and go to state 208
    empty                          shift and go to state 210

state 192

    (61) delay -> DELAY LPAREN express . RPAREN

    RPAREN          shift and go to state 211


state 193

    (62) forward -> FORWARD LPAREN express . RPAREN

    RPAREN          shift and go to state 212


state 194

    (63) backward -> BACKWARD LPAREN express . RPAREN

    RPAREN          shift and go to state 213


state 195

    (64) turnleft -> TURNLEFT LPAREN express . RPAREN

    RPAREN          shift and go to state 214


state 196

    (65) turnright -> TURNRIGHT LPAREN express . RPAREN

    RPAREN          shift and go to state 215


state 197

    (66) servo -> SERVO LPAREN express . RPAREN

    RPAREN          shift and go to state 216


state 198

    (67) lights -> LIGHTS LPAREN express . COMMA express RPAREN

    COMMA           shift and go to state 217


state 199

    (68) distance -> DISTANCE LPAREN RPAREN .

    SEMICOLON       reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN .)


state 200

    (69) stop -> STOP LPAREN RPAREN .

    SEMICOLON       reduce using rule 69 (stop -> STOP LPAREN RPAREN .)


state 201

    (70) while -> WHILE LPAREN express . RPAREN while1 LCURLY block RCURLY

    RPAREN          shift and go to state 218


state 202

    (72) return -> RETURN LPAREN express . RPAREN

    RPAREN          shift and go to state 219


state 203

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .

    FUNCDEF         reduce using rule 8 (funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .)
    MAIN            reduce using rule 8 (funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .)


state 204

    (39) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 220


state 205

    (44) assign -> ID punto array ASSIGN . express
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 221
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 206

    (54) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 54 (cin2 -> LPAREN ID RPAREN .)


state 207

    (55) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 222


state 208

    (58) cout -> COUT LPAREN express cout1 . RPAREN

    RPAREN          shift and go to state 223


state 209

    (59) cout1 -> COMMA . express cout1
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 224
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 210

    (60) cout1 -> empty .

    RPAREN          reduce using rule 60 (cout1 -> empty .)


state 211

    (61) delay -> DELAY LPAREN express RPAREN .

    SEMICOLON       reduce using rule 61 (delay -> DELAY LPAREN express RPAREN .)


state 212

    (62) forward -> FORWARD LPAREN express RPAREN .

    SEMICOLON       reduce using rule 62 (forward -> FORWARD LPAREN express RPAREN .)


state 213

    (63) backward -> BACKWARD LPAREN express RPAREN .

    SEMICOLON       reduce using rule 63 (backward -> BACKWARD LPAREN express RPAREN .)


state 214

    (64) turnleft -> TURNLEFT LPAREN express RPAREN .

    SEMICOLON       reduce using rule 64 (turnleft -> TURNLEFT LPAREN express RPAREN .)


state 215

    (65) turnright -> TURNRIGHT LPAREN express RPAREN .

    SEMICOLON       reduce using rule 65 (turnright -> TURNRIGHT LPAREN express RPAREN .)


state 216

    (66) servo -> SERVO LPAREN express RPAREN .

    SEMICOLON       reduce using rule 66 (servo -> SERVO LPAREN express RPAREN .)


state 217

    (67) lights -> LIGHTS LPAREN express COMMA . express RPAREN
    (87) express -> . relational express1
    (92) relational -> . exp relational1
    (93) relational -> . NOT
    (100) exp -> . term exp1
    (105) term -> . factor term1
    (110) factor -> . LPAREN insertfloor express RPAREN endfloor
    (111) factor -> . constant
    (112) factor -> . call
    (113) factor -> . len
    (79) constant -> . ID punto array
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (73) len -> . LEN LPAREN ID RPAREN
    (46) era -> . ID

    NOT             shift and go to state 40
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    CTE_INT         shift and go to state 48
    CTE_FLOAT       shift and go to state 49
    CTE_CHAR        shift and go to state 50
    CTE_BOOL        shift and go to state 51
    LEN             shift and go to state 53

    express                        shift and go to state 225
    relational                     shift and go to state 38
    exp                            shift and go to state 39
    term                           shift and go to state 41
    factor                         shift and go to state 42
    constant                       shift and go to state 44
    call                           shift and go to state 45
    len                            shift and go to state 46
    era                            shift and go to state 52

state 218

    (70) while -> WHILE LPAREN express RPAREN . while1 LCURLY block RCURLY
    (71) while1 -> . empty
    (116) empty -> .

    LCURLY          reduce using rule 116 (empty -> .)

    while1                         shift and go to state 226
    empty                          shift and go to state 227

state 219

    (72) return -> RETURN LPAREN express RPAREN .

    SEMICOLON       reduce using rule 72 (return -> RETURN LPAREN express RPAREN .)


state 220

    (39) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (40) gotoif -> . empty
    (116) empty -> .

    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    gotoif                         shift and go to state 228
    empty                          shift and go to state 229

state 221

    (44) assign -> ID punto array ASSIGN express .

    SEMICOLON       reduce using rule 44 (assign -> ID punto array ASSIGN express .)


state 222

    (55) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (56) cin4 -> . COMMA ID cin4
    (57) cin4 -> . empty
    (116) empty -> .

    COMMA           shift and go to state 231
    RPAREN          reduce using rule 116 (empty -> .)

    cin4                           shift and go to state 230
    empty                          shift and go to state 232

state 223

    (58) cout -> COUT LPAREN express cout1 RPAREN .

    SEMICOLON       reduce using rule 58 (cout -> COUT LPAREN express cout1 RPAREN .)


state 224

    (59) cout1 -> COMMA express . cout1
    (59) cout1 -> . COMMA express cout1
    (60) cout1 -> . empty
    (116) empty -> .

    COMMA           shift and go to state 209
    RPAREN          reduce using rule 116 (empty -> .)

    cout1                          shift and go to state 233
    empty                          shift and go to state 210

state 225

    (67) lights -> LIGHTS LPAREN express COMMA express . RPAREN

    RPAREN          shift and go to state 234


state 226

    (70) while -> WHILE LPAREN express RPAREN while1 . LCURLY block RCURLY

    LCURLY          shift and go to state 235


state 227

    (71) while1 -> empty .

    LCURLY          reduce using rule 71 (while1 -> empty .)


state 228

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    block                          shift and go to state 236
    statute                        shift and go to state 125
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 229

    (40) gotoif -> empty .

    IF              reduce using rule 40 (gotoif -> empty .)
    ID              reduce using rule 40 (gotoif -> empty .)
    CIN             reduce using rule 40 (gotoif -> empty .)
    COUT            reduce using rule 40 (gotoif -> empty .)
    DELAY           reduce using rule 40 (gotoif -> empty .)
    FORWARD         reduce using rule 40 (gotoif -> empty .)
    BACKWARD        reduce using rule 40 (gotoif -> empty .)
    TURNLEFT        reduce using rule 40 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 40 (gotoif -> empty .)
    SERVO           reduce using rule 40 (gotoif -> empty .)
    LIGHTS          reduce using rule 40 (gotoif -> empty .)
    DISTANCE        reduce using rule 40 (gotoif -> empty .)
    STOP            reduce using rule 40 (gotoif -> empty .)
    WHILE           reduce using rule 40 (gotoif -> empty .)
    RETURN          reduce using rule 40 (gotoif -> empty .)
    RCURLY          reduce using rule 40 (gotoif -> empty .)


state 230

    (55) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 237


state 231

    (56) cin4 -> COMMA . ID cin4

    ID              shift and go to state 238


state 232

    (57) cin4 -> empty .

    RPAREN          reduce using rule 57 (cin4 -> empty .)


state 233

    (59) cout1 -> COMMA express cout1 .

    RPAREN          reduce using rule 59 (cout1 -> COMMA express cout1 .)


state 234

    (67) lights -> LIGHTS LPAREN express COMMA express RPAREN .

    SEMICOLON       reduce using rule 67 (lights -> LIGHTS LPAREN express COMMA express RPAREN .)


state 235

    (70) while -> WHILE LPAREN express RPAREN while1 LCURLY . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    block                          shift and go to state 239
    statute                        shift and go to state 125
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 236

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 240


state 237

    (55) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 55 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 238

    (56) cin4 -> COMMA ID . cin4
    (56) cin4 -> . COMMA ID cin4
    (57) cin4 -> . empty
    (116) empty -> .

    COMMA           shift and go to state 231
    RPAREN          reduce using rule 116 (empty -> .)

    cin4                           shift and go to state 241
    empty                          shift and go to state 232

state 239

    (70) while -> WHILE LPAREN express RPAREN while1 LCURLY block . RCURLY

    RCURLY          shift and go to state 242


state 240

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 244
    SEMICOLON       reduce using rule 116 (empty -> .)

    else                           shift and go to state 243
    empty                          shift and go to state 245

state 241

    (56) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 56 (cin4 -> COMMA ID cin4 .)


state 242

    (70) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY .

    SEMICOLON       reduce using rule 70 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY .)


state 243

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    SEMICOLON       reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 244

    (41) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 246


state 245

    (42) else -> empty .

    SEMICOLON       reduce using rule 42 (else -> empty .)


state 246

    (41) else -> ELSE LCURLY . gotoelse block RCURLY else
    (43) gotoelse -> . empty
    (116) empty -> .

    IF              reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CIN             reduce using rule 116 (empty -> .)
    COUT            reduce using rule 116 (empty -> .)
    DELAY           reduce using rule 116 (empty -> .)
    FORWARD         reduce using rule 116 (empty -> .)
    BACKWARD        reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    SERVO           reduce using rule 116 (empty -> .)
    LIGHTS          reduce using rule 116 (empty -> .)
    DISTANCE        reduce using rule 116 (empty -> .)
    STOP            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCURLY          reduce using rule 116 (empty -> .)

    gotoelse                       shift and go to state 247
    empty                          shift and go to state 248

state 247

    (41) else -> ELSE LCURLY gotoelse . block RCURLY else
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (116) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID punto array ASSIGN express
    (45) call -> . era LPAREN insertfloor paramcall RPAREN endfloor
    (51) cin -> . CIN cin1
    (58) cout -> . COUT LPAREN express cout1 RPAREN
    (61) delay -> . DELAY LPAREN express RPAREN
    (62) forward -> . FORWARD LPAREN express RPAREN
    (63) backward -> . BACKWARD LPAREN express RPAREN
    (64) turnleft -> . TURNLEFT LPAREN express RPAREN
    (65) turnright -> . TURNRIGHT LPAREN express RPAREN
    (66) servo -> . SERVO LPAREN express RPAREN
    (67) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (68) distance -> . DISTANCE LPAREN RPAREN
    (69) stop -> . STOP LPAREN RPAREN
    (70) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (72) return -> . RETURN LPAREN express RPAREN
    (46) era -> . ID

    RCURLY          reduce using rule 116 (empty -> .)
    IF              shift and go to state 143
    ID              shift and go to state 144
    CIN             shift and go to state 145
    COUT            shift and go to state 146
    DELAY           shift and go to state 147
    FORWARD         shift and go to state 148
    BACKWARD        shift and go to state 149
    TURNLEFT        shift and go to state 150
    TURNRIGHT       shift and go to state 151
    SERVO           shift and go to state 152
    LIGHTS          shift and go to state 153
    DISTANCE        shift and go to state 154
    STOP            shift and go to state 155
    WHILE           shift and go to state 156
    RETURN          shift and go to state 157

    block                          shift and go to state 249
    statute                        shift and go to state 125
    empty                          shift and go to state 126
    cond                           shift and go to state 127
    assign                         shift and go to state 128
    call                           shift and go to state 129
    cin                            shift and go to state 130
    cout                           shift and go to state 131
    delay                          shift and go to state 132
    forward                        shift and go to state 133
    backward                       shift and go to state 134
    turnleft                       shift and go to state 135
    turnright                      shift and go to state 136
    servo                          shift and go to state 137
    lights                         shift and go to state 138
    distance                       shift and go to state 139
    stop                           shift and go to state 140
    while                          shift and go to state 141
    return                         shift and go to state 142
    era                            shift and go to state 52

state 248

    (43) gotoelse -> empty .

    IF              reduce using rule 43 (gotoelse -> empty .)
    ID              reduce using rule 43 (gotoelse -> empty .)
    CIN             reduce using rule 43 (gotoelse -> empty .)
    COUT            reduce using rule 43 (gotoelse -> empty .)
    DELAY           reduce using rule 43 (gotoelse -> empty .)
    FORWARD         reduce using rule 43 (gotoelse -> empty .)
    BACKWARD        reduce using rule 43 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 43 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 43 (gotoelse -> empty .)
    SERVO           reduce using rule 43 (gotoelse -> empty .)
    LIGHTS          reduce using rule 43 (gotoelse -> empty .)
    DISTANCE        reduce using rule 43 (gotoelse -> empty .)
    STOP            reduce using rule 43 (gotoelse -> empty .)
    WHILE           reduce using rule 43 (gotoelse -> empty .)
    RETURN          reduce using rule 43 (gotoelse -> empty .)
    RCURLY          reduce using rule 43 (gotoelse -> empty .)


state 249

    (41) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 250


state 250

    (41) else -> ELSE LCURLY gotoelse block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 244
    SEMICOLON       reduce using rule 116 (empty -> .)

    else                           shift and go to state 251
    empty                          shift and go to state 245

state 251

    (41) else -> ELSE LCURLY gotoelse block RCURLY else .

    SEMICOLON       reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for INT in state 35 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 35 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 35 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 35 resolved as shift
WARNING: shift/reduce conflict for VOID in state 35 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 57 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 57 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 57 resolved as shift
WARNING: shift/reduce conflict for VOID in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 58 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 58 resolved as shift
WARNING: shift/reduce conflict for VOID in state 58 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 93 resolved as shift
WARNING: shift/reduce conflict for INT in state 93 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 93 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 93 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 93 resolved as shift
WARNING: shift/reduce conflict for VOID in state 93 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 59
