Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL
    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
Rule 2     gotomain -> empty
Rule 3     globalstartingquad -> empty
Rule 4     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 5     main2 -> varsblock startingquad block RCURLY
Rule 6     funcsblock -> funcs funcsblock
Rule 7     funcsblock -> empty
Rule 8     funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
Rule 9     globalvarsblock -> vars varsblock
Rule 10    globalvarsblock -> empty
Rule 11    varsblock -> vars varsblock
Rule 12    varsblock -> empty
Rule 13    startingquad -> empty
Rule 14    vars -> VARDEF type ID vars1 SEMICOLON
Rule 15    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 16    vars1 -> empty
Rule 17    choosetype -> type
Rule 18    choosetype -> VOID
Rule 19    paramsblock -> params paramsblock
Rule 20    paramsblock -> COMMA params paramsblock
Rule 21    paramsblock -> empty
Rule 22    params -> type ID
Rule 23    params -> empty
Rule 24    block -> statute block
Rule 25    block -> empty
Rule 26    statute -> cond
Rule 27    statute -> assign
Rule 28    statute -> call
Rule 29    statute -> cin
Rule 30    statute -> cout
Rule 31    statute -> delay
Rule 32    statute -> forward
Rule 33    statute -> backward
Rule 34    statute -> turnleft
Rule 35    statute -> turnright
Rule 36    statute -> servo
Rule 37    statute -> lights
Rule 38    statute -> display
Rule 39    statute -> distance
Rule 40    statute -> stop
Rule 41    statute -> while
Rule 42    statute -> return
Rule 43    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 44    gotoif -> empty
Rule 45    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 46    else -> SEMICOLON
Rule 47    gotoelse -> empty
Rule 48    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 49    assign1 -> LBRACKET express RBRACKET
Rule 50    assign1 -> empty
Rule 51    call -> era LPAREN paramcall RPAREN SEMICOLON
Rule 52    era -> ID
Rule 53    paramcall -> express paramcall1
Rule 54    paramcall1 -> COMMA paramcall
Rule 55    paramcall1 -> empty
Rule 56    cin -> CIN cin1 SEMICOLON
Rule 57    cin1 -> cin2
Rule 58    cin1 -> cin3
Rule 59    cin2 -> LPAREN ID RPAREN
Rule 60    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 61    cin4 -> COMMA ID cin4
Rule 62    cin4 -> empty
Rule 63    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 64    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 65    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 66    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 67    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 68    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 69    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 70    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 71    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 72    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 73    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 74    while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
Rule 75    while1 -> empty
Rule 76    return -> RETURN LPAREN express RPAREN SEMICOLON
Rule 77    type -> INT
Rule 78    type -> FLOAT
Rule 79    type -> BOOL
Rule 80    type -> CHAR
Rule 81    constant -> ID
Rule 82    constant -> CTE_INT
Rule 83    constant -> CTE_FLOAT
Rule 84    constant -> CTE_CHAR
Rule 85    constant -> CTE_BOOL
Rule 86    express -> express1 relational express2
Rule 87    express1 -> NOTEQUALS
Rule 88    express1 -> empty
Rule 89    express2 -> andor express
Rule 90    express2 -> empty
Rule 91    andor -> AND
Rule 92    andor -> OR
Rule 93    relational -> exp relational1
Rule 94    relational -> NOT
Rule 95    relational1 -> compare exp
Rule 96    relational1 -> empty
Rule 97    compare -> LESSTHAN
Rule 98    compare -> GREATERTHAN
Rule 99    compare -> EQUALS
Rule 100   compare -> NOTEQUALS
Rule 101   exp -> term exp1
Rule 102   exp1 -> plusminus exp
Rule 103   exp1 -> empty
Rule 104   plusminus -> PLUS
Rule 105   plusminus -> MINUS
Rule 106   term -> factor term1
Rule 107   term1 -> multidivi term
Rule 108   term1 -> empty
Rule 109   multidivi -> MULTI
Rule 110   multidivi -> DIVI
Rule 111   factor -> LPAREN express RPAREN
Rule 112   factor -> constant
Rule 113   empty -> <empty>

Terminals, with rules where they appear

AND                  : 91
ASSIGN               : 48
BACKWARD             : 66
BOOL                 : 79
CALL                 : 
CHAR                 : 80
CIN                  : 56
COMMA                : 20 54 61 65 66 67 68 70
COUT                 : 63
CTE_ARR              : 
CTE_BOOL             : 85
CTE_CHAR             : 71 84
CTE_FLOAT            : 83
CTE_INT              : 15 60 64 70 70 82
DELAY                : 64
DISPLAY              : 71
DISTANCE             : 72
DIVI                 : 110
ELSE                 : 45
EQUALS               : 99
FIN                  : 1
FLOAT                : 78
FORWARD              : 65
FUNCDEF              : 8
GREATERTHAN          : 98
ID                   : 8 14 22 48 52 59 61 81
IF                   : 43
INT                  : 77
LBRACKET             : 15 49 60
LCURLY               : 4 8 43 45 74
LESSTHAN             : 97
LIGHTS               : 70
LPAREN               : 4 8 43 51 59 60 63 64 65 66 67 68 69 70 71 72 73 74 76 111
MAIN                 : 4
MINUS                : 105
MULTI                : 109
NOT                  : 94
NOTEQUALS            : 87 100
OR                   : 92
PLUS                 : 104
PROGRAM              : 1
RBRACKET             : 15 49 60
RCURLY               : 5 8 43 45 74
RETURN               : 76
RPAREN               : 4 8 43 51 59 60 63 64 65 66 67 68 69 70 71 72 73 74 76 111
SEMICOLON            : 1 14 46 48 51 56 63 64 65 66 67 68 69 70 71 72 73 74 76
SERVO                : 69
STOP                 : 73
TURNLEFT             : 67
TURNRIGHT            : 68
VARDEF               : 14
VOID                 : 18
WHILE                : 74
error                : 

Nonterminals, with rules where they appear

andor                : 89
assign               : 27
assign1              : 48
backward             : 33
block                : 5 8 24 43 45 74
call                 : 28
choosetype           : 8
cin                  : 29
cin1                 : 56
cin2                 : 57
cin3                 : 58
cin4                 : 60 61
compare              : 95
cond                 : 26
constant             : 112
cout                 : 30
delay                : 31
display              : 38
distance             : 39
else                 : 43 45
empty                : 2 3 7 10 12 13 16 21 23 25 44 47 50 55 62 75 88 90 96 103 108
era                  : 51
exp                  : 93 95 102
exp1                 : 101
express              : 43 48 49 53 63 65 65 66 66 67 67 68 68 69 74 76 89 111
express1             : 86
express2             : 86
factor               : 106
forward              : 32
funcs                : 6
funcsblock           : 1 6
globalstartingquad   : 1
globalvarsblock      : 1
gotoelse             : 45
gotoif               : 43
gotomain             : 1
lights               : 37
main                 : 1
main2                : 4
multidivi            : 107
paramcall            : 51 54
paramcall1           : 53
params               : 19 20
paramsblock          : 8 19 20
plusminus            : 102
program              : 0
relational           : 86
relational1          : 93
return               : 42
servo                : 36
startingquad         : 5 8
statute              : 24
stop                 : 40
term                 : 101 107
term1                : 106
turnleft             : 34
turnright            : 35
type                 : 14 17 22
vars                 : 9 11
vars1                : 14
varsblock            : 5 8 9 11
while                : 41
while1               : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
    (2) gotomain -> . empty
    (113) empty -> .

    VARDEF          reduce using rule 113 (empty -> .)
    FUNCDEF         reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    gotomain                       shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM gotomain . globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON
    (9) globalvarsblock -> . vars varsblock
    (10) globalvarsblock -> . empty
    (14) vars -> . VARDEF type ID vars1 SEMICOLON
    (113) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    globalvarsblock                shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 4

    (2) gotomain -> empty .

    VARDEF          reduce using rule 2 (gotomain -> empty .)
    FUNCDEF         reduce using rule 2 (gotomain -> empty .)
    MAIN            reduce using rule 2 (gotomain -> empty .)


state 5

    (1) program -> PROGRAM gotomain globalvarsblock . globalstartingquad funcsblock main FIN SEMICOLON
    (3) globalstartingquad -> . empty
    (113) empty -> .

    FUNCDEF         reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    globalstartingquad             shift and go to state 9
    empty                          shift and go to state 10

state 6

    (9) globalvarsblock -> vars . varsblock
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (14) vars -> . VARDEF type ID vars1 SEMICOLON
    (113) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 12
    empty                          shift and go to state 13

state 7

    (10) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 10 (globalvarsblock -> empty .)
    MAIN            reduce using rule 10 (globalvarsblock -> empty .)


state 8

    (14) vars -> VARDEF . type ID vars1 SEMICOLON
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    type                           shift and go to state 14

state 9

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad . funcsblock main FIN SEMICOLON
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (113) empty -> .

    FUNCDEF         shift and go to state 22
    MAIN            reduce using rule 113 (empty -> .)

    funcsblock                     shift and go to state 19
    funcs                          shift and go to state 20
    empty                          shift and go to state 21

state 10

    (3) globalstartingquad -> empty .

    FUNCDEF         reduce using rule 3 (globalstartingquad -> empty .)
    MAIN            reduce using rule 3 (globalstartingquad -> empty .)


state 11

    (11) varsblock -> vars . varsblock
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (14) vars -> . VARDEF type ID vars1 SEMICOLON
    (113) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 23
    empty                          shift and go to state 13

state 12

    (9) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (globalvarsblock -> vars varsblock .)


state 13

    (12) varsblock -> empty .

    FUNCDEF         reduce using rule 12 (varsblock -> empty .)
    MAIN            reduce using rule 12 (varsblock -> empty .)
    IF              reduce using rule 12 (varsblock -> empty .)
    ID              reduce using rule 12 (varsblock -> empty .)
    CIN             reduce using rule 12 (varsblock -> empty .)
    COUT            reduce using rule 12 (varsblock -> empty .)
    DELAY           reduce using rule 12 (varsblock -> empty .)
    FORWARD         reduce using rule 12 (varsblock -> empty .)
    BACKWARD        reduce using rule 12 (varsblock -> empty .)
    TURNLEFT        reduce using rule 12 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 12 (varsblock -> empty .)
    SERVO           reduce using rule 12 (varsblock -> empty .)
    LIGHTS          reduce using rule 12 (varsblock -> empty .)
    DISPLAY         reduce using rule 12 (varsblock -> empty .)
    DISTANCE        reduce using rule 12 (varsblock -> empty .)
    STOP            reduce using rule 12 (varsblock -> empty .)
    WHILE           reduce using rule 12 (varsblock -> empty .)
    RETURN          reduce using rule 12 (varsblock -> empty .)
    RCURLY          reduce using rule 12 (varsblock -> empty .)


state 14

    (14) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 24


state 15

    (77) type -> INT .

    ID              reduce using rule 77 (type -> INT .)


state 16

    (78) type -> FLOAT .

    ID              reduce using rule 78 (type -> FLOAT .)


state 17

    (79) type -> BOOL .

    ID              reduce using rule 79 (type -> BOOL .)


state 18

    (80) type -> CHAR .

    ID              reduce using rule 80 (type -> CHAR .)


state 19

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock . main FIN SEMICOLON
    (4) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 26

    main                           shift and go to state 25

state 20

    (6) funcsblock -> funcs . funcsblock
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (113) empty -> .

    FUNCDEF         shift and go to state 22
    MAIN            reduce using rule 113 (empty -> .)

    funcs                          shift and go to state 20
    funcsblock                     shift and go to state 27
    empty                          shift and go to state 21

state 21

    (7) funcsblock -> empty .

    MAIN            reduce using rule 7 (funcsblock -> empty .)


state 22

    (8) funcs -> FUNCDEF . choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (17) choosetype -> . type
    (18) choosetype -> . VOID
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR

    VOID            shift and go to state 30
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

    choosetype                     shift and go to state 28
    type                           shift and go to state 29

state 23

    (11) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 11 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 11 (varsblock -> vars varsblock .)
    IF              reduce using rule 11 (varsblock -> vars varsblock .)
    ID              reduce using rule 11 (varsblock -> vars varsblock .)
    CIN             reduce using rule 11 (varsblock -> vars varsblock .)
    COUT            reduce using rule 11 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 11 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 11 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 11 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 11 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 11 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 11 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 11 (varsblock -> vars varsblock .)
    STOP            reduce using rule 11 (varsblock -> vars varsblock .)
    WHILE           reduce using rule 11 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 11 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 11 (varsblock -> vars varsblock .)


state 24

    (14) vars -> VARDEF type ID . vars1 SEMICOLON
    (15) vars1 -> . LBRACKET CTE_INT RBRACKET
    (16) vars1 -> . empty
    (113) empty -> .

    LBRACKET        shift and go to state 32
    SEMICOLON       reduce using rule 113 (empty -> .)

    vars1                          shift and go to state 31
    empty                          shift and go to state 33

state 25

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 34


state 26

    (4) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 35


state 27

    (6) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 6 (funcsblock -> funcs funcsblock .)


state 28

    (8) funcs -> FUNCDEF choosetype . ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY

    ID              shift and go to state 36


state 29

    (17) choosetype -> type .

    ID              reduce using rule 17 (choosetype -> type .)


state 30

    (18) choosetype -> VOID .

    ID              reduce using rule 18 (choosetype -> VOID .)


state 31

    (14) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 37


state 32

    (15) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 38


state 33

    (16) vars1 -> empty .

    SEMICOLON       reduce using rule 16 (vars1 -> empty .)


state 34

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 39


state 35

    (4) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 40


state 36

    (8) funcs -> FUNCDEF choosetype ID . LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY

    LPAREN          shift and go to state 41


state 37

    (14) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    WHILE           reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 14 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 38

    (15) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 42


state 39

    (1) program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM gotomain globalvarsblock globalstartingquad funcsblock main FIN SEMICOLON .)


state 40

    (4) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 43


state 41

    (8) funcs -> FUNCDEF choosetype ID LPAREN . paramsblock RPAREN LCURLY varsblock startingquad block RCURLY
    (19) paramsblock -> . params paramsblock
    (20) paramsblock -> . COMMA params paramsblock
    (21) paramsblock -> . empty
    (22) params -> . type ID
    (23) params -> . empty
    (113) empty -> .
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 46
    RPAREN          reduce using rule 113 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 113 (empty -> .) ]
  ! INT             [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! BOOL            [ reduce using rule 113 (empty -> .) ]
  ! CHAR            [ reduce using rule 113 (empty -> .) ]

    paramsblock                    shift and go to state 44
    params                         shift and go to state 45
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 42

    (15) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 15 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 43

    (4) main -> MAIN LPAREN RPAREN LCURLY . main2
    (5) main2 -> . varsblock startingquad block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (14) vars -> . VARDEF type ID vars1 SEMICOLON
    (113) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    main2                          shift and go to state 49
    varsblock                      shift and go to state 50
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 44

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock . RPAREN LCURLY varsblock startingquad block RCURLY

    RPAREN          shift and go to state 51


state 45

    (19) paramsblock -> params . paramsblock
    (19) paramsblock -> . params paramsblock
    (20) paramsblock -> . COMMA params paramsblock
    (21) paramsblock -> . empty
    (22) params -> . type ID
    (23) params -> . empty
    (113) empty -> .
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 46
    RPAREN          reduce using rule 113 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 113 (empty -> .) ]
  ! INT             [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! BOOL            [ reduce using rule 113 (empty -> .) ]
  ! CHAR            [ reduce using rule 113 (empty -> .) ]

    params                         shift and go to state 45
    paramsblock                    shift and go to state 52
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 46

    (20) paramsblock -> COMMA . params paramsblock
    (22) params -> . type ID
    (23) params -> . empty
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR
    (113) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    COMMA           reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)

  ! INT             [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! BOOL            [ reduce using rule 113 (empty -> .) ]
  ! CHAR            [ reduce using rule 113 (empty -> .) ]

    params                         shift and go to state 53
    type                           shift and go to state 48
    empty                          shift and go to state 54

state 47

    (21) paramsblock -> empty .
    (23) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 21 (paramsblock -> empty .)
    RPAREN          reduce using rule 21 (paramsblock -> empty .)
    COMMA           reduce using rule 23 (params -> empty .)
    INT             reduce using rule 23 (params -> empty .)
    FLOAT           reduce using rule 23 (params -> empty .)
    BOOL            reduce using rule 23 (params -> empty .)
    CHAR            reduce using rule 23 (params -> empty .)

  ! RPAREN          [ reduce using rule 23 (params -> empty .) ]


state 48

    (22) params -> type . ID

    ID              shift and go to state 55


state 49

    (4) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 4 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 50

    (5) main2 -> varsblock . startingquad block RCURLY
    (13) startingquad -> . empty
    (113) empty -> .

    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    startingquad                   shift and go to state 56
    empty                          shift and go to state 57

state 51

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN . LCURLY varsblock startingquad block RCURLY

    LCURLY          shift and go to state 58


state 52

    (19) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 19 (paramsblock -> params paramsblock .)


state 53

    (20) paramsblock -> COMMA params . paramsblock
    (19) paramsblock -> . params paramsblock
    (20) paramsblock -> . COMMA params paramsblock
    (21) paramsblock -> . empty
    (22) params -> . type ID
    (23) params -> . empty
    (113) empty -> .
    (77) type -> . INT
    (78) type -> . FLOAT
    (79) type -> . BOOL
    (80) type -> . CHAR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 46
    RPAREN          reduce using rule 113 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18

  ! COMMA           [ reduce using rule 113 (empty -> .) ]
  ! INT             [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! BOOL            [ reduce using rule 113 (empty -> .) ]
  ! CHAR            [ reduce using rule 113 (empty -> .) ]

    params                         shift and go to state 45
    paramsblock                    shift and go to state 59
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 54

    (23) params -> empty .

    COMMA           reduce using rule 23 (params -> empty .)
    INT             reduce using rule 23 (params -> empty .)
    FLOAT           reduce using rule 23 (params -> empty .)
    BOOL            reduce using rule 23 (params -> empty .)
    CHAR            reduce using rule 23 (params -> empty .)
    RPAREN          reduce using rule 23 (params -> empty .)


state 55

    (22) params -> type ID .

    COMMA           reduce using rule 22 (params -> type ID .)
    INT             reduce using rule 22 (params -> type ID .)
    FLOAT           reduce using rule 22 (params -> type ID .)
    BOOL            reduce using rule 22 (params -> type ID .)
    CHAR            reduce using rule 22 (params -> type ID .)
    RPAREN          reduce using rule 22 (params -> type ID .)


state 56

    (5) main2 -> varsblock startingquad . block RCURLY
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    block                          shift and go to state 60
    statute                        shift and go to state 61
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 57

    (13) startingquad -> empty .

    IF              reduce using rule 13 (startingquad -> empty .)
    ID              reduce using rule 13 (startingquad -> empty .)
    CIN             reduce using rule 13 (startingquad -> empty .)
    COUT            reduce using rule 13 (startingquad -> empty .)
    DELAY           reduce using rule 13 (startingquad -> empty .)
    FORWARD         reduce using rule 13 (startingquad -> empty .)
    BACKWARD        reduce using rule 13 (startingquad -> empty .)
    TURNLEFT        reduce using rule 13 (startingquad -> empty .)
    TURNRIGHT       reduce using rule 13 (startingquad -> empty .)
    SERVO           reduce using rule 13 (startingquad -> empty .)
    LIGHTS          reduce using rule 13 (startingquad -> empty .)
    DISPLAY         reduce using rule 13 (startingquad -> empty .)
    DISTANCE        reduce using rule 13 (startingquad -> empty .)
    STOP            reduce using rule 13 (startingquad -> empty .)
    WHILE           reduce using rule 13 (startingquad -> empty .)
    RETURN          reduce using rule 13 (startingquad -> empty .)
    RCURLY          reduce using rule 13 (startingquad -> empty .)


state 58

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY . varsblock startingquad block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (14) vars -> . VARDEF type ID vars1 SEMICOLON
    (113) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    varsblock                      shift and go to state 97
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 59

    (20) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 20 (paramsblock -> COMMA params paramsblock .)


state 60

    (5) main2 -> varsblock startingquad block . RCURLY

    RCURLY          shift and go to state 98


state 61

    (24) block -> statute . block
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    statute                        shift and go to state 61
    block                          shift and go to state 99
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 62

    (25) block -> empty .

    RCURLY          reduce using rule 25 (block -> empty .)


state 63

    (26) statute -> cond .

    IF              reduce using rule 26 (statute -> cond .)
    ID              reduce using rule 26 (statute -> cond .)
    CIN             reduce using rule 26 (statute -> cond .)
    COUT            reduce using rule 26 (statute -> cond .)
    DELAY           reduce using rule 26 (statute -> cond .)
    FORWARD         reduce using rule 26 (statute -> cond .)
    BACKWARD        reduce using rule 26 (statute -> cond .)
    TURNLEFT        reduce using rule 26 (statute -> cond .)
    TURNRIGHT       reduce using rule 26 (statute -> cond .)
    SERVO           reduce using rule 26 (statute -> cond .)
    LIGHTS          reduce using rule 26 (statute -> cond .)
    DISPLAY         reduce using rule 26 (statute -> cond .)
    DISTANCE        reduce using rule 26 (statute -> cond .)
    STOP            reduce using rule 26 (statute -> cond .)
    WHILE           reduce using rule 26 (statute -> cond .)
    RETURN          reduce using rule 26 (statute -> cond .)
    RCURLY          reduce using rule 26 (statute -> cond .)


state 64

    (27) statute -> assign .

    IF              reduce using rule 27 (statute -> assign .)
    ID              reduce using rule 27 (statute -> assign .)
    CIN             reduce using rule 27 (statute -> assign .)
    COUT            reduce using rule 27 (statute -> assign .)
    DELAY           reduce using rule 27 (statute -> assign .)
    FORWARD         reduce using rule 27 (statute -> assign .)
    BACKWARD        reduce using rule 27 (statute -> assign .)
    TURNLEFT        reduce using rule 27 (statute -> assign .)
    TURNRIGHT       reduce using rule 27 (statute -> assign .)
    SERVO           reduce using rule 27 (statute -> assign .)
    LIGHTS          reduce using rule 27 (statute -> assign .)
    DISPLAY         reduce using rule 27 (statute -> assign .)
    DISTANCE        reduce using rule 27 (statute -> assign .)
    STOP            reduce using rule 27 (statute -> assign .)
    WHILE           reduce using rule 27 (statute -> assign .)
    RETURN          reduce using rule 27 (statute -> assign .)
    RCURLY          reduce using rule 27 (statute -> assign .)


state 65

    (28) statute -> call .

    IF              reduce using rule 28 (statute -> call .)
    ID              reduce using rule 28 (statute -> call .)
    CIN             reduce using rule 28 (statute -> call .)
    COUT            reduce using rule 28 (statute -> call .)
    DELAY           reduce using rule 28 (statute -> call .)
    FORWARD         reduce using rule 28 (statute -> call .)
    BACKWARD        reduce using rule 28 (statute -> call .)
    TURNLEFT        reduce using rule 28 (statute -> call .)
    TURNRIGHT       reduce using rule 28 (statute -> call .)
    SERVO           reduce using rule 28 (statute -> call .)
    LIGHTS          reduce using rule 28 (statute -> call .)
    DISPLAY         reduce using rule 28 (statute -> call .)
    DISTANCE        reduce using rule 28 (statute -> call .)
    STOP            reduce using rule 28 (statute -> call .)
    WHILE           reduce using rule 28 (statute -> call .)
    RETURN          reduce using rule 28 (statute -> call .)
    RCURLY          reduce using rule 28 (statute -> call .)


state 66

    (29) statute -> cin .

    IF              reduce using rule 29 (statute -> cin .)
    ID              reduce using rule 29 (statute -> cin .)
    CIN             reduce using rule 29 (statute -> cin .)
    COUT            reduce using rule 29 (statute -> cin .)
    DELAY           reduce using rule 29 (statute -> cin .)
    FORWARD         reduce using rule 29 (statute -> cin .)
    BACKWARD        reduce using rule 29 (statute -> cin .)
    TURNLEFT        reduce using rule 29 (statute -> cin .)
    TURNRIGHT       reduce using rule 29 (statute -> cin .)
    SERVO           reduce using rule 29 (statute -> cin .)
    LIGHTS          reduce using rule 29 (statute -> cin .)
    DISPLAY         reduce using rule 29 (statute -> cin .)
    DISTANCE        reduce using rule 29 (statute -> cin .)
    STOP            reduce using rule 29 (statute -> cin .)
    WHILE           reduce using rule 29 (statute -> cin .)
    RETURN          reduce using rule 29 (statute -> cin .)
    RCURLY          reduce using rule 29 (statute -> cin .)


state 67

    (30) statute -> cout .

    IF              reduce using rule 30 (statute -> cout .)
    ID              reduce using rule 30 (statute -> cout .)
    CIN             reduce using rule 30 (statute -> cout .)
    COUT            reduce using rule 30 (statute -> cout .)
    DELAY           reduce using rule 30 (statute -> cout .)
    FORWARD         reduce using rule 30 (statute -> cout .)
    BACKWARD        reduce using rule 30 (statute -> cout .)
    TURNLEFT        reduce using rule 30 (statute -> cout .)
    TURNRIGHT       reduce using rule 30 (statute -> cout .)
    SERVO           reduce using rule 30 (statute -> cout .)
    LIGHTS          reduce using rule 30 (statute -> cout .)
    DISPLAY         reduce using rule 30 (statute -> cout .)
    DISTANCE        reduce using rule 30 (statute -> cout .)
    STOP            reduce using rule 30 (statute -> cout .)
    WHILE           reduce using rule 30 (statute -> cout .)
    RETURN          reduce using rule 30 (statute -> cout .)
    RCURLY          reduce using rule 30 (statute -> cout .)


state 68

    (31) statute -> delay .

    IF              reduce using rule 31 (statute -> delay .)
    ID              reduce using rule 31 (statute -> delay .)
    CIN             reduce using rule 31 (statute -> delay .)
    COUT            reduce using rule 31 (statute -> delay .)
    DELAY           reduce using rule 31 (statute -> delay .)
    FORWARD         reduce using rule 31 (statute -> delay .)
    BACKWARD        reduce using rule 31 (statute -> delay .)
    TURNLEFT        reduce using rule 31 (statute -> delay .)
    TURNRIGHT       reduce using rule 31 (statute -> delay .)
    SERVO           reduce using rule 31 (statute -> delay .)
    LIGHTS          reduce using rule 31 (statute -> delay .)
    DISPLAY         reduce using rule 31 (statute -> delay .)
    DISTANCE        reduce using rule 31 (statute -> delay .)
    STOP            reduce using rule 31 (statute -> delay .)
    WHILE           reduce using rule 31 (statute -> delay .)
    RETURN          reduce using rule 31 (statute -> delay .)
    RCURLY          reduce using rule 31 (statute -> delay .)


state 69

    (32) statute -> forward .

    IF              reduce using rule 32 (statute -> forward .)
    ID              reduce using rule 32 (statute -> forward .)
    CIN             reduce using rule 32 (statute -> forward .)
    COUT            reduce using rule 32 (statute -> forward .)
    DELAY           reduce using rule 32 (statute -> forward .)
    FORWARD         reduce using rule 32 (statute -> forward .)
    BACKWARD        reduce using rule 32 (statute -> forward .)
    TURNLEFT        reduce using rule 32 (statute -> forward .)
    TURNRIGHT       reduce using rule 32 (statute -> forward .)
    SERVO           reduce using rule 32 (statute -> forward .)
    LIGHTS          reduce using rule 32 (statute -> forward .)
    DISPLAY         reduce using rule 32 (statute -> forward .)
    DISTANCE        reduce using rule 32 (statute -> forward .)
    STOP            reduce using rule 32 (statute -> forward .)
    WHILE           reduce using rule 32 (statute -> forward .)
    RETURN          reduce using rule 32 (statute -> forward .)
    RCURLY          reduce using rule 32 (statute -> forward .)


state 70

    (33) statute -> backward .

    IF              reduce using rule 33 (statute -> backward .)
    ID              reduce using rule 33 (statute -> backward .)
    CIN             reduce using rule 33 (statute -> backward .)
    COUT            reduce using rule 33 (statute -> backward .)
    DELAY           reduce using rule 33 (statute -> backward .)
    FORWARD         reduce using rule 33 (statute -> backward .)
    BACKWARD        reduce using rule 33 (statute -> backward .)
    TURNLEFT        reduce using rule 33 (statute -> backward .)
    TURNRIGHT       reduce using rule 33 (statute -> backward .)
    SERVO           reduce using rule 33 (statute -> backward .)
    LIGHTS          reduce using rule 33 (statute -> backward .)
    DISPLAY         reduce using rule 33 (statute -> backward .)
    DISTANCE        reduce using rule 33 (statute -> backward .)
    STOP            reduce using rule 33 (statute -> backward .)
    WHILE           reduce using rule 33 (statute -> backward .)
    RETURN          reduce using rule 33 (statute -> backward .)
    RCURLY          reduce using rule 33 (statute -> backward .)


state 71

    (34) statute -> turnleft .

    IF              reduce using rule 34 (statute -> turnleft .)
    ID              reduce using rule 34 (statute -> turnleft .)
    CIN             reduce using rule 34 (statute -> turnleft .)
    COUT            reduce using rule 34 (statute -> turnleft .)
    DELAY           reduce using rule 34 (statute -> turnleft .)
    FORWARD         reduce using rule 34 (statute -> turnleft .)
    BACKWARD        reduce using rule 34 (statute -> turnleft .)
    TURNLEFT        reduce using rule 34 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 34 (statute -> turnleft .)
    SERVO           reduce using rule 34 (statute -> turnleft .)
    LIGHTS          reduce using rule 34 (statute -> turnleft .)
    DISPLAY         reduce using rule 34 (statute -> turnleft .)
    DISTANCE        reduce using rule 34 (statute -> turnleft .)
    STOP            reduce using rule 34 (statute -> turnleft .)
    WHILE           reduce using rule 34 (statute -> turnleft .)
    RETURN          reduce using rule 34 (statute -> turnleft .)
    RCURLY          reduce using rule 34 (statute -> turnleft .)


state 72

    (35) statute -> turnright .

    IF              reduce using rule 35 (statute -> turnright .)
    ID              reduce using rule 35 (statute -> turnright .)
    CIN             reduce using rule 35 (statute -> turnright .)
    COUT            reduce using rule 35 (statute -> turnright .)
    DELAY           reduce using rule 35 (statute -> turnright .)
    FORWARD         reduce using rule 35 (statute -> turnright .)
    BACKWARD        reduce using rule 35 (statute -> turnright .)
    TURNLEFT        reduce using rule 35 (statute -> turnright .)
    TURNRIGHT       reduce using rule 35 (statute -> turnright .)
    SERVO           reduce using rule 35 (statute -> turnright .)
    LIGHTS          reduce using rule 35 (statute -> turnright .)
    DISPLAY         reduce using rule 35 (statute -> turnright .)
    DISTANCE        reduce using rule 35 (statute -> turnright .)
    STOP            reduce using rule 35 (statute -> turnright .)
    WHILE           reduce using rule 35 (statute -> turnright .)
    RETURN          reduce using rule 35 (statute -> turnright .)
    RCURLY          reduce using rule 35 (statute -> turnright .)


state 73

    (36) statute -> servo .

    IF              reduce using rule 36 (statute -> servo .)
    ID              reduce using rule 36 (statute -> servo .)
    CIN             reduce using rule 36 (statute -> servo .)
    COUT            reduce using rule 36 (statute -> servo .)
    DELAY           reduce using rule 36 (statute -> servo .)
    FORWARD         reduce using rule 36 (statute -> servo .)
    BACKWARD        reduce using rule 36 (statute -> servo .)
    TURNLEFT        reduce using rule 36 (statute -> servo .)
    TURNRIGHT       reduce using rule 36 (statute -> servo .)
    SERVO           reduce using rule 36 (statute -> servo .)
    LIGHTS          reduce using rule 36 (statute -> servo .)
    DISPLAY         reduce using rule 36 (statute -> servo .)
    DISTANCE        reduce using rule 36 (statute -> servo .)
    STOP            reduce using rule 36 (statute -> servo .)
    WHILE           reduce using rule 36 (statute -> servo .)
    RETURN          reduce using rule 36 (statute -> servo .)
    RCURLY          reduce using rule 36 (statute -> servo .)


state 74

    (37) statute -> lights .

    IF              reduce using rule 37 (statute -> lights .)
    ID              reduce using rule 37 (statute -> lights .)
    CIN             reduce using rule 37 (statute -> lights .)
    COUT            reduce using rule 37 (statute -> lights .)
    DELAY           reduce using rule 37 (statute -> lights .)
    FORWARD         reduce using rule 37 (statute -> lights .)
    BACKWARD        reduce using rule 37 (statute -> lights .)
    TURNLEFT        reduce using rule 37 (statute -> lights .)
    TURNRIGHT       reduce using rule 37 (statute -> lights .)
    SERVO           reduce using rule 37 (statute -> lights .)
    LIGHTS          reduce using rule 37 (statute -> lights .)
    DISPLAY         reduce using rule 37 (statute -> lights .)
    DISTANCE        reduce using rule 37 (statute -> lights .)
    STOP            reduce using rule 37 (statute -> lights .)
    WHILE           reduce using rule 37 (statute -> lights .)
    RETURN          reduce using rule 37 (statute -> lights .)
    RCURLY          reduce using rule 37 (statute -> lights .)


state 75

    (38) statute -> display .

    IF              reduce using rule 38 (statute -> display .)
    ID              reduce using rule 38 (statute -> display .)
    CIN             reduce using rule 38 (statute -> display .)
    COUT            reduce using rule 38 (statute -> display .)
    DELAY           reduce using rule 38 (statute -> display .)
    FORWARD         reduce using rule 38 (statute -> display .)
    BACKWARD        reduce using rule 38 (statute -> display .)
    TURNLEFT        reduce using rule 38 (statute -> display .)
    TURNRIGHT       reduce using rule 38 (statute -> display .)
    SERVO           reduce using rule 38 (statute -> display .)
    LIGHTS          reduce using rule 38 (statute -> display .)
    DISPLAY         reduce using rule 38 (statute -> display .)
    DISTANCE        reduce using rule 38 (statute -> display .)
    STOP            reduce using rule 38 (statute -> display .)
    WHILE           reduce using rule 38 (statute -> display .)
    RETURN          reduce using rule 38 (statute -> display .)
    RCURLY          reduce using rule 38 (statute -> display .)


state 76

    (39) statute -> distance .

    IF              reduce using rule 39 (statute -> distance .)
    ID              reduce using rule 39 (statute -> distance .)
    CIN             reduce using rule 39 (statute -> distance .)
    COUT            reduce using rule 39 (statute -> distance .)
    DELAY           reduce using rule 39 (statute -> distance .)
    FORWARD         reduce using rule 39 (statute -> distance .)
    BACKWARD        reduce using rule 39 (statute -> distance .)
    TURNLEFT        reduce using rule 39 (statute -> distance .)
    TURNRIGHT       reduce using rule 39 (statute -> distance .)
    SERVO           reduce using rule 39 (statute -> distance .)
    LIGHTS          reduce using rule 39 (statute -> distance .)
    DISPLAY         reduce using rule 39 (statute -> distance .)
    DISTANCE        reduce using rule 39 (statute -> distance .)
    STOP            reduce using rule 39 (statute -> distance .)
    WHILE           reduce using rule 39 (statute -> distance .)
    RETURN          reduce using rule 39 (statute -> distance .)
    RCURLY          reduce using rule 39 (statute -> distance .)


state 77

    (40) statute -> stop .

    IF              reduce using rule 40 (statute -> stop .)
    ID              reduce using rule 40 (statute -> stop .)
    CIN             reduce using rule 40 (statute -> stop .)
    COUT            reduce using rule 40 (statute -> stop .)
    DELAY           reduce using rule 40 (statute -> stop .)
    FORWARD         reduce using rule 40 (statute -> stop .)
    BACKWARD        reduce using rule 40 (statute -> stop .)
    TURNLEFT        reduce using rule 40 (statute -> stop .)
    TURNRIGHT       reduce using rule 40 (statute -> stop .)
    SERVO           reduce using rule 40 (statute -> stop .)
    LIGHTS          reduce using rule 40 (statute -> stop .)
    DISPLAY         reduce using rule 40 (statute -> stop .)
    DISTANCE        reduce using rule 40 (statute -> stop .)
    STOP            reduce using rule 40 (statute -> stop .)
    WHILE           reduce using rule 40 (statute -> stop .)
    RETURN          reduce using rule 40 (statute -> stop .)
    RCURLY          reduce using rule 40 (statute -> stop .)


state 78

    (41) statute -> while .

    IF              reduce using rule 41 (statute -> while .)
    ID              reduce using rule 41 (statute -> while .)
    CIN             reduce using rule 41 (statute -> while .)
    COUT            reduce using rule 41 (statute -> while .)
    DELAY           reduce using rule 41 (statute -> while .)
    FORWARD         reduce using rule 41 (statute -> while .)
    BACKWARD        reduce using rule 41 (statute -> while .)
    TURNLEFT        reduce using rule 41 (statute -> while .)
    TURNRIGHT       reduce using rule 41 (statute -> while .)
    SERVO           reduce using rule 41 (statute -> while .)
    LIGHTS          reduce using rule 41 (statute -> while .)
    DISPLAY         reduce using rule 41 (statute -> while .)
    DISTANCE        reduce using rule 41 (statute -> while .)
    STOP            reduce using rule 41 (statute -> while .)
    WHILE           reduce using rule 41 (statute -> while .)
    RETURN          reduce using rule 41 (statute -> while .)
    RCURLY          reduce using rule 41 (statute -> while .)


state 79

    (42) statute -> return .

    IF              reduce using rule 42 (statute -> return .)
    ID              reduce using rule 42 (statute -> return .)
    CIN             reduce using rule 42 (statute -> return .)
    COUT            reduce using rule 42 (statute -> return .)
    DELAY           reduce using rule 42 (statute -> return .)
    FORWARD         reduce using rule 42 (statute -> return .)
    BACKWARD        reduce using rule 42 (statute -> return .)
    TURNLEFT        reduce using rule 42 (statute -> return .)
    TURNRIGHT       reduce using rule 42 (statute -> return .)
    SERVO           reduce using rule 42 (statute -> return .)
    LIGHTS          reduce using rule 42 (statute -> return .)
    DISPLAY         reduce using rule 42 (statute -> return .)
    DISTANCE        reduce using rule 42 (statute -> return .)
    STOP            reduce using rule 42 (statute -> return .)
    WHILE           reduce using rule 42 (statute -> return .)
    RETURN          reduce using rule 42 (statute -> return .)
    RCURLY          reduce using rule 42 (statute -> return .)


state 80

    (43) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 100


state 81

    (48) assign -> ID . assign1 ASSIGN express SEMICOLON
    (52) era -> ID .
    (49) assign1 -> . LBRACKET express RBRACKET
    (50) assign1 -> . empty
    (113) empty -> .

    LPAREN          reduce using rule 52 (era -> ID .)
    LBRACKET        shift and go to state 102
    ASSIGN          reduce using rule 113 (empty -> .)

    assign1                        shift and go to state 101
    empty                          shift and go to state 103

state 82

    (51) call -> era . LPAREN paramcall RPAREN SEMICOLON

    LPAREN          shift and go to state 104


state 83

    (56) cin -> CIN . cin1 SEMICOLON
    (57) cin1 -> . cin2
    (58) cin1 -> . cin3
    (59) cin2 -> . LPAREN ID RPAREN
    (60) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 108
    LBRACKET        shift and go to state 109

    cin1                           shift and go to state 105
    cin2                           shift and go to state 106
    cin3                           shift and go to state 107

state 84

    (63) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 110


state 85

    (64) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 86

    (65) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 87

    (66) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 88

    (67) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 114


state 89

    (68) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 115


state 90

    (69) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 116


state 91

    (70) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 117


state 92

    (71) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 118


state 93

    (72) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 119


state 94

    (73) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 120


state 95

    (74) while -> WHILE . LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON

    LPAREN          shift and go to state 121


state 96

    (76) return -> RETURN . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 122


state 97

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock . startingquad block RCURLY
    (13) startingquad -> . empty
    (113) empty -> .

    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    startingquad                   shift and go to state 123
    empty                          shift and go to state 57

state 98

    (5) main2 -> varsblock startingquad block RCURLY .

    FIN             reduce using rule 5 (main2 -> varsblock startingquad block RCURLY .)


state 99

    (24) block -> statute block .

    RCURLY          reduce using rule 24 (block -> statute block .)


state 100

    (43) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 124
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 101

    (48) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 128


state 102

    (49) assign1 -> LBRACKET . express RBRACKET
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 129
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 103

    (50) assign1 -> empty .

    ASSIGN          reduce using rule 50 (assign1 -> empty .)


state 104

    (51) call -> era LPAREN . paramcall RPAREN SEMICOLON
    (53) paramcall -> . express paramcall1
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    paramcall                      shift and go to state 130
    express                        shift and go to state 131
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 105

    (56) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 132


state 106

    (57) cin1 -> cin2 .

    SEMICOLON       reduce using rule 57 (cin1 -> cin2 .)


state 107

    (58) cin1 -> cin3 .

    SEMICOLON       reduce using rule 58 (cin1 -> cin3 .)


state 108

    (59) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 133


state 109

    (60) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 134


state 110

    (63) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 135
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 111

    (64) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 136


state 112

    (65) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 137
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 113

    (66) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 138
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 114

    (67) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 139
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 115

    (68) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 140
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 116

    (69) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 141
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 117

    (70) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 142


state 118

    (71) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 143


state 119

    (72) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 144


state 120

    (73) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 121

    (74) while -> WHILE LPAREN . express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 146
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 122

    (76) return -> RETURN LPAREN . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 147
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 123

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad . block RCURLY
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    block                          shift and go to state 148
    statute                        shift and go to state 61
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 124

    (43) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 149


state 125

    (86) express -> express1 . relational express2
    (93) relational -> . exp relational1
    (94) relational -> . NOT
    (101) exp -> . term exp1
    (106) term -> . factor term1
    (111) factor -> . LPAREN express RPAREN
    (112) factor -> . constant
    (81) constant -> . ID
    (82) constant -> . CTE_INT
    (83) constant -> . CTE_FLOAT
    (84) constant -> . CTE_CHAR
    (85) constant -> . CTE_BOOL

    NOT             shift and go to state 152
    LPAREN          shift and go to state 155
    ID              shift and go to state 157
    CTE_INT         shift and go to state 158
    CTE_FLOAT       shift and go to state 159
    CTE_CHAR        shift and go to state 160
    CTE_BOOL        shift and go to state 161

    relational                     shift and go to state 150
    exp                            shift and go to state 151
    term                           shift and go to state 153
    factor                         shift and go to state 154
    constant                       shift and go to state 156

state 126

    (87) express1 -> NOTEQUALS .

    NOT             reduce using rule 87 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 87 (express1 -> NOTEQUALS .)
    ID              reduce using rule 87 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 87 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 87 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 87 (express1 -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 87 (express1 -> NOTEQUALS .)


state 127

    (88) express1 -> empty .

    NOT             reduce using rule 88 (express1 -> empty .)
    LPAREN          reduce using rule 88 (express1 -> empty .)
    ID              reduce using rule 88 (express1 -> empty .)
    CTE_INT         reduce using rule 88 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 88 (express1 -> empty .)
    CTE_CHAR        reduce using rule 88 (express1 -> empty .)
    CTE_BOOL        reduce using rule 88 (express1 -> empty .)


state 128

    (48) assign -> ID assign1 ASSIGN . express SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 162
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 129

    (49) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 163


state 130

    (51) call -> era LPAREN paramcall . RPAREN SEMICOLON

    RPAREN          shift and go to state 164


state 131

    (53) paramcall -> express . paramcall1
    (54) paramcall1 -> . COMMA paramcall
    (55) paramcall1 -> . empty
    (113) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 113 (empty -> .)

    paramcall1                     shift and go to state 165
    empty                          shift and go to state 167

state 132

    (56) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    WHILE           reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 56 (cin -> CIN cin1 SEMICOLON .)


state 133

    (59) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 168


state 134

    (60) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 169


state 135

    (63) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 136

    (64) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 137

    (65) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 172


state 138

    (66) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 173


state 139

    (67) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 174


state 140

    (68) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 175


state 141

    (69) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 176


state 142

    (70) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 177


state 143

    (71) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 178


state 144

    (72) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 179


state 145

    (73) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 180


state 146

    (74) while -> WHILE LPAREN express . RPAREN while1 LCURLY block RCURLY SEMICOLON

    RPAREN          shift and go to state 181


state 147

    (76) return -> RETURN LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 148

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block . RCURLY

    RCURLY          shift and go to state 183


state 149

    (43) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 184


state 150

    (86) express -> express1 relational . express2
    (89) express2 -> . andor express
    (90) express2 -> . empty
    (91) andor -> . AND
    (92) andor -> . OR
    (113) empty -> .

    AND             shift and go to state 188
    OR              shift and go to state 189
    RPAREN          reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    express2                       shift and go to state 185
    andor                          shift and go to state 186
    empty                          shift and go to state 187

state 151

    (93) relational -> exp . relational1
    (95) relational1 -> . compare exp
    (96) relational1 -> . empty
    (97) compare -> . LESSTHAN
    (98) compare -> . GREATERTHAN
    (99) compare -> . EQUALS
    (100) compare -> . NOTEQUALS
    (113) empty -> .

    LESSTHAN        shift and go to state 193
    GREATERTHAN     shift and go to state 194
    EQUALS          shift and go to state 195
    NOTEQUALS       shift and go to state 196
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    relational1                    shift and go to state 190
    compare                        shift and go to state 191
    empty                          shift and go to state 192

state 152

    (94) relational -> NOT .

    AND             reduce using rule 94 (relational -> NOT .)
    OR              reduce using rule 94 (relational -> NOT .)
    RPAREN          reduce using rule 94 (relational -> NOT .)
    RBRACKET        reduce using rule 94 (relational -> NOT .)
    COMMA           reduce using rule 94 (relational -> NOT .)
    SEMICOLON       reduce using rule 94 (relational -> NOT .)


state 153

    (101) exp -> term . exp1
    (102) exp1 -> . plusminus exp
    (103) exp1 -> . empty
    (104) plusminus -> . PLUS
    (105) plusminus -> . MINUS
    (113) empty -> .

    PLUS            shift and go to state 200
    MINUS           shift and go to state 201
    LESSTHAN        reduce using rule 113 (empty -> .)
    GREATERTHAN     reduce using rule 113 (empty -> .)
    EQUALS          reduce using rule 113 (empty -> .)
    NOTEQUALS       reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    exp1                           shift and go to state 197
    plusminus                      shift and go to state 198
    empty                          shift and go to state 199

state 154

    (106) term -> factor . term1
    (107) term1 -> . multidivi term
    (108) term1 -> . empty
    (109) multidivi -> . MULTI
    (110) multidivi -> . DIVI
    (113) empty -> .

    MULTI           shift and go to state 205
    DIVI            shift and go to state 206
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    LESSTHAN        reduce using rule 113 (empty -> .)
    GREATERTHAN     reduce using rule 113 (empty -> .)
    EQUALS          reduce using rule 113 (empty -> .)
    NOTEQUALS       reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    term1                          shift and go to state 202
    multidivi                      shift and go to state 203
    empty                          shift and go to state 204

state 155

    (111) factor -> LPAREN . express RPAREN
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 207
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 156

    (112) factor -> constant .

    MULTI           reduce using rule 112 (factor -> constant .)
    DIVI            reduce using rule 112 (factor -> constant .)
    PLUS            reduce using rule 112 (factor -> constant .)
    MINUS           reduce using rule 112 (factor -> constant .)
    LESSTHAN        reduce using rule 112 (factor -> constant .)
    GREATERTHAN     reduce using rule 112 (factor -> constant .)
    EQUALS          reduce using rule 112 (factor -> constant .)
    NOTEQUALS       reduce using rule 112 (factor -> constant .)
    AND             reduce using rule 112 (factor -> constant .)
    OR              reduce using rule 112 (factor -> constant .)
    RPAREN          reduce using rule 112 (factor -> constant .)
    RBRACKET        reduce using rule 112 (factor -> constant .)
    COMMA           reduce using rule 112 (factor -> constant .)
    SEMICOLON       reduce using rule 112 (factor -> constant .)


state 157

    (81) constant -> ID .

    MULTI           reduce using rule 81 (constant -> ID .)
    DIVI            reduce using rule 81 (constant -> ID .)
    PLUS            reduce using rule 81 (constant -> ID .)
    MINUS           reduce using rule 81 (constant -> ID .)
    LESSTHAN        reduce using rule 81 (constant -> ID .)
    GREATERTHAN     reduce using rule 81 (constant -> ID .)
    EQUALS          reduce using rule 81 (constant -> ID .)
    NOTEQUALS       reduce using rule 81 (constant -> ID .)
    AND             reduce using rule 81 (constant -> ID .)
    OR              reduce using rule 81 (constant -> ID .)
    RPAREN          reduce using rule 81 (constant -> ID .)
    RBRACKET        reduce using rule 81 (constant -> ID .)
    COMMA           reduce using rule 81 (constant -> ID .)
    SEMICOLON       reduce using rule 81 (constant -> ID .)


state 158

    (82) constant -> CTE_INT .

    MULTI           reduce using rule 82 (constant -> CTE_INT .)
    DIVI            reduce using rule 82 (constant -> CTE_INT .)
    PLUS            reduce using rule 82 (constant -> CTE_INT .)
    MINUS           reduce using rule 82 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 82 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 82 (constant -> CTE_INT .)
    EQUALS          reduce using rule 82 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 82 (constant -> CTE_INT .)
    AND             reduce using rule 82 (constant -> CTE_INT .)
    OR              reduce using rule 82 (constant -> CTE_INT .)
    RPAREN          reduce using rule 82 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 82 (constant -> CTE_INT .)
    COMMA           reduce using rule 82 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 82 (constant -> CTE_INT .)


state 159

    (83) constant -> CTE_FLOAT .

    MULTI           reduce using rule 83 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 83 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 83 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 83 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 83 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 83 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 83 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 83 (constant -> CTE_FLOAT .)
    AND             reduce using rule 83 (constant -> CTE_FLOAT .)
    OR              reduce using rule 83 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 83 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 83 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 83 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 83 (constant -> CTE_FLOAT .)


state 160

    (84) constant -> CTE_CHAR .

    MULTI           reduce using rule 84 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 84 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 84 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 84 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 84 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 84 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 84 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 84 (constant -> CTE_CHAR .)
    AND             reduce using rule 84 (constant -> CTE_CHAR .)
    OR              reduce using rule 84 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 84 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 84 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 84 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 84 (constant -> CTE_CHAR .)


state 161

    (85) constant -> CTE_BOOL .

    MULTI           reduce using rule 85 (constant -> CTE_BOOL .)
    DIVI            reduce using rule 85 (constant -> CTE_BOOL .)
    PLUS            reduce using rule 85 (constant -> CTE_BOOL .)
    MINUS           reduce using rule 85 (constant -> CTE_BOOL .)
    LESSTHAN        reduce using rule 85 (constant -> CTE_BOOL .)
    GREATERTHAN     reduce using rule 85 (constant -> CTE_BOOL .)
    EQUALS          reduce using rule 85 (constant -> CTE_BOOL .)
    NOTEQUALS       reduce using rule 85 (constant -> CTE_BOOL .)
    AND             reduce using rule 85 (constant -> CTE_BOOL .)
    OR              reduce using rule 85 (constant -> CTE_BOOL .)
    RPAREN          reduce using rule 85 (constant -> CTE_BOOL .)
    RBRACKET        reduce using rule 85 (constant -> CTE_BOOL .)
    COMMA           reduce using rule 85 (constant -> CTE_BOOL .)
    SEMICOLON       reduce using rule 85 (constant -> CTE_BOOL .)


state 162

    (48) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 208


state 163

    (49) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 49 (assign1 -> LBRACKET express RBRACKET .)


state 164

    (51) call -> era LPAREN paramcall RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 165

    (53) paramcall -> express paramcall1 .

    RPAREN          reduce using rule 53 (paramcall -> express paramcall1 .)


state 166

    (54) paramcall1 -> COMMA . paramcall
    (53) paramcall -> . express paramcall1
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    paramcall                      shift and go to state 210
    express                        shift and go to state 131
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 167

    (55) paramcall1 -> empty .

    RPAREN          reduce using rule 55 (paramcall1 -> empty .)


state 168

    (59) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 59 (cin2 -> LPAREN ID RPAREN .)


state 169

    (60) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 211


state 170

    (63) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 171

    (64) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 172

    (65) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 214
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 173

    (66) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 215
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 174

    (67) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 216
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 175

    (68) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 217
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 176

    (69) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 218


state 177

    (70) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 219


state 178

    (71) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 220


state 179

    (72) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 72 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 180

    (73) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 73 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 181

    (74) while -> WHILE LPAREN express RPAREN . while1 LCURLY block RCURLY SEMICOLON
    (75) while1 -> . empty
    (113) empty -> .

    LCURLY          reduce using rule 113 (empty -> .)

    while1                         shift and go to state 221
    empty                          shift and go to state 222

state 182

    (76) return -> RETURN LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 183

    (8) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .

    FUNCDEF         reduce using rule 8 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .)
    MAIN            reduce using rule 8 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock startingquad block RCURLY .)


state 184

    (43) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (44) gotoif -> . empty
    (113) empty -> .

    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    gotoif                         shift and go to state 224
    empty                          shift and go to state 225

state 185

    (86) express -> express1 relational express2 .

    RPAREN          reduce using rule 86 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 86 (express -> express1 relational express2 .)
    COMMA           reduce using rule 86 (express -> express1 relational express2 .)
    SEMICOLON       reduce using rule 86 (express -> express1 relational express2 .)


state 186

    (89) express2 -> andor . express
    (86) express -> . express1 relational express2
    (87) express1 -> . NOTEQUALS
    (88) express1 -> . empty
    (113) empty -> .

    NOTEQUALS       shift and go to state 126
    NOT             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CTE_INT         reduce using rule 113 (empty -> .)
    CTE_FLOAT       reduce using rule 113 (empty -> .)
    CTE_CHAR        reduce using rule 113 (empty -> .)
    CTE_BOOL        reduce using rule 113 (empty -> .)

    express                        shift and go to state 226
    express1                       shift and go to state 125
    empty                          shift and go to state 127

state 187

    (90) express2 -> empty .

    RPAREN          reduce using rule 90 (express2 -> empty .)
    RBRACKET        reduce using rule 90 (express2 -> empty .)
    COMMA           reduce using rule 90 (express2 -> empty .)
    SEMICOLON       reduce using rule 90 (express2 -> empty .)


state 188

    (91) andor -> AND .

    NOTEQUALS       reduce using rule 91 (andor -> AND .)
    NOT             reduce using rule 91 (andor -> AND .)
    LPAREN          reduce using rule 91 (andor -> AND .)
    ID              reduce using rule 91 (andor -> AND .)
    CTE_INT         reduce using rule 91 (andor -> AND .)
    CTE_FLOAT       reduce using rule 91 (andor -> AND .)
    CTE_CHAR        reduce using rule 91 (andor -> AND .)
    CTE_BOOL        reduce using rule 91 (andor -> AND .)


state 189

    (92) andor -> OR .

    NOTEQUALS       reduce using rule 92 (andor -> OR .)
    NOT             reduce using rule 92 (andor -> OR .)
    LPAREN          reduce using rule 92 (andor -> OR .)
    ID              reduce using rule 92 (andor -> OR .)
    CTE_INT         reduce using rule 92 (andor -> OR .)
    CTE_FLOAT       reduce using rule 92 (andor -> OR .)
    CTE_CHAR        reduce using rule 92 (andor -> OR .)
    CTE_BOOL        reduce using rule 92 (andor -> OR .)


state 190

    (93) relational -> exp relational1 .

    AND             reduce using rule 93 (relational -> exp relational1 .)
    OR              reduce using rule 93 (relational -> exp relational1 .)
    RPAREN          reduce using rule 93 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 93 (relational -> exp relational1 .)
    COMMA           reduce using rule 93 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 93 (relational -> exp relational1 .)


state 191

    (95) relational1 -> compare . exp
    (101) exp -> . term exp1
    (106) term -> . factor term1
    (111) factor -> . LPAREN express RPAREN
    (112) factor -> . constant
    (81) constant -> . ID
    (82) constant -> . CTE_INT
    (83) constant -> . CTE_FLOAT
    (84) constant -> . CTE_CHAR
    (85) constant -> . CTE_BOOL

    LPAREN          shift and go to state 155
    ID              shift and go to state 157
    CTE_INT         shift and go to state 158
    CTE_FLOAT       shift and go to state 159
    CTE_CHAR        shift and go to state 160
    CTE_BOOL        shift and go to state 161

    exp                            shift and go to state 227
    term                           shift and go to state 153
    factor                         shift and go to state 154
    constant                       shift and go to state 156

state 192

    (96) relational1 -> empty .

    AND             reduce using rule 96 (relational1 -> empty .)
    OR              reduce using rule 96 (relational1 -> empty .)
    RPAREN          reduce using rule 96 (relational1 -> empty .)
    RBRACKET        reduce using rule 96 (relational1 -> empty .)
    COMMA           reduce using rule 96 (relational1 -> empty .)
    SEMICOLON       reduce using rule 96 (relational1 -> empty .)


state 193

    (97) compare -> LESSTHAN .

    LPAREN          reduce using rule 97 (compare -> LESSTHAN .)
    ID              reduce using rule 97 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 97 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 97 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 97 (compare -> LESSTHAN .)
    CTE_BOOL        reduce using rule 97 (compare -> LESSTHAN .)


state 194

    (98) compare -> GREATERTHAN .

    LPAREN          reduce using rule 98 (compare -> GREATERTHAN .)
    ID              reduce using rule 98 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 98 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 98 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 98 (compare -> GREATERTHAN .)
    CTE_BOOL        reduce using rule 98 (compare -> GREATERTHAN .)


state 195

    (99) compare -> EQUALS .

    LPAREN          reduce using rule 99 (compare -> EQUALS .)
    ID              reduce using rule 99 (compare -> EQUALS .)
    CTE_INT         reduce using rule 99 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 99 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 99 (compare -> EQUALS .)
    CTE_BOOL        reduce using rule 99 (compare -> EQUALS .)


state 196

    (100) compare -> NOTEQUALS .

    LPAREN          reduce using rule 100 (compare -> NOTEQUALS .)
    ID              reduce using rule 100 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 100 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 100 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 100 (compare -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 100 (compare -> NOTEQUALS .)


state 197

    (101) exp -> term exp1 .

    LESSTHAN        reduce using rule 101 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 101 (exp -> term exp1 .)
    EQUALS          reduce using rule 101 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 101 (exp -> term exp1 .)
    AND             reduce using rule 101 (exp -> term exp1 .)
    OR              reduce using rule 101 (exp -> term exp1 .)
    RPAREN          reduce using rule 101 (exp -> term exp1 .)
    RBRACKET        reduce using rule 101 (exp -> term exp1 .)
    COMMA           reduce using rule 101 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 101 (exp -> term exp1 .)


state 198

    (102) exp1 -> plusminus . exp
    (101) exp -> . term exp1
    (106) term -> . factor term1
    (111) factor -> . LPAREN express RPAREN
    (112) factor -> . constant
    (81) constant -> . ID
    (82) constant -> . CTE_INT
    (83) constant -> . CTE_FLOAT
    (84) constant -> . CTE_CHAR
    (85) constant -> . CTE_BOOL

    LPAREN          shift and go to state 155
    ID              shift and go to state 157
    CTE_INT         shift and go to state 158
    CTE_FLOAT       shift and go to state 159
    CTE_CHAR        shift and go to state 160
    CTE_BOOL        shift and go to state 161

    exp                            shift and go to state 228
    term                           shift and go to state 153
    factor                         shift and go to state 154
    constant                       shift and go to state 156

state 199

    (103) exp1 -> empty .

    LESSTHAN        reduce using rule 103 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 103 (exp1 -> empty .)
    EQUALS          reduce using rule 103 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 103 (exp1 -> empty .)
    AND             reduce using rule 103 (exp1 -> empty .)
    OR              reduce using rule 103 (exp1 -> empty .)
    RPAREN          reduce using rule 103 (exp1 -> empty .)
    RBRACKET        reduce using rule 103 (exp1 -> empty .)
    COMMA           reduce using rule 103 (exp1 -> empty .)
    SEMICOLON       reduce using rule 103 (exp1 -> empty .)


state 200

    (104) plusminus -> PLUS .

    LPAREN          reduce using rule 104 (plusminus -> PLUS .)
    ID              reduce using rule 104 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 104 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 104 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 104 (plusminus -> PLUS .)
    CTE_BOOL        reduce using rule 104 (plusminus -> PLUS .)


state 201

    (105) plusminus -> MINUS .

    LPAREN          reduce using rule 105 (plusminus -> MINUS .)
    ID              reduce using rule 105 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 105 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 105 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 105 (plusminus -> MINUS .)
    CTE_BOOL        reduce using rule 105 (plusminus -> MINUS .)


state 202

    (106) term -> factor term1 .

    PLUS            reduce using rule 106 (term -> factor term1 .)
    MINUS           reduce using rule 106 (term -> factor term1 .)
    LESSTHAN        reduce using rule 106 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 106 (term -> factor term1 .)
    EQUALS          reduce using rule 106 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 106 (term -> factor term1 .)
    AND             reduce using rule 106 (term -> factor term1 .)
    OR              reduce using rule 106 (term -> factor term1 .)
    RPAREN          reduce using rule 106 (term -> factor term1 .)
    RBRACKET        reduce using rule 106 (term -> factor term1 .)
    COMMA           reduce using rule 106 (term -> factor term1 .)
    SEMICOLON       reduce using rule 106 (term -> factor term1 .)


state 203

    (107) term1 -> multidivi . term
    (106) term -> . factor term1
    (111) factor -> . LPAREN express RPAREN
    (112) factor -> . constant
    (81) constant -> . ID
    (82) constant -> . CTE_INT
    (83) constant -> . CTE_FLOAT
    (84) constant -> . CTE_CHAR
    (85) constant -> . CTE_BOOL

    LPAREN          shift and go to state 155
    ID              shift and go to state 157
    CTE_INT         shift and go to state 158
    CTE_FLOAT       shift and go to state 159
    CTE_CHAR        shift and go to state 160
    CTE_BOOL        shift and go to state 161

    term                           shift and go to state 229
    factor                         shift and go to state 154
    constant                       shift and go to state 156

state 204

    (108) term1 -> empty .

    PLUS            reduce using rule 108 (term1 -> empty .)
    MINUS           reduce using rule 108 (term1 -> empty .)
    LESSTHAN        reduce using rule 108 (term1 -> empty .)
    GREATERTHAN     reduce using rule 108 (term1 -> empty .)
    EQUALS          reduce using rule 108 (term1 -> empty .)
    NOTEQUALS       reduce using rule 108 (term1 -> empty .)
    AND             reduce using rule 108 (term1 -> empty .)
    OR              reduce using rule 108 (term1 -> empty .)
    RPAREN          reduce using rule 108 (term1 -> empty .)
    RBRACKET        reduce using rule 108 (term1 -> empty .)
    COMMA           reduce using rule 108 (term1 -> empty .)
    SEMICOLON       reduce using rule 108 (term1 -> empty .)


state 205

    (109) multidivi -> MULTI .

    LPAREN          reduce using rule 109 (multidivi -> MULTI .)
    ID              reduce using rule 109 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 109 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 109 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 109 (multidivi -> MULTI .)
    CTE_BOOL        reduce using rule 109 (multidivi -> MULTI .)


state 206

    (110) multidivi -> DIVI .

    LPAREN          reduce using rule 110 (multidivi -> DIVI .)
    ID              reduce using rule 110 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 110 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 110 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 110 (multidivi -> DIVI .)
    CTE_BOOL        reduce using rule 110 (multidivi -> DIVI .)


state 207

    (111) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 230


state 208

    (48) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    WHILE           reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 48 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 209

    (51) call -> era LPAREN paramcall RPAREN SEMICOLON .

    IF              reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    ID              reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    CIN             reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    COUT            reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DELAY           reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    FORWARD         reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    SERVO           reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    STOP            reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RETURN          reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)
    RCURLY          reduce using rule 51 (call -> era LPAREN paramcall RPAREN SEMICOLON .)


state 210

    (54) paramcall1 -> COMMA paramcall .

    RPAREN          reduce using rule 54 (paramcall1 -> COMMA paramcall .)


state 211

    (60) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (61) cin4 -> . COMMA ID cin4
    (62) cin4 -> . empty
    (113) empty -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 113 (empty -> .)

    cin4                           shift and go to state 231
    empty                          shift and go to state 233

state 212

    (63) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 213

    (64) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 214

    (65) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 234


state 215

    (66) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 235


state 216

    (67) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 236


state 217

    (68) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 237


state 218

    (69) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 219

    (70) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 238


state 220

    (71) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 71 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 221

    (74) while -> WHILE LPAREN express RPAREN while1 . LCURLY block RCURLY SEMICOLON

    LCURLY          shift and go to state 239


state 222

    (75) while1 -> empty .

    LCURLY          reduce using rule 75 (while1 -> empty .)


state 223

    (76) return -> RETURN LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    WHILE           reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 76 (return -> RETURN LPAREN express RPAREN SEMICOLON .)


state 224

    (43) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    block                          shift and go to state 240
    statute                        shift and go to state 61
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 225

    (44) gotoif -> empty .

    IF              reduce using rule 44 (gotoif -> empty .)
    ID              reduce using rule 44 (gotoif -> empty .)
    CIN             reduce using rule 44 (gotoif -> empty .)
    COUT            reduce using rule 44 (gotoif -> empty .)
    DELAY           reduce using rule 44 (gotoif -> empty .)
    FORWARD         reduce using rule 44 (gotoif -> empty .)
    BACKWARD        reduce using rule 44 (gotoif -> empty .)
    TURNLEFT        reduce using rule 44 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 44 (gotoif -> empty .)
    SERVO           reduce using rule 44 (gotoif -> empty .)
    LIGHTS          reduce using rule 44 (gotoif -> empty .)
    DISPLAY         reduce using rule 44 (gotoif -> empty .)
    DISTANCE        reduce using rule 44 (gotoif -> empty .)
    STOP            reduce using rule 44 (gotoif -> empty .)
    WHILE           reduce using rule 44 (gotoif -> empty .)
    RETURN          reduce using rule 44 (gotoif -> empty .)
    RCURLY          reduce using rule 44 (gotoif -> empty .)


state 226

    (89) express2 -> andor express .

    RPAREN          reduce using rule 89 (express2 -> andor express .)
    RBRACKET        reduce using rule 89 (express2 -> andor express .)
    COMMA           reduce using rule 89 (express2 -> andor express .)
    SEMICOLON       reduce using rule 89 (express2 -> andor express .)


state 227

    (95) relational1 -> compare exp .

    AND             reduce using rule 95 (relational1 -> compare exp .)
    OR              reduce using rule 95 (relational1 -> compare exp .)
    RPAREN          reduce using rule 95 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 95 (relational1 -> compare exp .)
    COMMA           reduce using rule 95 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 95 (relational1 -> compare exp .)


state 228

    (102) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 102 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 102 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 102 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 102 (exp1 -> plusminus exp .)
    AND             reduce using rule 102 (exp1 -> plusminus exp .)
    OR              reduce using rule 102 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 102 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 102 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 102 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 102 (exp1 -> plusminus exp .)


state 229

    (107) term1 -> multidivi term .

    PLUS            reduce using rule 107 (term1 -> multidivi term .)
    MINUS           reduce using rule 107 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 107 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 107 (term1 -> multidivi term .)
    EQUALS          reduce using rule 107 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 107 (term1 -> multidivi term .)
    AND             reduce using rule 107 (term1 -> multidivi term .)
    OR              reduce using rule 107 (term1 -> multidivi term .)
    RPAREN          reduce using rule 107 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 107 (term1 -> multidivi term .)
    COMMA           reduce using rule 107 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 107 (term1 -> multidivi term .)


state 230

    (111) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 111 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 111 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 111 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 111 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 111 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 111 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 111 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 111 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 111 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 111 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 111 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 111 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 111 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 111 (factor -> LPAREN express RPAREN .)


state 231

    (60) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 241


state 232

    (61) cin4 -> COMMA . ID cin4

    ID              shift and go to state 242


state 233

    (62) cin4 -> empty .

    RPAREN          reduce using rule 62 (cin4 -> empty .)


state 234

    (65) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 243


state 235

    (66) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 244


state 236

    (67) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 245


state 237

    (68) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 246


state 238

    (70) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 247


state 239

    (74) while -> WHILE LPAREN express RPAREN while1 LCURLY . block RCURLY SEMICOLON
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    block                          shift and go to state 248
    statute                        shift and go to state 61
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 240

    (43) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 249


state 241

    (60) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 60 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 242

    (61) cin4 -> COMMA ID . cin4
    (61) cin4 -> . COMMA ID cin4
    (62) cin4 -> . empty
    (113) empty -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 113 (empty -> .)

    cin4                           shift and go to state 250
    empty                          shift and go to state 233

state 243

    (65) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 65 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 244

    (66) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 245

    (67) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 246

    (68) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 247

    (70) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 248

    (74) while -> WHILE LPAREN express RPAREN while1 LCURLY block . RCURLY SEMICOLON

    RCURLY          shift and go to state 251


state 249

    (43) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (45) else -> . ELSE LCURLY gotoelse block RCURLY else
    (46) else -> . SEMICOLON

    ELSE            shift and go to state 253
    SEMICOLON       shift and go to state 254

    else                           shift and go to state 252

state 250

    (61) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 61 (cin4 -> COMMA ID cin4 .)


state 251

    (74) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY . SEMICOLON

    SEMICOLON       shift and go to state 255


state 252

    (43) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    IF              reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    ID              reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CIN             reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    COUT            reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DELAY           reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    FORWARD         reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    BACKWARD        reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNLEFT        reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNRIGHT       reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    SERVO           reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    LIGHTS          reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISPLAY         reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISTANCE        reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    STOP            reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    WHILE           reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RETURN          reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RCURLY          reduce using rule 43 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 253

    (45) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 256


state 254

    (46) else -> SEMICOLON .

    IF              reduce using rule 46 (else -> SEMICOLON .)
    ID              reduce using rule 46 (else -> SEMICOLON .)
    CIN             reduce using rule 46 (else -> SEMICOLON .)
    COUT            reduce using rule 46 (else -> SEMICOLON .)
    DELAY           reduce using rule 46 (else -> SEMICOLON .)
    FORWARD         reduce using rule 46 (else -> SEMICOLON .)
    BACKWARD        reduce using rule 46 (else -> SEMICOLON .)
    TURNLEFT        reduce using rule 46 (else -> SEMICOLON .)
    TURNRIGHT       reduce using rule 46 (else -> SEMICOLON .)
    SERVO           reduce using rule 46 (else -> SEMICOLON .)
    LIGHTS          reduce using rule 46 (else -> SEMICOLON .)
    DISPLAY         reduce using rule 46 (else -> SEMICOLON .)
    DISTANCE        reduce using rule 46 (else -> SEMICOLON .)
    STOP            reduce using rule 46 (else -> SEMICOLON .)
    WHILE           reduce using rule 46 (else -> SEMICOLON .)
    RETURN          reduce using rule 46 (else -> SEMICOLON .)
    RCURLY          reduce using rule 46 (else -> SEMICOLON .)


state 255

    (74) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .

    IF              reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    ID              reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    CIN             reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    COUT            reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DELAY           reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    FORWARD         reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    BACKWARD        reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNLEFT        reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    TURNRIGHT       reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    SERVO           reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    LIGHTS          reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISPLAY         reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    DISTANCE        reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    STOP            reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    WHILE           reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RETURN          reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)
    RCURLY          reduce using rule 74 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON .)


state 256

    (45) else -> ELSE LCURLY . gotoelse block RCURLY else
    (47) gotoelse -> . empty
    (113) empty -> .

    IF              reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    CIN             reduce using rule 113 (empty -> .)
    COUT            reduce using rule 113 (empty -> .)
    DELAY           reduce using rule 113 (empty -> .)
    FORWARD         reduce using rule 113 (empty -> .)
    BACKWARD        reduce using rule 113 (empty -> .)
    TURNLEFT        reduce using rule 113 (empty -> .)
    TURNRIGHT       reduce using rule 113 (empty -> .)
    SERVO           reduce using rule 113 (empty -> .)
    LIGHTS          reduce using rule 113 (empty -> .)
    DISPLAY         reduce using rule 113 (empty -> .)
    DISTANCE        reduce using rule 113 (empty -> .)
    STOP            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    RCURLY          reduce using rule 113 (empty -> .)

    gotoelse                       shift and go to state 257
    empty                          shift and go to state 258

state 257

    (45) else -> ELSE LCURLY gotoelse . block RCURLY else
    (24) block -> . statute block
    (25) block -> . empty
    (26) statute -> . cond
    (27) statute -> . assign
    (28) statute -> . call
    (29) statute -> . cin
    (30) statute -> . cout
    (31) statute -> . delay
    (32) statute -> . forward
    (33) statute -> . backward
    (34) statute -> . turnleft
    (35) statute -> . turnright
    (36) statute -> . servo
    (37) statute -> . lights
    (38) statute -> . display
    (39) statute -> . distance
    (40) statute -> . stop
    (41) statute -> . while
    (42) statute -> . return
    (113) empty -> .
    (43) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (48) assign -> . ID assign1 ASSIGN express SEMICOLON
    (51) call -> . era LPAREN paramcall RPAREN SEMICOLON
    (56) cin -> . CIN cin1 SEMICOLON
    (63) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (64) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (65) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (66) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (67) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (68) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (69) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (70) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (71) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (72) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (73) stop -> . STOP LPAREN RPAREN SEMICOLON
    (74) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY SEMICOLON
    (76) return -> . RETURN LPAREN express RPAREN SEMICOLON
    (52) era -> . ID

    RCURLY          reduce using rule 113 (empty -> .)
    IF              shift and go to state 80
    ID              shift and go to state 81
    CIN             shift and go to state 83
    COUT            shift and go to state 84
    DELAY           shift and go to state 85
    FORWARD         shift and go to state 86
    BACKWARD        shift and go to state 87
    TURNLEFT        shift and go to state 88
    TURNRIGHT       shift and go to state 89
    SERVO           shift and go to state 90
    LIGHTS          shift and go to state 91
    DISPLAY         shift and go to state 92
    DISTANCE        shift and go to state 93
    STOP            shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

    block                          shift and go to state 259
    statute                        shift and go to state 61
    empty                          shift and go to state 62
    cond                           shift and go to state 63
    assign                         shift and go to state 64
    call                           shift and go to state 65
    cin                            shift and go to state 66
    cout                           shift and go to state 67
    delay                          shift and go to state 68
    forward                        shift and go to state 69
    backward                       shift and go to state 70
    turnleft                       shift and go to state 71
    turnright                      shift and go to state 72
    servo                          shift and go to state 73
    lights                         shift and go to state 74
    display                        shift and go to state 75
    distance                       shift and go to state 76
    stop                           shift and go to state 77
    while                          shift and go to state 78
    return                         shift and go to state 79
    era                            shift and go to state 82

state 258

    (47) gotoelse -> empty .

    IF              reduce using rule 47 (gotoelse -> empty .)
    ID              reduce using rule 47 (gotoelse -> empty .)
    CIN             reduce using rule 47 (gotoelse -> empty .)
    COUT            reduce using rule 47 (gotoelse -> empty .)
    DELAY           reduce using rule 47 (gotoelse -> empty .)
    FORWARD         reduce using rule 47 (gotoelse -> empty .)
    BACKWARD        reduce using rule 47 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 47 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 47 (gotoelse -> empty .)
    SERVO           reduce using rule 47 (gotoelse -> empty .)
    LIGHTS          reduce using rule 47 (gotoelse -> empty .)
    DISPLAY         reduce using rule 47 (gotoelse -> empty .)
    DISTANCE        reduce using rule 47 (gotoelse -> empty .)
    STOP            reduce using rule 47 (gotoelse -> empty .)
    WHILE           reduce using rule 47 (gotoelse -> empty .)
    RETURN          reduce using rule 47 (gotoelse -> empty .)
    RCURLY          reduce using rule 47 (gotoelse -> empty .)


state 259

    (45) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 260


state 260

    (45) else -> ELSE LCURLY gotoelse block RCURLY . else
    (45) else -> . ELSE LCURLY gotoelse block RCURLY else
    (46) else -> . SEMICOLON

    ELSE            shift and go to state 253
    SEMICOLON       shift and go to state 254

    else                           shift and go to state 261

state 261

    (45) else -> ELSE LCURLY gotoelse block RCURLY else .

    IF              reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    ID              reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CIN             reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    COUT            reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DELAY           reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    FORWARD         reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    BACKWARD        reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNLEFT        reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNRIGHT       reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    SERVO           reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    LIGHTS          reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISPLAY         reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISTANCE        reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    STOP            reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    WHILE           reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RETURN          reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RCURLY          reduce using rule 45 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 41 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 45 resolved as shift
WARNING: shift/reduce conflict for INT in state 45 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 45 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for INT in state 46 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 46 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 53 resolved as shift
WARNING: shift/reduce conflict for INT in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 53 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 53 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 47
