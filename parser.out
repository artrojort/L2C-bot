Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON
Rule 2     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 3     main2 -> varsblock block RCURLY
Rule 4     funcsblock -> funcs funcsblock
Rule 5     funcsblock -> empty
Rule 6     funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
Rule 7     globalvarsblock -> vars varsblock
Rule 8     globalvarsblock -> empty
Rule 9     varsblock -> vars varsblock
Rule 10    varsblock -> empty
Rule 11    vars -> VARDEF type ID vars1 SEMICOLON
Rule 12    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 13    vars1 -> empty
Rule 14    choosetype -> type
Rule 15    choosetype -> VOID
Rule 16    paramsblock -> params paramsblock
Rule 17    paramsblock -> COMMA params paramsblock
Rule 18    paramsblock -> empty
Rule 19    params -> type ID
Rule 20    params -> empty
Rule 21    block -> statute block
Rule 22    block -> empty
Rule 23    statute -> cond
Rule 24    statute -> assign
Rule 25    statute -> call
Rule 26    statute -> cin
Rule 27    statute -> cout
Rule 28    statute -> delay
Rule 29    statute -> forward
Rule 30    statute -> backward
Rule 31    statute -> turnleft
Rule 32    statute -> turnright
Rule 33    statute -> servo
Rule 34    statute -> lights
Rule 35    statute -> display
Rule 36    statute -> distance
Rule 37    statute -> stop
Rule 38    statute -> return
Rule 39    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 40    gotoif -> empty
Rule 41    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 42    else -> SEMICOLON
Rule 43    gotoelse -> empty
Rule 44    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 45    assign1 -> LBRACKET express RBRACKET
Rule 46    assign1 -> empty
Rule 47    call -> CALL ID LPAREN call1 RPAREN SEMICOLON
Rule 48    call1 -> express call2
Rule 49    call1 -> empty
Rule 50    call2 -> COMMA call1
Rule 51    call2 -> empty
Rule 52    cin -> CIN cin1 SEMICOLON
Rule 53    cin1 -> cin2
Rule 54    cin1 -> cin3
Rule 55    cin2 -> LPAREN ID RPAREN
Rule 56    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 57    cin4 -> COMMA ID cin4
Rule 58    cin4 -> empty
Rule 59    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 60    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 61    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 62    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 63    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 64    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 65    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 66    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 67    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 68    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 69    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 70    return -> RETURN LPAREN express RPAREN SEMICOLON
Rule 71    type -> INT
Rule 72    type -> FLOAT
Rule 73    type -> bool
Rule 74    type -> CHAR
Rule 75    type -> STRING
Rule 76    constant -> ID
Rule 77    constant -> CTE_INT
Rule 78    constant -> CTE_FLOAT
Rule 79    constant -> CTE_STRING
Rule 80    constant -> CTE_CHAR
Rule 81    express -> express1 relational express2
Rule 82    express1 -> NOTEQUALS
Rule 83    express1 -> empty
Rule 84    express2 -> andor express
Rule 85    express2 -> empty
Rule 86    andor -> AND
Rule 87    andor -> OR
Rule 88    relational -> exp relational1
Rule 89    relational -> NOT
Rule 90    relational1 -> compare exp
Rule 91    relational1 -> empty
Rule 92    compare -> LESSTHAN
Rule 93    compare -> GREATERTHAN
Rule 94    compare -> EQUALS
Rule 95    compare -> NOTEQUALS
Rule 96    exp -> term exp1
Rule 97    exp1 -> plusminus exp
Rule 98    exp1 -> empty
Rule 99    plusminus -> PLUS
Rule 100   plusminus -> MINUS
Rule 101   term -> factor term1
Rule 102   term1 -> multidivi term
Rule 103   term1 -> empty
Rule 104   multidivi -> MULTI
Rule 105   multidivi -> DIVI
Rule 106   factor -> LPAREN express RPAREN
Rule 107   factor -> constant
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 86
ASSIGN               : 44
BACKWARD             : 62
CALL                 : 47
CHAR                 : 74
CIN                  : 52
COMMA                : 17 50 57 61 62 63 64 66
COUT                 : 59
CTE_ARR              : 
CTE_CHAR             : 67 80
CTE_FLOAT            : 78
CTE_INT              : 12 56 60 66 66 77
CTE_STRING           : 79
DELAY                : 60
DISPLAY              : 67
DISTANCE             : 68
DIVI                 : 105
ELSE                 : 41
EQUALS               : 94
FIN                  : 1
FLOAT                : 72
FORWARD              : 61
FUNCDEF              : 6
GREATERTHAN          : 93
ID                   : 6 11 19 44 47 55 57 76
IF                   : 39
INT                  : 71
LBRACKET             : 12 45 56
LCURLY               : 2 6 39 41
LESSTHAN             : 92
LIGHTS               : 66
LPAREN               : 2 6 39 47 55 56 59 60 61 62 63 64 65 66 67 68 69 70 106
MAIN                 : 2
MINUS                : 100
MULTI                : 104
NOT                  : 89
NOTEQUALS            : 82 95
OR                   : 87
PLUS                 : 99
PROGRAM              : 1
RBRACKET             : 12 45 56
RCURLY               : 3 6 39 41
RETURN               : 70
RPAREN               : 2 6 39 47 55 56 59 60 61 62 63 64 65 66 67 68 69 70 106
SEMICOLON            : 1 11 42 44 47 52 59 60 61 62 63 64 65 66 67 68 69 70
SERVO                : 65
STOP                 : 69
STRING               : 75
TURNLEFT             : 63
TURNRIGHT            : 64
VARDEF               : 11
VOID                 : 15
bool                 : 73
error                : 

Nonterminals, with rules where they appear

andor                : 84
assign               : 24
assign1              : 44
backward             : 30
block                : 3 6 21 39 41
call                 : 25
call1                : 47 50
call2                : 48
choosetype           : 6
cin                  : 26
cin1                 : 52
cin2                 : 53
cin3                 : 54
cin4                 : 56 57
compare              : 90
cond                 : 23
constant             : 107
cout                 : 27
delay                : 28
display              : 35
distance             : 36
else                 : 39 41
empty                : 5 8 10 13 18 20 22 40 43 46 49 51 58 83 85 91 98 103
exp                  : 88 90 97
exp1                 : 96
express              : 39 44 45 48 59 61 61 62 62 63 63 64 64 65 70 84 106
express1             : 81
express2             : 81
factor               : 101
forward              : 29
funcs                : 4
funcsblock           : 1 4
globalvarsblock      : 1
gotoelse             : 41
gotoif               : 39
lights               : 34
main                 : 1
main2                : 2
multidivi            : 102
params               : 16 17
paramsblock          : 6 16 17
plusminus            : 97
program              : 0
relational           : 81
relational1          : 88
return               : 38
servo                : 33
statute              : 21
stop                 : 37
term                 : 96 102
term1                : 101
turnleft             : 31
turnright            : 32
type                 : 11 14 19
vars                 : 7 9
vars1                : 11
varsblock            : 3 6 7 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM globalvarsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . globalvarsblock funcsblock main FIN SEMICOLON
    (7) globalvarsblock -> . vars varsblock
    (8) globalvarsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (108) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    globalvarsblock                shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> PROGRAM globalvarsblock . funcsblock main FIN SEMICOLON
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (108) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 108 (empty -> .)

    funcsblock                     shift and go to state 7
    funcs                          shift and go to state 8
    empty                          shift and go to state 9

state 4

    (7) globalvarsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (108) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 12
    empty                          shift and go to state 13

state 5

    (8) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 8 (globalvarsblock -> empty .)
    MAIN            reduce using rule 8 (globalvarsblock -> empty .)


state 6

    (11) vars -> VARDEF . type ID vars1 SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    type                           shift and go to state 14

state 7

    (1) program -> PROGRAM globalvarsblock funcsblock . main FIN SEMICOLON
    (2) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 8

    (4) funcsblock -> funcs . funcsblock
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (108) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 108 (empty -> .)

    funcs                          shift and go to state 8
    funcsblock                     shift and go to state 22
    empty                          shift and go to state 9

state 9

    (5) funcsblock -> empty .

    MAIN            reduce using rule 5 (funcsblock -> empty .)


state 10

    (6) funcs -> FUNCDEF . choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY
    (14) choosetype -> . type
    (15) choosetype -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING

    VOID            shift and go to state 25
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    choosetype                     shift and go to state 23
    type                           shift and go to state 24

state 11

    (9) varsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (108) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CALL            reduce using rule 108 (empty -> .)
    CIN             reduce using rule 108 (empty -> .)
    COUT            reduce using rule 108 (empty -> .)
    DELAY           reduce using rule 108 (empty -> .)
    FORWARD         reduce using rule 108 (empty -> .)
    BACKWARD        reduce using rule 108 (empty -> .)
    TURNLEFT        reduce using rule 108 (empty -> .)
    TURNRIGHT       reduce using rule 108 (empty -> .)
    SERVO           reduce using rule 108 (empty -> .)
    LIGHTS          reduce using rule 108 (empty -> .)
    DISPLAY         reduce using rule 108 (empty -> .)
    DISTANCE        reduce using rule 108 (empty -> .)
    STOP            reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RCURLY          reduce using rule 108 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 26
    empty                          shift and go to state 13

state 12

    (7) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 7 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 7 (globalvarsblock -> vars varsblock .)


state 13

    (10) varsblock -> empty .

    FUNCDEF         reduce using rule 10 (varsblock -> empty .)
    MAIN            reduce using rule 10 (varsblock -> empty .)
    IF              reduce using rule 10 (varsblock -> empty .)
    ID              reduce using rule 10 (varsblock -> empty .)
    CALL            reduce using rule 10 (varsblock -> empty .)
    CIN             reduce using rule 10 (varsblock -> empty .)
    COUT            reduce using rule 10 (varsblock -> empty .)
    DELAY           reduce using rule 10 (varsblock -> empty .)
    FORWARD         reduce using rule 10 (varsblock -> empty .)
    BACKWARD        reduce using rule 10 (varsblock -> empty .)
    TURNLEFT        reduce using rule 10 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 10 (varsblock -> empty .)
    SERVO           reduce using rule 10 (varsblock -> empty .)
    LIGHTS          reduce using rule 10 (varsblock -> empty .)
    DISPLAY         reduce using rule 10 (varsblock -> empty .)
    DISTANCE        reduce using rule 10 (varsblock -> empty .)
    STOP            reduce using rule 10 (varsblock -> empty .)
    RETURN          reduce using rule 10 (varsblock -> empty .)
    RCURLY          reduce using rule 10 (varsblock -> empty .)


state 14

    (11) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 27


state 15

    (71) type -> INT .

    ID              reduce using rule 71 (type -> INT .)


state 16

    (72) type -> FLOAT .

    ID              reduce using rule 72 (type -> FLOAT .)


state 17

    (73) type -> bool .

    ID              reduce using rule 73 (type -> bool .)


state 18

    (74) type -> CHAR .

    ID              reduce using rule 74 (type -> CHAR .)


state 19

    (75) type -> STRING .

    ID              reduce using rule 75 (type -> STRING .)


state 20

    (1) program -> PROGRAM globalvarsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 28


state 21

    (2) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 29


state 22

    (4) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 4 (funcsblock -> funcs funcsblock .)


state 23

    (6) funcs -> FUNCDEF choosetype . ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY

    ID              shift and go to state 30


state 24

    (14) choosetype -> type .

    ID              reduce using rule 14 (choosetype -> type .)


state 25

    (15) choosetype -> VOID .

    ID              reduce using rule 15 (choosetype -> VOID .)


state 26

    (9) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (varsblock -> vars varsblock .)
    IF              reduce using rule 9 (varsblock -> vars varsblock .)
    ID              reduce using rule 9 (varsblock -> vars varsblock .)
    CALL            reduce using rule 9 (varsblock -> vars varsblock .)
    CIN             reduce using rule 9 (varsblock -> vars varsblock .)
    COUT            reduce using rule 9 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 9 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 9 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 9 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 9 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 9 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 9 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 9 (varsblock -> vars varsblock .)
    STOP            reduce using rule 9 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 9 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 9 (varsblock -> vars varsblock .)


state 27

    (11) vars -> VARDEF type ID . vars1 SEMICOLON
    (12) vars1 -> . LBRACKET CTE_INT RBRACKET
    (13) vars1 -> . empty
    (108) empty -> .

    LBRACKET        shift and go to state 32
    SEMICOLON       reduce using rule 108 (empty -> .)

    vars1                          shift and go to state 31
    empty                          shift and go to state 33

state 28

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 34


state 29

    (2) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 35


state 30

    (6) funcs -> FUNCDEF choosetype ID . LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 36


state 31

    (11) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 37


state 32

    (12) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 38


state 33

    (13) vars1 -> empty .

    SEMICOLON       reduce using rule 13 (vars1 -> empty .)


state 34

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .)


state 35

    (2) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 39


state 36

    (6) funcs -> FUNCDEF choosetype ID LPAREN . paramsblock RPAREN LCURLY varsblock block RCURLY
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (108) empty -> .
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 108 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

  ! COMMA           [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! bool            [ reduce using rule 108 (empty -> .) ]
  ! CHAR            [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    paramsblock                    shift and go to state 40
    params                         shift and go to state 41
    empty                          shift and go to state 43
    type                           shift and go to state 44

state 37

    (11) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CALL            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 38

    (12) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 45


state 39

    (2) main -> MAIN LPAREN RPAREN LCURLY . main2
    (3) main2 -> . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (108) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CALL            reduce using rule 108 (empty -> .)
    CIN             reduce using rule 108 (empty -> .)
    COUT            reduce using rule 108 (empty -> .)
    DELAY           reduce using rule 108 (empty -> .)
    FORWARD         reduce using rule 108 (empty -> .)
    BACKWARD        reduce using rule 108 (empty -> .)
    TURNLEFT        reduce using rule 108 (empty -> .)
    TURNRIGHT       reduce using rule 108 (empty -> .)
    SERVO           reduce using rule 108 (empty -> .)
    LIGHTS          reduce using rule 108 (empty -> .)
    DISPLAY         reduce using rule 108 (empty -> .)
    DISTANCE        reduce using rule 108 (empty -> .)
    STOP            reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RCURLY          reduce using rule 108 (empty -> .)

    main2                          shift and go to state 46
    varsblock                      shift and go to state 47
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 40

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 48


state 41

    (16) paramsblock -> params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (108) empty -> .
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 108 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

  ! COMMA           [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! bool            [ reduce using rule 108 (empty -> .) ]
  ! CHAR            [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    params                         shift and go to state 41
    paramsblock                    shift and go to state 49
    empty                          shift and go to state 43
    type                           shift and go to state 44

state 42

    (17) paramsblock -> COMMA . params paramsblock
    (19) params -> . type ID
    (20) params -> . empty
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING
    (108) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    COMMA           reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! bool            [ reduce using rule 108 (empty -> .) ]
  ! CHAR            [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    params                         shift and go to state 50
    type                           shift and go to state 44
    empty                          shift and go to state 51

state 43

    (18) paramsblock -> empty .
    (20) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 18 (paramsblock -> empty .)
    RPAREN          reduce using rule 18 (paramsblock -> empty .)
    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    bool            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    STRING          reduce using rule 20 (params -> empty .)

  ! RPAREN          [ reduce using rule 20 (params -> empty .) ]


state 44

    (19) params -> type . ID

    ID              shift and go to state 52


state 45

    (12) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 12 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 46

    (2) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 2 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 47

    (3) main2 -> varsblock . block RCURLY
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . return
    (108) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 108 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    RETURN          shift and go to state 87

    block                          shift and go to state 53
    statute                        shift and go to state 54
    empty                          shift and go to state 55
    cond                           shift and go to state 56
    assign                         shift and go to state 57
    call                           shift and go to state 58
    cin                            shift and go to state 59
    cout                           shift and go to state 60
    delay                          shift and go to state 61
    forward                        shift and go to state 62
    backward                       shift and go to state 63
    turnleft                       shift and go to state 64
    turnright                      shift and go to state 65
    servo                          shift and go to state 66
    lights                         shift and go to state 67
    display                        shift and go to state 68
    distance                       shift and go to state 69
    stop                           shift and go to state 70
    return                         shift and go to state 71

state 48

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 88


state 49

    (16) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 16 (paramsblock -> params paramsblock .)


state 50

    (17) paramsblock -> COMMA params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (108) empty -> .
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . bool
    (74) type -> . CHAR
    (75) type -> . STRING

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 108 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

  ! COMMA           [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! bool            [ reduce using rule 108 (empty -> .) ]
  ! CHAR            [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    params                         shift and go to state 41
    paramsblock                    shift and go to state 89
    empty                          shift and go to state 43
    type                           shift and go to state 44

state 51

    (20) params -> empty .

    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    bool            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    STRING          reduce using rule 20 (params -> empty .)
    RPAREN          reduce using rule 20 (params -> empty .)


state 52

    (19) params -> type ID .

    COMMA           reduce using rule 19 (params -> type ID .)
    INT             reduce using rule 19 (params -> type ID .)
    FLOAT           reduce using rule 19 (params -> type ID .)
    bool            reduce using rule 19 (params -> type ID .)
    CHAR            reduce using rule 19 (params -> type ID .)
    STRING          reduce using rule 19 (params -> type ID .)
    RPAREN          reduce using rule 19 (params -> type ID .)


state 53

    (3) main2 -> varsblock block . RCURLY

    RCURLY          shift and go to state 90


state 54

    (21) block -> statute . block
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . return
    (108) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 108 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    RETURN          shift and go to state 87

    statute                        shift and go to state 54
    block                          shift and go to state 91
    empty                          shift and go to state 55
    cond                           shift and go to state 56
    assign                         shift and go to state 57
    call                           shift and go to state 58
    cin                            shift and go to state 59
    cout                           shift and go to state 60
    delay                          shift and go to state 61
    forward                        shift and go to state 62
    backward                       shift and go to state 63
    turnleft                       shift and go to state 64
    turnright                      shift and go to state 65
    servo                          shift and go to state 66
    lights                         shift and go to state 67
    display                        shift and go to state 68
    distance                       shift and go to state 69
    stop                           shift and go to state 70
    return                         shift and go to state 71

state 55

    (22) block -> empty .

    RCURLY          reduce using rule 22 (block -> empty .)


state 56

    (23) statute -> cond .

    IF              reduce using rule 23 (statute -> cond .)
    ID              reduce using rule 23 (statute -> cond .)
    CALL            reduce using rule 23 (statute -> cond .)
    CIN             reduce using rule 23 (statute -> cond .)
    COUT            reduce using rule 23 (statute -> cond .)
    DELAY           reduce using rule 23 (statute -> cond .)
    FORWARD         reduce using rule 23 (statute -> cond .)
    BACKWARD        reduce using rule 23 (statute -> cond .)
    TURNLEFT        reduce using rule 23 (statute -> cond .)
    TURNRIGHT       reduce using rule 23 (statute -> cond .)
    SERVO           reduce using rule 23 (statute -> cond .)
    LIGHTS          reduce using rule 23 (statute -> cond .)
    DISPLAY         reduce using rule 23 (statute -> cond .)
    DISTANCE        reduce using rule 23 (statute -> cond .)
    STOP            reduce using rule 23 (statute -> cond .)
    RETURN          reduce using rule 23 (statute -> cond .)
    RCURLY          reduce using rule 23 (statute -> cond .)


state 57

    (24) statute -> assign .

    IF              reduce using rule 24 (statute -> assign .)
    ID              reduce using rule 24 (statute -> assign .)
    CALL            reduce using rule 24 (statute -> assign .)
    CIN             reduce using rule 24 (statute -> assign .)
    COUT            reduce using rule 24 (statute -> assign .)
    DELAY           reduce using rule 24 (statute -> assign .)
    FORWARD         reduce using rule 24 (statute -> assign .)
    BACKWARD        reduce using rule 24 (statute -> assign .)
    TURNLEFT        reduce using rule 24 (statute -> assign .)
    TURNRIGHT       reduce using rule 24 (statute -> assign .)
    SERVO           reduce using rule 24 (statute -> assign .)
    LIGHTS          reduce using rule 24 (statute -> assign .)
    DISPLAY         reduce using rule 24 (statute -> assign .)
    DISTANCE        reduce using rule 24 (statute -> assign .)
    STOP            reduce using rule 24 (statute -> assign .)
    RETURN          reduce using rule 24 (statute -> assign .)
    RCURLY          reduce using rule 24 (statute -> assign .)


state 58

    (25) statute -> call .

    IF              reduce using rule 25 (statute -> call .)
    ID              reduce using rule 25 (statute -> call .)
    CALL            reduce using rule 25 (statute -> call .)
    CIN             reduce using rule 25 (statute -> call .)
    COUT            reduce using rule 25 (statute -> call .)
    DELAY           reduce using rule 25 (statute -> call .)
    FORWARD         reduce using rule 25 (statute -> call .)
    BACKWARD        reduce using rule 25 (statute -> call .)
    TURNLEFT        reduce using rule 25 (statute -> call .)
    TURNRIGHT       reduce using rule 25 (statute -> call .)
    SERVO           reduce using rule 25 (statute -> call .)
    LIGHTS          reduce using rule 25 (statute -> call .)
    DISPLAY         reduce using rule 25 (statute -> call .)
    DISTANCE        reduce using rule 25 (statute -> call .)
    STOP            reduce using rule 25 (statute -> call .)
    RETURN          reduce using rule 25 (statute -> call .)
    RCURLY          reduce using rule 25 (statute -> call .)


state 59

    (26) statute -> cin .

    IF              reduce using rule 26 (statute -> cin .)
    ID              reduce using rule 26 (statute -> cin .)
    CALL            reduce using rule 26 (statute -> cin .)
    CIN             reduce using rule 26 (statute -> cin .)
    COUT            reduce using rule 26 (statute -> cin .)
    DELAY           reduce using rule 26 (statute -> cin .)
    FORWARD         reduce using rule 26 (statute -> cin .)
    BACKWARD        reduce using rule 26 (statute -> cin .)
    TURNLEFT        reduce using rule 26 (statute -> cin .)
    TURNRIGHT       reduce using rule 26 (statute -> cin .)
    SERVO           reduce using rule 26 (statute -> cin .)
    LIGHTS          reduce using rule 26 (statute -> cin .)
    DISPLAY         reduce using rule 26 (statute -> cin .)
    DISTANCE        reduce using rule 26 (statute -> cin .)
    STOP            reduce using rule 26 (statute -> cin .)
    RETURN          reduce using rule 26 (statute -> cin .)
    RCURLY          reduce using rule 26 (statute -> cin .)


state 60

    (27) statute -> cout .

    IF              reduce using rule 27 (statute -> cout .)
    ID              reduce using rule 27 (statute -> cout .)
    CALL            reduce using rule 27 (statute -> cout .)
    CIN             reduce using rule 27 (statute -> cout .)
    COUT            reduce using rule 27 (statute -> cout .)
    DELAY           reduce using rule 27 (statute -> cout .)
    FORWARD         reduce using rule 27 (statute -> cout .)
    BACKWARD        reduce using rule 27 (statute -> cout .)
    TURNLEFT        reduce using rule 27 (statute -> cout .)
    TURNRIGHT       reduce using rule 27 (statute -> cout .)
    SERVO           reduce using rule 27 (statute -> cout .)
    LIGHTS          reduce using rule 27 (statute -> cout .)
    DISPLAY         reduce using rule 27 (statute -> cout .)
    DISTANCE        reduce using rule 27 (statute -> cout .)
    STOP            reduce using rule 27 (statute -> cout .)
    RETURN          reduce using rule 27 (statute -> cout .)
    RCURLY          reduce using rule 27 (statute -> cout .)


state 61

    (28) statute -> delay .

    IF              reduce using rule 28 (statute -> delay .)
    ID              reduce using rule 28 (statute -> delay .)
    CALL            reduce using rule 28 (statute -> delay .)
    CIN             reduce using rule 28 (statute -> delay .)
    COUT            reduce using rule 28 (statute -> delay .)
    DELAY           reduce using rule 28 (statute -> delay .)
    FORWARD         reduce using rule 28 (statute -> delay .)
    BACKWARD        reduce using rule 28 (statute -> delay .)
    TURNLEFT        reduce using rule 28 (statute -> delay .)
    TURNRIGHT       reduce using rule 28 (statute -> delay .)
    SERVO           reduce using rule 28 (statute -> delay .)
    LIGHTS          reduce using rule 28 (statute -> delay .)
    DISPLAY         reduce using rule 28 (statute -> delay .)
    DISTANCE        reduce using rule 28 (statute -> delay .)
    STOP            reduce using rule 28 (statute -> delay .)
    RETURN          reduce using rule 28 (statute -> delay .)
    RCURLY          reduce using rule 28 (statute -> delay .)


state 62

    (29) statute -> forward .

    IF              reduce using rule 29 (statute -> forward .)
    ID              reduce using rule 29 (statute -> forward .)
    CALL            reduce using rule 29 (statute -> forward .)
    CIN             reduce using rule 29 (statute -> forward .)
    COUT            reduce using rule 29 (statute -> forward .)
    DELAY           reduce using rule 29 (statute -> forward .)
    FORWARD         reduce using rule 29 (statute -> forward .)
    BACKWARD        reduce using rule 29 (statute -> forward .)
    TURNLEFT        reduce using rule 29 (statute -> forward .)
    TURNRIGHT       reduce using rule 29 (statute -> forward .)
    SERVO           reduce using rule 29 (statute -> forward .)
    LIGHTS          reduce using rule 29 (statute -> forward .)
    DISPLAY         reduce using rule 29 (statute -> forward .)
    DISTANCE        reduce using rule 29 (statute -> forward .)
    STOP            reduce using rule 29 (statute -> forward .)
    RETURN          reduce using rule 29 (statute -> forward .)
    RCURLY          reduce using rule 29 (statute -> forward .)


state 63

    (30) statute -> backward .

    IF              reduce using rule 30 (statute -> backward .)
    ID              reduce using rule 30 (statute -> backward .)
    CALL            reduce using rule 30 (statute -> backward .)
    CIN             reduce using rule 30 (statute -> backward .)
    COUT            reduce using rule 30 (statute -> backward .)
    DELAY           reduce using rule 30 (statute -> backward .)
    FORWARD         reduce using rule 30 (statute -> backward .)
    BACKWARD        reduce using rule 30 (statute -> backward .)
    TURNLEFT        reduce using rule 30 (statute -> backward .)
    TURNRIGHT       reduce using rule 30 (statute -> backward .)
    SERVO           reduce using rule 30 (statute -> backward .)
    LIGHTS          reduce using rule 30 (statute -> backward .)
    DISPLAY         reduce using rule 30 (statute -> backward .)
    DISTANCE        reduce using rule 30 (statute -> backward .)
    STOP            reduce using rule 30 (statute -> backward .)
    RETURN          reduce using rule 30 (statute -> backward .)
    RCURLY          reduce using rule 30 (statute -> backward .)


state 64

    (31) statute -> turnleft .

    IF              reduce using rule 31 (statute -> turnleft .)
    ID              reduce using rule 31 (statute -> turnleft .)
    CALL            reduce using rule 31 (statute -> turnleft .)
    CIN             reduce using rule 31 (statute -> turnleft .)
    COUT            reduce using rule 31 (statute -> turnleft .)
    DELAY           reduce using rule 31 (statute -> turnleft .)
    FORWARD         reduce using rule 31 (statute -> turnleft .)
    BACKWARD        reduce using rule 31 (statute -> turnleft .)
    TURNLEFT        reduce using rule 31 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 31 (statute -> turnleft .)
    SERVO           reduce using rule 31 (statute -> turnleft .)
    LIGHTS          reduce using rule 31 (statute -> turnleft .)
    DISPLAY         reduce using rule 31 (statute -> turnleft .)
    DISTANCE        reduce using rule 31 (statute -> turnleft .)
    STOP            reduce using rule 31 (statute -> turnleft .)
    RETURN          reduce using rule 31 (statute -> turnleft .)
    RCURLY          reduce using rule 31 (statute -> turnleft .)


state 65

    (32) statute -> turnright .

    IF              reduce using rule 32 (statute -> turnright .)
    ID              reduce using rule 32 (statute -> turnright .)
    CALL            reduce using rule 32 (statute -> turnright .)
    CIN             reduce using rule 32 (statute -> turnright .)
    COUT            reduce using rule 32 (statute -> turnright .)
    DELAY           reduce using rule 32 (statute -> turnright .)
    FORWARD         reduce using rule 32 (statute -> turnright .)
    BACKWARD        reduce using rule 32 (statute -> turnright .)
    TURNLEFT        reduce using rule 32 (statute -> turnright .)
    TURNRIGHT       reduce using rule 32 (statute -> turnright .)
    SERVO           reduce using rule 32 (statute -> turnright .)
    LIGHTS          reduce using rule 32 (statute -> turnright .)
    DISPLAY         reduce using rule 32 (statute -> turnright .)
    DISTANCE        reduce using rule 32 (statute -> turnright .)
    STOP            reduce using rule 32 (statute -> turnright .)
    RETURN          reduce using rule 32 (statute -> turnright .)
    RCURLY          reduce using rule 32 (statute -> turnright .)


state 66

    (33) statute -> servo .

    IF              reduce using rule 33 (statute -> servo .)
    ID              reduce using rule 33 (statute -> servo .)
    CALL            reduce using rule 33 (statute -> servo .)
    CIN             reduce using rule 33 (statute -> servo .)
    COUT            reduce using rule 33 (statute -> servo .)
    DELAY           reduce using rule 33 (statute -> servo .)
    FORWARD         reduce using rule 33 (statute -> servo .)
    BACKWARD        reduce using rule 33 (statute -> servo .)
    TURNLEFT        reduce using rule 33 (statute -> servo .)
    TURNRIGHT       reduce using rule 33 (statute -> servo .)
    SERVO           reduce using rule 33 (statute -> servo .)
    LIGHTS          reduce using rule 33 (statute -> servo .)
    DISPLAY         reduce using rule 33 (statute -> servo .)
    DISTANCE        reduce using rule 33 (statute -> servo .)
    STOP            reduce using rule 33 (statute -> servo .)
    RETURN          reduce using rule 33 (statute -> servo .)
    RCURLY          reduce using rule 33 (statute -> servo .)


state 67

    (34) statute -> lights .

    IF              reduce using rule 34 (statute -> lights .)
    ID              reduce using rule 34 (statute -> lights .)
    CALL            reduce using rule 34 (statute -> lights .)
    CIN             reduce using rule 34 (statute -> lights .)
    COUT            reduce using rule 34 (statute -> lights .)
    DELAY           reduce using rule 34 (statute -> lights .)
    FORWARD         reduce using rule 34 (statute -> lights .)
    BACKWARD        reduce using rule 34 (statute -> lights .)
    TURNLEFT        reduce using rule 34 (statute -> lights .)
    TURNRIGHT       reduce using rule 34 (statute -> lights .)
    SERVO           reduce using rule 34 (statute -> lights .)
    LIGHTS          reduce using rule 34 (statute -> lights .)
    DISPLAY         reduce using rule 34 (statute -> lights .)
    DISTANCE        reduce using rule 34 (statute -> lights .)
    STOP            reduce using rule 34 (statute -> lights .)
    RETURN          reduce using rule 34 (statute -> lights .)
    RCURLY          reduce using rule 34 (statute -> lights .)


state 68

    (35) statute -> display .

    IF              reduce using rule 35 (statute -> display .)
    ID              reduce using rule 35 (statute -> display .)
    CALL            reduce using rule 35 (statute -> display .)
    CIN             reduce using rule 35 (statute -> display .)
    COUT            reduce using rule 35 (statute -> display .)
    DELAY           reduce using rule 35 (statute -> display .)
    FORWARD         reduce using rule 35 (statute -> display .)
    BACKWARD        reduce using rule 35 (statute -> display .)
    TURNLEFT        reduce using rule 35 (statute -> display .)
    TURNRIGHT       reduce using rule 35 (statute -> display .)
    SERVO           reduce using rule 35 (statute -> display .)
    LIGHTS          reduce using rule 35 (statute -> display .)
    DISPLAY         reduce using rule 35 (statute -> display .)
    DISTANCE        reduce using rule 35 (statute -> display .)
    STOP            reduce using rule 35 (statute -> display .)
    RETURN          reduce using rule 35 (statute -> display .)
    RCURLY          reduce using rule 35 (statute -> display .)


state 69

    (36) statute -> distance .

    IF              reduce using rule 36 (statute -> distance .)
    ID              reduce using rule 36 (statute -> distance .)
    CALL            reduce using rule 36 (statute -> distance .)
    CIN             reduce using rule 36 (statute -> distance .)
    COUT            reduce using rule 36 (statute -> distance .)
    DELAY           reduce using rule 36 (statute -> distance .)
    FORWARD         reduce using rule 36 (statute -> distance .)
    BACKWARD        reduce using rule 36 (statute -> distance .)
    TURNLEFT        reduce using rule 36 (statute -> distance .)
    TURNRIGHT       reduce using rule 36 (statute -> distance .)
    SERVO           reduce using rule 36 (statute -> distance .)
    LIGHTS          reduce using rule 36 (statute -> distance .)
    DISPLAY         reduce using rule 36 (statute -> distance .)
    DISTANCE        reduce using rule 36 (statute -> distance .)
    STOP            reduce using rule 36 (statute -> distance .)
    RETURN          reduce using rule 36 (statute -> distance .)
    RCURLY          reduce using rule 36 (statute -> distance .)


state 70

    (37) statute -> stop .

    IF              reduce using rule 37 (statute -> stop .)
    ID              reduce using rule 37 (statute -> stop .)
    CALL            reduce using rule 37 (statute -> stop .)
    CIN             reduce using rule 37 (statute -> stop .)
    COUT            reduce using rule 37 (statute -> stop .)
    DELAY           reduce using rule 37 (statute -> stop .)
    FORWARD         reduce using rule 37 (statute -> stop .)
    BACKWARD        reduce using rule 37 (statute -> stop .)
    TURNLEFT        reduce using rule 37 (statute -> stop .)
    TURNRIGHT       reduce using rule 37 (statute -> stop .)
    SERVO           reduce using rule 37 (statute -> stop .)
    LIGHTS          reduce using rule 37 (statute -> stop .)
    DISPLAY         reduce using rule 37 (statute -> stop .)
    DISTANCE        reduce using rule 37 (statute -> stop .)
    STOP            reduce using rule 37 (statute -> stop .)
    RETURN          reduce using rule 37 (statute -> stop .)
    RCURLY          reduce using rule 37 (statute -> stop .)


state 71

    (38) statute -> return .

    IF              reduce using rule 38 (statute -> return .)
    ID              reduce using rule 38 (statute -> return .)
    CALL            reduce using rule 38 (statute -> return .)
    CIN             reduce using rule 38 (statute -> return .)
    COUT            reduce using rule 38 (statute -> return .)
    DELAY           reduce using rule 38 (statute -> return .)
    FORWARD         reduce using rule 38 (statute -> return .)
    BACKWARD        reduce using rule 38 (statute -> return .)
    TURNLEFT        reduce using rule 38 (statute -> return .)
    TURNRIGHT       reduce using rule 38 (statute -> return .)
    SERVO           reduce using rule 38 (statute -> return .)
    LIGHTS          reduce using rule 38 (statute -> return .)
    DISPLAY         reduce using rule 38 (statute -> return .)
    DISTANCE        reduce using rule 38 (statute -> return .)
    STOP            reduce using rule 38 (statute -> return .)
    RETURN          reduce using rule 38 (statute -> return .)
    RCURLY          reduce using rule 38 (statute -> return .)


state 72

    (39) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 92


state 73

    (44) assign -> ID . assign1 ASSIGN express SEMICOLON
    (45) assign1 -> . LBRACKET express RBRACKET
    (46) assign1 -> . empty
    (108) empty -> .

    LBRACKET        shift and go to state 94
    ASSIGN          reduce using rule 108 (empty -> .)

    assign1                        shift and go to state 93
    empty                          shift and go to state 95

state 74

    (47) call -> CALL . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 96


state 75

    (52) cin -> CIN . cin1 SEMICOLON
    (53) cin1 -> . cin2
    (54) cin1 -> . cin3
    (55) cin2 -> . LPAREN ID RPAREN
    (56) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 100
    LBRACKET        shift and go to state 101

    cin1                           shift and go to state 97
    cin2                           shift and go to state 98
    cin3                           shift and go to state 99

state 76

    (59) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 102


state 77

    (60) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 103


state 78

    (61) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 104


state 79

    (62) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 80

    (63) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 81

    (64) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 82

    (65) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 108


state 83

    (66) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 84

    (67) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 110


state 85

    (68) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 86

    (69) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 87

    (70) return -> RETURN . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 88

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (108) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CALL            reduce using rule 108 (empty -> .)
    CIN             reduce using rule 108 (empty -> .)
    COUT            reduce using rule 108 (empty -> .)
    DELAY           reduce using rule 108 (empty -> .)
    FORWARD         reduce using rule 108 (empty -> .)
    BACKWARD        reduce using rule 108 (empty -> .)
    TURNLEFT        reduce using rule 108 (empty -> .)
    TURNRIGHT       reduce using rule 108 (empty -> .)
    SERVO           reduce using rule 108 (empty -> .)
    LIGHTS          reduce using rule 108 (empty -> .)
    DISPLAY         reduce using rule 108 (empty -> .)
    DISTANCE        reduce using rule 108 (empty -> .)
    STOP            reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RCURLY          reduce using rule 108 (empty -> .)

    varsblock                      shift and go to state 114
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 89

    (17) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 17 (paramsblock -> COMMA params paramsblock .)


state 90

    (3) main2 -> varsblock block RCURLY .

    FIN             reduce using rule 3 (main2 -> varsblock block RCURLY .)


state 91

    (21) block -> statute block .

    RCURLY          reduce using rule 21 (block -> statute block .)


state 92

    (39) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 115
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 93

    (44) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 119


state 94

    (45) assign1 -> LBRACKET . express RBRACKET
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 120
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 95

    (46) assign1 -> empty .

    ASSIGN          reduce using rule 46 (assign1 -> empty .)


state 96

    (47) call -> CALL ID . LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 121


state 97

    (52) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 122


state 98

    (53) cin1 -> cin2 .

    SEMICOLON       reduce using rule 53 (cin1 -> cin2 .)


state 99

    (54) cin1 -> cin3 .

    SEMICOLON       reduce using rule 54 (cin1 -> cin3 .)


state 100

    (55) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 123


state 101

    (56) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 124


state 102

    (59) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 125
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 103

    (60) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 126


state 104

    (61) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 127
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 105

    (62) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 128
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 106

    (63) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 129
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 107

    (64) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 130
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 108

    (65) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 131
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 109

    (66) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 132


state 110

    (67) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 133


state 111

    (68) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 134


state 112

    (69) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 135


state 113

    (70) return -> RETURN LPAREN . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 136
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 114

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock . block RCURLY
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . return
    (108) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 108 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    RETURN          shift and go to state 87

    block                          shift and go to state 137
    statute                        shift and go to state 54
    empty                          shift and go to state 55
    cond                           shift and go to state 56
    assign                         shift and go to state 57
    call                           shift and go to state 58
    cin                            shift and go to state 59
    cout                           shift and go to state 60
    delay                          shift and go to state 61
    forward                        shift and go to state 62
    backward                       shift and go to state 63
    turnleft                       shift and go to state 64
    turnright                      shift and go to state 65
    servo                          shift and go to state 66
    lights                         shift and go to state 67
    display                        shift and go to state 68
    distance                       shift and go to state 69
    stop                           shift and go to state 70
    return                         shift and go to state 71

state 115

    (39) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 138


state 116

    (81) express -> express1 . relational express2
    (88) relational -> . exp relational1
    (89) relational -> . NOT
    (96) exp -> . term exp1
    (101) term -> . factor term1
    (106) factor -> . LPAREN express RPAREN
    (107) factor -> . constant
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    NOT             shift and go to state 141
    LPAREN          shift and go to state 144
    ID              shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 149
    CTE_CHAR        shift and go to state 150

    relational                     shift and go to state 139
    exp                            shift and go to state 140
    term                           shift and go to state 142
    factor                         shift and go to state 143
    constant                       shift and go to state 145

state 117

    (82) express1 -> NOTEQUALS .

    NOT             reduce using rule 82 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 82 (express1 -> NOTEQUALS .)
    ID              reduce using rule 82 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 82 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 82 (express1 -> NOTEQUALS .)
    CTE_STRING      reduce using rule 82 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 82 (express1 -> NOTEQUALS .)


state 118

    (83) express1 -> empty .

    NOT             reduce using rule 83 (express1 -> empty .)
    LPAREN          reduce using rule 83 (express1 -> empty .)
    ID              reduce using rule 83 (express1 -> empty .)
    CTE_INT         reduce using rule 83 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 83 (express1 -> empty .)
    CTE_STRING      reduce using rule 83 (express1 -> empty .)
    CTE_CHAR        reduce using rule 83 (express1 -> empty .)


state 119

    (44) assign -> ID assign1 ASSIGN . express SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 151
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 120

    (45) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 152


state 121

    (47) call -> CALL ID LPAREN . call1 RPAREN SEMICOLON
    (48) call1 -> . express call2
    (49) call1 -> . empty
    (81) express -> . express1 relational express2
    (108) empty -> .
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty

    RPAREN          reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)
    NOTEQUALS       shift and go to state 117

    call1                          shift and go to state 153
    express                        shift and go to state 154
    empty                          shift and go to state 155
    express1                       shift and go to state 116

state 122

    (52) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    CALL            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)


state 123

    (55) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 156


state 124

    (56) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 157


state 125

    (59) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 158


state 126

    (60) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 159


state 127

    (61) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 160


state 128

    (62) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 161


state 129

    (63) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 162


state 130

    (64) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 163


state 131

    (65) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 164


state 132

    (66) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 165


state 133

    (67) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 134

    (68) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 135

    (69) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 168


state 136

    (70) return -> RETURN LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 169


state 137

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 170


state 138

    (39) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 171


state 139

    (81) express -> express1 relational . express2
    (84) express2 -> . andor express
    (85) express2 -> . empty
    (86) andor -> . AND
    (87) andor -> . OR
    (108) empty -> .

    AND             shift and go to state 175
    OR              shift and go to state 176
    RPAREN          reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)

    express2                       shift and go to state 172
    andor                          shift and go to state 173
    empty                          shift and go to state 174

state 140

    (88) relational -> exp . relational1
    (90) relational1 -> . compare exp
    (91) relational1 -> . empty
    (92) compare -> . LESSTHAN
    (93) compare -> . GREATERTHAN
    (94) compare -> . EQUALS
    (95) compare -> . NOTEQUALS
    (108) empty -> .

    LESSTHAN        shift and go to state 180
    GREATERTHAN     shift and go to state 181
    EQUALS          shift and go to state 182
    NOTEQUALS       shift and go to state 183
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)

    relational1                    shift and go to state 177
    compare                        shift and go to state 178
    empty                          shift and go to state 179

state 141

    (89) relational -> NOT .

    AND             reduce using rule 89 (relational -> NOT .)
    OR              reduce using rule 89 (relational -> NOT .)
    RPAREN          reduce using rule 89 (relational -> NOT .)
    RBRACKET        reduce using rule 89 (relational -> NOT .)
    COMMA           reduce using rule 89 (relational -> NOT .)
    SEMICOLON       reduce using rule 89 (relational -> NOT .)


state 142

    (96) exp -> term . exp1
    (97) exp1 -> . plusminus exp
    (98) exp1 -> . empty
    (99) plusminus -> . PLUS
    (100) plusminus -> . MINUS
    (108) empty -> .

    PLUS            shift and go to state 187
    MINUS           shift and go to state 188
    LESSTHAN        reduce using rule 108 (empty -> .)
    GREATERTHAN     reduce using rule 108 (empty -> .)
    EQUALS          reduce using rule 108 (empty -> .)
    NOTEQUALS       reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)

    exp1                           shift and go to state 184
    plusminus                      shift and go to state 185
    empty                          shift and go to state 186

state 143

    (101) term -> factor . term1
    (102) term1 -> . multidivi term
    (103) term1 -> . empty
    (104) multidivi -> . MULTI
    (105) multidivi -> . DIVI
    (108) empty -> .

    MULTI           shift and go to state 192
    DIVI            shift and go to state 193
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LESSTHAN        reduce using rule 108 (empty -> .)
    GREATERTHAN     reduce using rule 108 (empty -> .)
    EQUALS          reduce using rule 108 (empty -> .)
    NOTEQUALS       reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)

    term1                          shift and go to state 189
    multidivi                      shift and go to state 190
    empty                          shift and go to state 191

state 144

    (106) factor -> LPAREN . express RPAREN
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 194
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 145

    (107) factor -> constant .

    MULTI           reduce using rule 107 (factor -> constant .)
    DIVI            reduce using rule 107 (factor -> constant .)
    PLUS            reduce using rule 107 (factor -> constant .)
    MINUS           reduce using rule 107 (factor -> constant .)
    LESSTHAN        reduce using rule 107 (factor -> constant .)
    GREATERTHAN     reduce using rule 107 (factor -> constant .)
    EQUALS          reduce using rule 107 (factor -> constant .)
    NOTEQUALS       reduce using rule 107 (factor -> constant .)
    AND             reduce using rule 107 (factor -> constant .)
    OR              reduce using rule 107 (factor -> constant .)
    RPAREN          reduce using rule 107 (factor -> constant .)
    RBRACKET        reduce using rule 107 (factor -> constant .)
    COMMA           reduce using rule 107 (factor -> constant .)
    SEMICOLON       reduce using rule 107 (factor -> constant .)


state 146

    (76) constant -> ID .

    MULTI           reduce using rule 76 (constant -> ID .)
    DIVI            reduce using rule 76 (constant -> ID .)
    PLUS            reduce using rule 76 (constant -> ID .)
    MINUS           reduce using rule 76 (constant -> ID .)
    LESSTHAN        reduce using rule 76 (constant -> ID .)
    GREATERTHAN     reduce using rule 76 (constant -> ID .)
    EQUALS          reduce using rule 76 (constant -> ID .)
    NOTEQUALS       reduce using rule 76 (constant -> ID .)
    AND             reduce using rule 76 (constant -> ID .)
    OR              reduce using rule 76 (constant -> ID .)
    RPAREN          reduce using rule 76 (constant -> ID .)
    RBRACKET        reduce using rule 76 (constant -> ID .)
    COMMA           reduce using rule 76 (constant -> ID .)
    SEMICOLON       reduce using rule 76 (constant -> ID .)


state 147

    (77) constant -> CTE_INT .

    MULTI           reduce using rule 77 (constant -> CTE_INT .)
    DIVI            reduce using rule 77 (constant -> CTE_INT .)
    PLUS            reduce using rule 77 (constant -> CTE_INT .)
    MINUS           reduce using rule 77 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 77 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 77 (constant -> CTE_INT .)
    EQUALS          reduce using rule 77 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 77 (constant -> CTE_INT .)
    AND             reduce using rule 77 (constant -> CTE_INT .)
    OR              reduce using rule 77 (constant -> CTE_INT .)
    RPAREN          reduce using rule 77 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 77 (constant -> CTE_INT .)
    COMMA           reduce using rule 77 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 77 (constant -> CTE_INT .)


state 148

    (78) constant -> CTE_FLOAT .

    MULTI           reduce using rule 78 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 78 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 78 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 78 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 78 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 78 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 78 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 78 (constant -> CTE_FLOAT .)
    AND             reduce using rule 78 (constant -> CTE_FLOAT .)
    OR              reduce using rule 78 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 78 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 78 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 78 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 78 (constant -> CTE_FLOAT .)


state 149

    (79) constant -> CTE_STRING .

    MULTI           reduce using rule 79 (constant -> CTE_STRING .)
    DIVI            reduce using rule 79 (constant -> CTE_STRING .)
    PLUS            reduce using rule 79 (constant -> CTE_STRING .)
    MINUS           reduce using rule 79 (constant -> CTE_STRING .)
    LESSTHAN        reduce using rule 79 (constant -> CTE_STRING .)
    GREATERTHAN     reduce using rule 79 (constant -> CTE_STRING .)
    EQUALS          reduce using rule 79 (constant -> CTE_STRING .)
    NOTEQUALS       reduce using rule 79 (constant -> CTE_STRING .)
    AND             reduce using rule 79 (constant -> CTE_STRING .)
    OR              reduce using rule 79 (constant -> CTE_STRING .)
    RPAREN          reduce using rule 79 (constant -> CTE_STRING .)
    RBRACKET        reduce using rule 79 (constant -> CTE_STRING .)
    COMMA           reduce using rule 79 (constant -> CTE_STRING .)
    SEMICOLON       reduce using rule 79 (constant -> CTE_STRING .)


state 150

    (80) constant -> CTE_CHAR .

    MULTI           reduce using rule 80 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 80 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 80 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 80 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 80 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 80 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 80 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 80 (constant -> CTE_CHAR .)
    AND             reduce using rule 80 (constant -> CTE_CHAR .)
    OR              reduce using rule 80 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 80 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 80 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 80 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 80 (constant -> CTE_CHAR .)


state 151

    (44) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 195


state 152

    (45) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 45 (assign1 -> LBRACKET express RBRACKET .)


state 153

    (47) call -> CALL ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 196


state 154

    (48) call1 -> express . call2
    (50) call2 -> . COMMA call1
    (51) call2 -> . empty
    (108) empty -> .

    COMMA           shift and go to state 198
    RPAREN          reduce using rule 108 (empty -> .)

    call2                          shift and go to state 197
    empty                          shift and go to state 199

state 155

    (49) call1 -> empty .
    (83) express1 -> empty .

    RPAREN          reduce using rule 49 (call1 -> empty .)
    NOT             reduce using rule 83 (express1 -> empty .)
    LPAREN          reduce using rule 83 (express1 -> empty .)
    ID              reduce using rule 83 (express1 -> empty .)
    CTE_INT         reduce using rule 83 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 83 (express1 -> empty .)
    CTE_STRING      reduce using rule 83 (express1 -> empty .)
    CTE_CHAR        reduce using rule 83 (express1 -> empty .)


state 156

    (55) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 55 (cin2 -> LPAREN ID RPAREN .)


state 157

    (56) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 200


state 158

    (59) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 201


state 159

    (60) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 202


state 160

    (61) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 203
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 161

    (62) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 204
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 162

    (63) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 205
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 163

    (64) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 206
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 164

    (65) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 207


state 165

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 208


state 166

    (67) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 167

    (68) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 168

    (69) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 169

    (70) return -> RETURN LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 170

    (6) funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .

    FUNCDEF         reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .)
    MAIN            reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN paramsblock RPAREN LCURLY varsblock block RCURLY .)


state 171

    (39) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (40) gotoif -> . empty
    (108) empty -> .

    IF              reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CALL            reduce using rule 108 (empty -> .)
    CIN             reduce using rule 108 (empty -> .)
    COUT            reduce using rule 108 (empty -> .)
    DELAY           reduce using rule 108 (empty -> .)
    FORWARD         reduce using rule 108 (empty -> .)
    BACKWARD        reduce using rule 108 (empty -> .)
    TURNLEFT        reduce using rule 108 (empty -> .)
    TURNRIGHT       reduce using rule 108 (empty -> .)
    SERVO           reduce using rule 108 (empty -> .)
    LIGHTS          reduce using rule 108 (empty -> .)
    DISPLAY         reduce using rule 108 (empty -> .)
    DISTANCE        reduce using rule 108 (empty -> .)
    STOP            reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RCURLY          reduce using rule 108 (empty -> .)

    gotoif                         shift and go to state 211
    empty                          shift and go to state 212

state 172

    (81) express -> express1 relational express2 .

    RPAREN          reduce using rule 81 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 81 (express -> express1 relational express2 .)
    COMMA           reduce using rule 81 (express -> express1 relational express2 .)
    SEMICOLON       reduce using rule 81 (express -> express1 relational express2 .)


state 173

    (84) express2 -> andor . express
    (81) express -> . express1 relational express2
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty
    (108) empty -> .

    NOTEQUALS       shift and go to state 117
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)

    express                        shift and go to state 213
    express1                       shift and go to state 116
    empty                          shift and go to state 118

state 174

    (85) express2 -> empty .

    RPAREN          reduce using rule 85 (express2 -> empty .)
    RBRACKET        reduce using rule 85 (express2 -> empty .)
    COMMA           reduce using rule 85 (express2 -> empty .)
    SEMICOLON       reduce using rule 85 (express2 -> empty .)


state 175

    (86) andor -> AND .

    NOTEQUALS       reduce using rule 86 (andor -> AND .)
    NOT             reduce using rule 86 (andor -> AND .)
    LPAREN          reduce using rule 86 (andor -> AND .)
    ID              reduce using rule 86 (andor -> AND .)
    CTE_INT         reduce using rule 86 (andor -> AND .)
    CTE_FLOAT       reduce using rule 86 (andor -> AND .)
    CTE_STRING      reduce using rule 86 (andor -> AND .)
    CTE_CHAR        reduce using rule 86 (andor -> AND .)


state 176

    (87) andor -> OR .

    NOTEQUALS       reduce using rule 87 (andor -> OR .)
    NOT             reduce using rule 87 (andor -> OR .)
    LPAREN          reduce using rule 87 (andor -> OR .)
    ID              reduce using rule 87 (andor -> OR .)
    CTE_INT         reduce using rule 87 (andor -> OR .)
    CTE_FLOAT       reduce using rule 87 (andor -> OR .)
    CTE_STRING      reduce using rule 87 (andor -> OR .)
    CTE_CHAR        reduce using rule 87 (andor -> OR .)


state 177

    (88) relational -> exp relational1 .

    AND             reduce using rule 88 (relational -> exp relational1 .)
    OR              reduce using rule 88 (relational -> exp relational1 .)
    RPAREN          reduce using rule 88 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 88 (relational -> exp relational1 .)
    COMMA           reduce using rule 88 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 88 (relational -> exp relational1 .)


state 178

    (90) relational1 -> compare . exp
    (96) exp -> . term exp1
    (101) term -> . factor term1
    (106) factor -> . LPAREN express RPAREN
    (107) factor -> . constant
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    LPAREN          shift and go to state 144
    ID              shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 149
    CTE_CHAR        shift and go to state 150

    exp                            shift and go to state 214
    term                           shift and go to state 142
    factor                         shift and go to state 143
    constant                       shift and go to state 145

state 179

    (91) relational1 -> empty .

    AND             reduce using rule 91 (relational1 -> empty .)
    OR              reduce using rule 91 (relational1 -> empty .)
    RPAREN          reduce using rule 91 (relational1 -> empty .)
    RBRACKET        reduce using rule 91 (relational1 -> empty .)
    COMMA           reduce using rule 91 (relational1 -> empty .)
    SEMICOLON       reduce using rule 91 (relational1 -> empty .)


state 180

    (92) compare -> LESSTHAN .

    LPAREN          reduce using rule 92 (compare -> LESSTHAN .)
    ID              reduce using rule 92 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 92 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 92 (compare -> LESSTHAN .)
    CTE_STRING      reduce using rule 92 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 92 (compare -> LESSTHAN .)


state 181

    (93) compare -> GREATERTHAN .

    LPAREN          reduce using rule 93 (compare -> GREATERTHAN .)
    ID              reduce using rule 93 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 93 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 93 (compare -> GREATERTHAN .)
    CTE_STRING      reduce using rule 93 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 93 (compare -> GREATERTHAN .)


state 182

    (94) compare -> EQUALS .

    LPAREN          reduce using rule 94 (compare -> EQUALS .)
    ID              reduce using rule 94 (compare -> EQUALS .)
    CTE_INT         reduce using rule 94 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 94 (compare -> EQUALS .)
    CTE_STRING      reduce using rule 94 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 94 (compare -> EQUALS .)


state 183

    (95) compare -> NOTEQUALS .

    LPAREN          reduce using rule 95 (compare -> NOTEQUALS .)
    ID              reduce using rule 95 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 95 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 95 (compare -> NOTEQUALS .)
    CTE_STRING      reduce using rule 95 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 95 (compare -> NOTEQUALS .)


state 184

    (96) exp -> term exp1 .

    LESSTHAN        reduce using rule 96 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 96 (exp -> term exp1 .)
    EQUALS          reduce using rule 96 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 96 (exp -> term exp1 .)
    AND             reduce using rule 96 (exp -> term exp1 .)
    OR              reduce using rule 96 (exp -> term exp1 .)
    RPAREN          reduce using rule 96 (exp -> term exp1 .)
    RBRACKET        reduce using rule 96 (exp -> term exp1 .)
    COMMA           reduce using rule 96 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 96 (exp -> term exp1 .)


state 185

    (97) exp1 -> plusminus . exp
    (96) exp -> . term exp1
    (101) term -> . factor term1
    (106) factor -> . LPAREN express RPAREN
    (107) factor -> . constant
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    LPAREN          shift and go to state 144
    ID              shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 149
    CTE_CHAR        shift and go to state 150

    exp                            shift and go to state 215
    term                           shift and go to state 142
    factor                         shift and go to state 143
    constant                       shift and go to state 145

state 186

    (98) exp1 -> empty .

    LESSTHAN        reduce using rule 98 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 98 (exp1 -> empty .)
    EQUALS          reduce using rule 98 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 98 (exp1 -> empty .)
    AND             reduce using rule 98 (exp1 -> empty .)
    OR              reduce using rule 98 (exp1 -> empty .)
    RPAREN          reduce using rule 98 (exp1 -> empty .)
    RBRACKET        reduce using rule 98 (exp1 -> empty .)
    COMMA           reduce using rule 98 (exp1 -> empty .)
    SEMICOLON       reduce using rule 98 (exp1 -> empty .)


state 187

    (99) plusminus -> PLUS .

    LPAREN          reduce using rule 99 (plusminus -> PLUS .)
    ID              reduce using rule 99 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 99 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 99 (plusminus -> PLUS .)
    CTE_STRING      reduce using rule 99 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 99 (plusminus -> PLUS .)


state 188

    (100) plusminus -> MINUS .

    LPAREN          reduce using rule 100 (plusminus -> MINUS .)
    ID              reduce using rule 100 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 100 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 100 (plusminus -> MINUS .)
    CTE_STRING      reduce using rule 100 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 100 (plusminus -> MINUS .)


state 189

    (101) term -> factor term1 .

    PLUS            reduce using rule 101 (term -> factor term1 .)
    MINUS           reduce using rule 101 (term -> factor term1 .)
    LESSTHAN        reduce using rule 101 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 101 (term -> factor term1 .)
    EQUALS          reduce using rule 101 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 101 (term -> factor term1 .)
    AND             reduce using rule 101 (term -> factor term1 .)
    OR              reduce using rule 101 (term -> factor term1 .)
    RPAREN          reduce using rule 101 (term -> factor term1 .)
    RBRACKET        reduce using rule 101 (term -> factor term1 .)
    COMMA           reduce using rule 101 (term -> factor term1 .)
    SEMICOLON       reduce using rule 101 (term -> factor term1 .)


state 190

    (102) term1 -> multidivi . term
    (101) term -> . factor term1
    (106) factor -> . LPAREN express RPAREN
    (107) factor -> . constant
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    LPAREN          shift and go to state 144
    ID              shift and go to state 146
    CTE_INT         shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_STRING      shift and go to state 149
    CTE_CHAR        shift and go to state 150

    term                           shift and go to state 216
    factor                         shift and go to state 143
    constant                       shift and go to state 145

state 191

    (103) term1 -> empty .

    PLUS            reduce using rule 103 (term1 -> empty .)
    MINUS           reduce using rule 103 (term1 -> empty .)
    LESSTHAN        reduce using rule 103 (term1 -> empty .)
    GREATERTHAN     reduce using rule 103 (term1 -> empty .)
    EQUALS          reduce using rule 103 (term1 -> empty .)
    NOTEQUALS       reduce using rule 103 (term1 -> empty .)
    AND             reduce using rule 103 (term1 -> empty .)
    OR              reduce using rule 103 (term1 -> empty .)
    RPAREN          reduce using rule 103 (term1 -> empty .)
    RBRACKET        reduce using rule 103 (term1 -> empty .)
    COMMA           reduce using rule 103 (term1 -> empty .)
    SEMICOLON       reduce using rule 103 (term1 -> empty .)


state 192

    (104) multidivi -> MULTI .

    LPAREN          reduce using rule 104 (multidivi -> MULTI .)
    ID              reduce using rule 104 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 104 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 104 (multidivi -> MULTI .)
    CTE_STRING      reduce using rule 104 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 104 (multidivi -> MULTI .)


state 193

    (105) multidivi -> DIVI .

    LPAREN          reduce using rule 105 (multidivi -> DIVI .)
    ID              reduce using rule 105 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 105 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 105 (multidivi -> DIVI .)
    CTE_STRING      reduce using rule 105 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 105 (multidivi -> DIVI .)


state 194

    (106) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 217


state 195

    (44) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CALL            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 196

    (47) call -> CALL ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 218


state 197

    (48) call1 -> express call2 .

    RPAREN          reduce using rule 48 (call1 -> express call2 .)


state 198

    (50) call2 -> COMMA . call1
    (48) call1 -> . express call2
    (49) call1 -> . empty
    (81) express -> . express1 relational express2
    (108) empty -> .
    (82) express1 -> . NOTEQUALS
    (83) express1 -> . empty

    RPAREN          reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    LPAREN          reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CTE_INT         reduce using rule 108 (empty -> .)
    CTE_FLOAT       reduce using rule 108 (empty -> .)
    CTE_STRING      reduce using rule 108 (empty -> .)
    CTE_CHAR        reduce using rule 108 (empty -> .)
    NOTEQUALS       shift and go to state 117

    call1                          shift and go to state 219
    express                        shift and go to state 154
    empty                          shift and go to state 155
    express1                       shift and go to state 116

state 199

    (51) call2 -> empty .

    RPAREN          reduce using rule 51 (call2 -> empty .)


state 200

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (108) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 108 (empty -> .)

    cin4                           shift and go to state 220
    empty                          shift and go to state 222

state 201

    (59) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 202

    (60) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 203

    (61) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 223


state 204

    (62) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 224


state 205

    (63) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 225


state 206

    (64) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 226


state 207

    (65) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 208

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 227


state 209

    (67) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CALL            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 210

    (70) return -> RETURN LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (return -> RETURN LPAREN express RPAREN SEMICOLON .)


state 211

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . return
    (108) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 108 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    RETURN          shift and go to state 87

    block                          shift and go to state 228
    statute                        shift and go to state 54
    empty                          shift and go to state 55
    cond                           shift and go to state 56
    assign                         shift and go to state 57
    call                           shift and go to state 58
    cin                            shift and go to state 59
    cout                           shift and go to state 60
    delay                          shift and go to state 61
    forward                        shift and go to state 62
    backward                       shift and go to state 63
    turnleft                       shift and go to state 64
    turnright                      shift and go to state 65
    servo                          shift and go to state 66
    lights                         shift and go to state 67
    display                        shift and go to state 68
    distance                       shift and go to state 69
    stop                           shift and go to state 70
    return                         shift and go to state 71

state 212

    (40) gotoif -> empty .

    IF              reduce using rule 40 (gotoif -> empty .)
    ID              reduce using rule 40 (gotoif -> empty .)
    CALL            reduce using rule 40 (gotoif -> empty .)
    CIN             reduce using rule 40 (gotoif -> empty .)
    COUT            reduce using rule 40 (gotoif -> empty .)
    DELAY           reduce using rule 40 (gotoif -> empty .)
    FORWARD         reduce using rule 40 (gotoif -> empty .)
    BACKWARD        reduce using rule 40 (gotoif -> empty .)
    TURNLEFT        reduce using rule 40 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 40 (gotoif -> empty .)
    SERVO           reduce using rule 40 (gotoif -> empty .)
    LIGHTS          reduce using rule 40 (gotoif -> empty .)
    DISPLAY         reduce using rule 40 (gotoif -> empty .)
    DISTANCE        reduce using rule 40 (gotoif -> empty .)
    STOP            reduce using rule 40 (gotoif -> empty .)
    RETURN          reduce using rule 40 (gotoif -> empty .)
    RCURLY          reduce using rule 40 (gotoif -> empty .)


state 213

    (84) express2 -> andor express .

    RPAREN          reduce using rule 84 (express2 -> andor express .)
    RBRACKET        reduce using rule 84 (express2 -> andor express .)
    COMMA           reduce using rule 84 (express2 -> andor express .)
    SEMICOLON       reduce using rule 84 (express2 -> andor express .)


state 214

    (90) relational1 -> compare exp .

    AND             reduce using rule 90 (relational1 -> compare exp .)
    OR              reduce using rule 90 (relational1 -> compare exp .)
    RPAREN          reduce using rule 90 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 90 (relational1 -> compare exp .)
    COMMA           reduce using rule 90 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 90 (relational1 -> compare exp .)


state 215

    (97) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 97 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 97 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 97 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 97 (exp1 -> plusminus exp .)
    AND             reduce using rule 97 (exp1 -> plusminus exp .)
    OR              reduce using rule 97 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 97 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 97 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 97 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 97 (exp1 -> plusminus exp .)


state 216

    (102) term1 -> multidivi term .

    PLUS            reduce using rule 102 (term1 -> multidivi term .)
    MINUS           reduce using rule 102 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 102 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 102 (term1 -> multidivi term .)
    EQUALS          reduce using rule 102 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 102 (term1 -> multidivi term .)
    AND             reduce using rule 102 (term1 -> multidivi term .)
    OR              reduce using rule 102 (term1 -> multidivi term .)
    RPAREN          reduce using rule 102 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 102 (term1 -> multidivi term .)
    COMMA           reduce using rule 102 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 102 (term1 -> multidivi term .)


state 217

    (106) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 106 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 106 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 106 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 106 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 106 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 106 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 106 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 106 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 106 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 106 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 106 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 106 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 106 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 106 (factor -> LPAREN express RPAREN .)


state 218

    (47) call -> CALL ID LPAREN call1 RPAREN SEMICOLON .

    IF              reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ID              reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CALL            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CIN             reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    COUT            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    STOP            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)


state 219

    (50) call2 -> COMMA call1 .

    RPAREN          reduce using rule 50 (call2 -> COMMA call1 .)


state 220

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 229


state 221

    (57) cin4 -> COMMA . ID cin4

    ID              shift and go to state 230


state 222

    (58) cin4 -> empty .

    RPAREN          reduce using rule 58 (cin4 -> empty .)


state 223

    (61) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 224

    (62) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 232


state 225

    (63) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 233


state 226

    (64) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 234


state 227

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 235


state 228

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 236


state 229

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 56 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 230

    (57) cin4 -> COMMA ID . cin4
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (108) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 108 (empty -> .)

    cin4                           shift and go to state 237
    empty                          shift and go to state 222

state 231

    (61) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 232

    (62) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 233

    (63) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 234

    (64) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 235

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 236

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . SEMICOLON

    ELSE            shift and go to state 239
    SEMICOLON       shift and go to state 240

    else                           shift and go to state 238

state 237

    (57) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 57 (cin4 -> COMMA ID cin4 .)


state 238

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    IF              reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    ID              reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CALL            reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    CIN             reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    COUT            reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DELAY           reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    FORWARD         reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    BACKWARD        reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNLEFT        reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    TURNRIGHT       reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    SERVO           reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    LIGHTS          reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISPLAY         reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    DISTANCE        reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    STOP            reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RETURN          reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)
    RCURLY          reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 239

    (41) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 241


state 240

    (42) else -> SEMICOLON .

    IF              reduce using rule 42 (else -> SEMICOLON .)
    ID              reduce using rule 42 (else -> SEMICOLON .)
    CALL            reduce using rule 42 (else -> SEMICOLON .)
    CIN             reduce using rule 42 (else -> SEMICOLON .)
    COUT            reduce using rule 42 (else -> SEMICOLON .)
    DELAY           reduce using rule 42 (else -> SEMICOLON .)
    FORWARD         reduce using rule 42 (else -> SEMICOLON .)
    BACKWARD        reduce using rule 42 (else -> SEMICOLON .)
    TURNLEFT        reduce using rule 42 (else -> SEMICOLON .)
    TURNRIGHT       reduce using rule 42 (else -> SEMICOLON .)
    SERVO           reduce using rule 42 (else -> SEMICOLON .)
    LIGHTS          reduce using rule 42 (else -> SEMICOLON .)
    DISPLAY         reduce using rule 42 (else -> SEMICOLON .)
    DISTANCE        reduce using rule 42 (else -> SEMICOLON .)
    STOP            reduce using rule 42 (else -> SEMICOLON .)
    RETURN          reduce using rule 42 (else -> SEMICOLON .)
    RCURLY          reduce using rule 42 (else -> SEMICOLON .)


state 241

    (41) else -> ELSE LCURLY . gotoelse block RCURLY else
    (43) gotoelse -> . empty
    (108) empty -> .

    IF              reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    CALL            reduce using rule 108 (empty -> .)
    CIN             reduce using rule 108 (empty -> .)
    COUT            reduce using rule 108 (empty -> .)
    DELAY           reduce using rule 108 (empty -> .)
    FORWARD         reduce using rule 108 (empty -> .)
    BACKWARD        reduce using rule 108 (empty -> .)
    TURNLEFT        reduce using rule 108 (empty -> .)
    TURNRIGHT       reduce using rule 108 (empty -> .)
    SERVO           reduce using rule 108 (empty -> .)
    LIGHTS          reduce using rule 108 (empty -> .)
    DISPLAY         reduce using rule 108 (empty -> .)
    DISTANCE        reduce using rule 108 (empty -> .)
    STOP            reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RCURLY          reduce using rule 108 (empty -> .)

    gotoelse                       shift and go to state 242
    empty                          shift and go to state 243

state 242

    (41) else -> ELSE LCURLY gotoelse . block RCURLY else
    (21) block -> . statute block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . display
    (36) statute -> . distance
    (37) statute -> . stop
    (38) statute -> . return
    (108) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN LPAREN express RPAREN SEMICOLON

    RCURLY          reduce using rule 108 (empty -> .)
    IF              shift and go to state 72
    ID              shift and go to state 73
    CALL            shift and go to state 74
    CIN             shift and go to state 75
    COUT            shift and go to state 76
    DELAY           shift and go to state 77
    FORWARD         shift and go to state 78
    BACKWARD        shift and go to state 79
    TURNLEFT        shift and go to state 80
    TURNRIGHT       shift and go to state 81
    SERVO           shift and go to state 82
    LIGHTS          shift and go to state 83
    DISPLAY         shift and go to state 84
    DISTANCE        shift and go to state 85
    STOP            shift and go to state 86
    RETURN          shift and go to state 87

    block                          shift and go to state 244
    statute                        shift and go to state 54
    empty                          shift and go to state 55
    cond                           shift and go to state 56
    assign                         shift and go to state 57
    call                           shift and go to state 58
    cin                            shift and go to state 59
    cout                           shift and go to state 60
    delay                          shift and go to state 61
    forward                        shift and go to state 62
    backward                       shift and go to state 63
    turnleft                       shift and go to state 64
    turnright                      shift and go to state 65
    servo                          shift and go to state 66
    lights                         shift and go to state 67
    display                        shift and go to state 68
    distance                       shift and go to state 69
    stop                           shift and go to state 70
    return                         shift and go to state 71

state 243

    (43) gotoelse -> empty .

    IF              reduce using rule 43 (gotoelse -> empty .)
    ID              reduce using rule 43 (gotoelse -> empty .)
    CALL            reduce using rule 43 (gotoelse -> empty .)
    CIN             reduce using rule 43 (gotoelse -> empty .)
    COUT            reduce using rule 43 (gotoelse -> empty .)
    DELAY           reduce using rule 43 (gotoelse -> empty .)
    FORWARD         reduce using rule 43 (gotoelse -> empty .)
    BACKWARD        reduce using rule 43 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 43 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 43 (gotoelse -> empty .)
    SERVO           reduce using rule 43 (gotoelse -> empty .)
    LIGHTS          reduce using rule 43 (gotoelse -> empty .)
    DISPLAY         reduce using rule 43 (gotoelse -> empty .)
    DISTANCE        reduce using rule 43 (gotoelse -> empty .)
    STOP            reduce using rule 43 (gotoelse -> empty .)
    RETURN          reduce using rule 43 (gotoelse -> empty .)
    RCURLY          reduce using rule 43 (gotoelse -> empty .)


state 244

    (41) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 245


state 245

    (41) else -> ELSE LCURLY gotoelse block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . SEMICOLON

    ELSE            shift and go to state 239
    SEMICOLON       shift and go to state 240

    else                           shift and go to state 246

state 246

    (41) else -> ELSE LCURLY gotoelse block RCURLY else .

    IF              reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    ID              reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CALL            reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    CIN             reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    COUT            reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DELAY           reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    FORWARD         reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    BACKWARD        reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNLEFT        reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    TURNRIGHT       reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    SERVO           reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    LIGHTS          reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISPLAY         reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    DISTANCE        reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    STOP            reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RETURN          reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)
    RCURLY          reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 36 resolved as shift
WARNING: shift/reduce conflict for INT in state 36 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 36 resolved as shift
WARNING: shift/reduce conflict for bool in state 36 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 36 resolved as shift
WARNING: shift/reduce conflict for STRING in state 36 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for bool in state 41 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for STRING in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 42 resolved as shift
WARNING: shift/reduce conflict for bool in state 42 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 42 resolved as shift
WARNING: shift/reduce conflict for STRING in state 42 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for INT in state 50 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for bool in state 50 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for STRING in state 50 resolved as shift
WARNING: reduce/reduce conflict in state 43 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 43
