Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR
    ELSE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON
Rule 2     main -> MAIN LPAREN RPAREN LCURLY main2
Rule 3     main2 -> varsblock block RCURLY
Rule 4     funcsblock -> funcs funcsblock
Rule 5     funcsblock -> empty
Rule 6     funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
Rule 7     globalvarsblock -> vars varsblock
Rule 8     globalvarsblock -> empty
Rule 9     varsblock -> vars varsblock
Rule 10    varsblock -> empty
Rule 11    vars -> VARDEF type ID vars1 SEMICOLON
Rule 12    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 13    vars1 -> empty
Rule 14    choosetype -> type
Rule 15    choosetype -> VOID
Rule 16    params -> type ID params1
Rule 17    params -> empty
Rule 18    params1 -> COMMA type ID params1
Rule 19    params1 -> empty
Rule 20    block -> statute block
Rule 21    block -> empty
Rule 22    statute -> cond
Rule 23    statute -> assign
Rule 24    statute -> call
Rule 25    statute -> cin
Rule 26    statute -> cout
Rule 27    statute -> delay
Rule 28    statute -> forward
Rule 29    statute -> backward
Rule 30    statute -> turnleft
Rule 31    statute -> turnright
Rule 32    statute -> servo
Rule 33    statute -> lights
Rule 34    statute -> display
Rule 35    statute -> distance
Rule 36    statute -> stop
Rule 37    statute -> return
Rule 38    cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON
Rule 39    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 40    assign1 -> LBRACKET express RBRACKET
Rule 41    assign1 -> empty
Rule 42    call -> CALL ID LPAREN call1 RPAREN SEMICOLON
Rule 43    call1 -> express call2
Rule 44    call1 -> empty
Rule 45    call2 -> COMMA call1
Rule 46    call2 -> empty
Rule 47    cin -> CIN cin1 SEMICOLON
Rule 48    cin1 -> cin2
Rule 49    cin1 -> cin3
Rule 50    cin2 -> LPAREN ID RPAREN
Rule 51    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 52    cin4 -> COMMA ID cin4
Rule 53    cin4 -> empty
Rule 54    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 55    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 56    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 57    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 58    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 59    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 60    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 61    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 62    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 63    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 64    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 65    return -> RETURN express SEMICOLON
Rule 66    type -> INT
Rule 67    type -> FLOAT
Rule 68    type -> bool
Rule 69    type -> CHAR
Rule 70    type -> STRING
Rule 71    constant -> ID
Rule 72    constant -> CTE_INT
Rule 73    constant -> CTE_FLOAT
Rule 74    constant -> CTE_STRING
Rule 75    constant -> CTE_CHAR
Rule 76    express -> express1 relational express2
Rule 77    express1 -> NOTEQUALS
Rule 78    express1 -> empty
Rule 79    express2 -> andor express
Rule 80    express2 -> empty
Rule 81    andor -> AND
Rule 82    andor -> OR
Rule 83    relational -> exp relational1
Rule 84    relational -> NOT
Rule 85    relational1 -> compare exp
Rule 86    relational1 -> empty
Rule 87    compare -> LESSTHAN
Rule 88    compare -> GREATERTHAN
Rule 89    compare -> EQUALS
Rule 90    compare -> NOTEQUALS
Rule 91    exp -> term exp1
Rule 92    exp1 -> plusminus exp
Rule 93    exp1 -> empty
Rule 94    plusminus -> PLUS
Rule 95    plusminus -> MINUS
Rule 96    term -> factor term1
Rule 97    term1 -> multidivi term
Rule 98    term1 -> empty
Rule 99    multidivi -> MULTI
Rule 100   multidivi -> DIVI
Rule 101   factor -> LPAREN express RPAREN
Rule 102   factor -> constant
Rule 103   empty -> <empty>

Terminals, with rules where they appear

AND                  : 81
ASSIGN               : 39
BACKWARD             : 57
CALL                 : 42
CHAR                 : 69
CIN                  : 47
COMMA                : 18 45 52 56 57 58 59 61
COUT                 : 54
CTE_ARR              : 
CTE_CHAR             : 62 75
CTE_FLOAT            : 73
CTE_INT              : 12 51 55 61 61 72
CTE_STRING           : 74
DELAY                : 55
DISPLAY              : 62
DISTANCE             : 63
DIVI                 : 100
ELSE                 : 
EQUALS               : 89
FIN                  : 1
FLOAT                : 67
FORWARD              : 56
FUNCDEF              : 6
GREATERTHAN          : 88
ID                   : 6 11 16 18 39 42 50 52 71
IF                   : 38
INT                  : 66
LBRACKET             : 12 40 51
LCURLY               : 2 6 38
LESSTHAN             : 87
LIGHTS               : 61
LPAREN               : 2 6 38 42 50 51 54 55 56 57 58 59 60 61 62 63 64 101
MAIN                 : 2
MINUS                : 95
MULTI                : 99
NOT                  : 84
NOTEQUALS            : 77 90
OR                   : 82
PLUS                 : 94
PROGRAM              : 1
RBRACKET             : 12 40 51
RCURLY               : 3 6 38
RETURN               : 65
RPAREN               : 2 6 38 42 50 51 54 55 56 57 58 59 60 61 62 63 64 101
SEMICOLON            : 1 11 38 39 42 47 54 55 56 57 58 59 60 61 62 63 64 65
SERVO                : 60
STOP                 : 64
STRING               : 70
TURNLEFT             : 58
TURNRIGHT            : 59
VARDEF               : 11
VOID                 : 15
bool                 : 68
error                : 

Nonterminals, with rules where they appear

andor                : 79
assign               : 23
assign1              : 39
backward             : 29
block                : 3 6 20 38
call                 : 24
call1                : 42 45
call2                : 43
choosetype           : 6
cin                  : 25
cin1                 : 47
cin2                 : 48
cin3                 : 49
cin4                 : 51 52
compare              : 85
cond                 : 22
constant             : 102
cout                 : 26
delay                : 27
display              : 34
distance             : 35
empty                : 5 8 10 13 17 19 21 41 44 46 53 78 80 86 93 98
exp                  : 83 85 92
exp1                 : 91
express              : 38 39 40 43 54 56 56 57 57 58 58 59 59 60 65 79 101
express1             : 76
express2             : 76
factor               : 96
forward              : 28
funcs                : 4
funcsblock           : 1 4
globalvarsblock      : 1
lights               : 33
main                 : 1
main2                : 2
multidivi            : 97
params               : 6
params1              : 16 18
plusminus            : 92
program              : 0
relational           : 76
relational1          : 83
return               : 37
servo                : 32
statute              : 20
stop                 : 36
term                 : 91 97
term1                : 96
turnleft             : 30
turnright            : 31
type                 : 11 14 16 18
vars                 : 7 9
vars1                : 11
varsblock            : 3 6 7 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM globalvarsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . globalvarsblock funcsblock main FIN SEMICOLON
    (7) globalvarsblock -> . vars varsblock
    (8) globalvarsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (103) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)

    globalvarsblock                shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> PROGRAM globalvarsblock . funcsblock main FIN SEMICOLON
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (103) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 103 (empty -> .)

    funcsblock                     shift and go to state 7
    funcs                          shift and go to state 8
    empty                          shift and go to state 9

state 4

    (7) globalvarsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (103) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 12
    empty                          shift and go to state 13

state 5

    (8) globalvarsblock -> empty .

    FUNCDEF         reduce using rule 8 (globalvarsblock -> empty .)
    MAIN            reduce using rule 8 (globalvarsblock -> empty .)


state 6

    (11) vars -> VARDEF . type ID vars1 SEMICOLON
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . bool
    (69) type -> . CHAR
    (70) type -> . STRING

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    type                           shift and go to state 14

state 7

    (1) program -> PROGRAM globalvarsblock funcsblock . main FIN SEMICOLON
    (2) main -> . MAIN LPAREN RPAREN LCURLY main2

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 8

    (4) funcsblock -> funcs . funcsblock
    (4) funcsblock -> . funcs funcsblock
    (5) funcsblock -> . empty
    (6) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (103) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 103 (empty -> .)

    funcs                          shift and go to state 8
    funcsblock                     shift and go to state 22
    empty                          shift and go to state 9

state 9

    (5) funcsblock -> empty .

    MAIN            reduce using rule 5 (funcsblock -> empty .)


state 10

    (6) funcs -> FUNCDEF . choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (14) choosetype -> . type
    (15) choosetype -> . VOID
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . bool
    (69) type -> . CHAR
    (70) type -> . STRING

    VOID            shift and go to state 25
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    choosetype                     shift and go to state 23
    type                           shift and go to state 24

state 11

    (9) varsblock -> vars . varsblock
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (103) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    CIN             reduce using rule 103 (empty -> .)
    COUT            reduce using rule 103 (empty -> .)
    DELAY           reduce using rule 103 (empty -> .)
    FORWARD         reduce using rule 103 (empty -> .)
    BACKWARD        reduce using rule 103 (empty -> .)
    TURNLEFT        reduce using rule 103 (empty -> .)
    TURNRIGHT       reduce using rule 103 (empty -> .)
    SERVO           reduce using rule 103 (empty -> .)
    LIGHTS          reduce using rule 103 (empty -> .)
    DISPLAY         reduce using rule 103 (empty -> .)
    DISTANCE        reduce using rule 103 (empty -> .)
    STOP            reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    RCURLY          reduce using rule 103 (empty -> .)

    vars                           shift and go to state 11
    varsblock                      shift and go to state 26
    empty                          shift and go to state 13

state 12

    (7) globalvarsblock -> vars varsblock .

    FUNCDEF         reduce using rule 7 (globalvarsblock -> vars varsblock .)
    MAIN            reduce using rule 7 (globalvarsblock -> vars varsblock .)


state 13

    (10) varsblock -> empty .

    FUNCDEF         reduce using rule 10 (varsblock -> empty .)
    MAIN            reduce using rule 10 (varsblock -> empty .)
    IF              reduce using rule 10 (varsblock -> empty .)
    ID              reduce using rule 10 (varsblock -> empty .)
    CALL            reduce using rule 10 (varsblock -> empty .)
    CIN             reduce using rule 10 (varsblock -> empty .)
    COUT            reduce using rule 10 (varsblock -> empty .)
    DELAY           reduce using rule 10 (varsblock -> empty .)
    FORWARD         reduce using rule 10 (varsblock -> empty .)
    BACKWARD        reduce using rule 10 (varsblock -> empty .)
    TURNLEFT        reduce using rule 10 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 10 (varsblock -> empty .)
    SERVO           reduce using rule 10 (varsblock -> empty .)
    LIGHTS          reduce using rule 10 (varsblock -> empty .)
    DISPLAY         reduce using rule 10 (varsblock -> empty .)
    DISTANCE        reduce using rule 10 (varsblock -> empty .)
    STOP            reduce using rule 10 (varsblock -> empty .)
    RETURN          reduce using rule 10 (varsblock -> empty .)
    RCURLY          reduce using rule 10 (varsblock -> empty .)


state 14

    (11) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 27


state 15

    (66) type -> INT .

    ID              reduce using rule 66 (type -> INT .)


state 16

    (67) type -> FLOAT .

    ID              reduce using rule 67 (type -> FLOAT .)


state 17

    (68) type -> bool .

    ID              reduce using rule 68 (type -> bool .)


state 18

    (69) type -> CHAR .

    ID              reduce using rule 69 (type -> CHAR .)


state 19

    (70) type -> STRING .

    ID              reduce using rule 70 (type -> STRING .)


state 20

    (1) program -> PROGRAM globalvarsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 28


state 21

    (2) main -> MAIN . LPAREN RPAREN LCURLY main2

    LPAREN          shift and go to state 29


state 22

    (4) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 4 (funcsblock -> funcs funcsblock .)


state 23

    (6) funcs -> FUNCDEF choosetype . ID LPAREN params RPAREN LCURLY varsblock block RCURLY

    ID              shift and go to state 30


state 24

    (14) choosetype -> type .

    ID              reduce using rule 14 (choosetype -> type .)


state 25

    (15) choosetype -> VOID .

    ID              reduce using rule 15 (choosetype -> VOID .)


state 26

    (9) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 9 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 9 (varsblock -> vars varsblock .)
    IF              reduce using rule 9 (varsblock -> vars varsblock .)
    ID              reduce using rule 9 (varsblock -> vars varsblock .)
    CALL            reduce using rule 9 (varsblock -> vars varsblock .)
    CIN             reduce using rule 9 (varsblock -> vars varsblock .)
    COUT            reduce using rule 9 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 9 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 9 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 9 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 9 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 9 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 9 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 9 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 9 (varsblock -> vars varsblock .)
    STOP            reduce using rule 9 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 9 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 9 (varsblock -> vars varsblock .)


state 27

    (11) vars -> VARDEF type ID . vars1 SEMICOLON
    (12) vars1 -> . LBRACKET CTE_INT RBRACKET
    (13) vars1 -> . empty
    (103) empty -> .

    LBRACKET        shift and go to state 32
    SEMICOLON       reduce using rule 103 (empty -> .)

    vars1                          shift and go to state 31
    empty                          shift and go to state 33

state 28

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 34


state 29

    (2) main -> MAIN LPAREN . RPAREN LCURLY main2

    RPAREN          shift and go to state 35


state 30

    (6) funcs -> FUNCDEF choosetype ID . LPAREN params RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 36


state 31

    (11) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 37


state 32

    (12) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 38


state 33

    (13) vars1 -> empty .

    SEMICOLON       reduce using rule 13 (vars1 -> empty .)


state 34

    (1) program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM globalvarsblock funcsblock main FIN SEMICOLON .)


state 35

    (2) main -> MAIN LPAREN RPAREN . LCURLY main2

    LCURLY          shift and go to state 39


state 36

    (6) funcs -> FUNCDEF choosetype ID LPAREN . params RPAREN LCURLY varsblock block RCURLY
    (16) params -> . type ID params1
    (17) params -> . empty
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . bool
    (69) type -> . CHAR
    (70) type -> . STRING
    (103) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19
    RPAREN          reduce using rule 103 (empty -> .)

    params                         shift and go to state 40
    type                           shift and go to state 41
    empty                          shift and go to state 42

state 37

    (11) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CALL            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISPLAY         reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 11 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 38

    (12) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 43


state 39

    (2) main -> MAIN LPAREN RPAREN LCURLY . main2
    (3) main2 -> . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (103) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    CIN             reduce using rule 103 (empty -> .)
    COUT            reduce using rule 103 (empty -> .)
    DELAY           reduce using rule 103 (empty -> .)
    FORWARD         reduce using rule 103 (empty -> .)
    BACKWARD        reduce using rule 103 (empty -> .)
    TURNLEFT        reduce using rule 103 (empty -> .)
    TURNRIGHT       reduce using rule 103 (empty -> .)
    SERVO           reduce using rule 103 (empty -> .)
    LIGHTS          reduce using rule 103 (empty -> .)
    DISPLAY         reduce using rule 103 (empty -> .)
    DISTANCE        reduce using rule 103 (empty -> .)
    STOP            reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    RCURLY          reduce using rule 103 (empty -> .)

    main2                          shift and go to state 44
    varsblock                      shift and go to state 45
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 40

    (6) funcs -> FUNCDEF choosetype ID LPAREN params . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 46


state 41

    (16) params -> type . ID params1

    ID              shift and go to state 47


state 42

    (17) params -> empty .

    RPAREN          reduce using rule 17 (params -> empty .)


state 43

    (12) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 12 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 44

    (2) main -> MAIN LPAREN RPAREN LCURLY main2 .

    FIN             reduce using rule 2 (main -> MAIN LPAREN RPAREN LCURLY main2 .)


state 45

    (3) main2 -> varsblock . block RCURLY
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (103) empty -> .
    (38) cond -> . IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON
    (39) assign -> . ID assign1 ASSIGN express SEMICOLON
    (42) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (47) cin -> . CIN cin1 SEMICOLON
    (54) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (55) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (56) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (57) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (58) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (59) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (60) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (61) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (62) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (63) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (64) stop -> . STOP LPAREN RPAREN SEMICOLON
    (65) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 103 (empty -> .)
    IF              shift and go to state 67
    ID              shift and go to state 68
    CALL            shift and go to state 69
    CIN             shift and go to state 70
    COUT            shift and go to state 71
    DELAY           shift and go to state 72
    FORWARD         shift and go to state 73
    BACKWARD        shift and go to state 74
    TURNLEFT        shift and go to state 75
    TURNRIGHT       shift and go to state 76
    SERVO           shift and go to state 77
    LIGHTS          shift and go to state 78
    DISPLAY         shift and go to state 79
    DISTANCE        shift and go to state 80
    STOP            shift and go to state 81
    RETURN          shift and go to state 82

    block                          shift and go to state 48
    statute                        shift and go to state 49
    empty                          shift and go to state 50
    cond                           shift and go to state 51
    assign                         shift and go to state 52
    call                           shift and go to state 53
    cin                            shift and go to state 54
    cout                           shift and go to state 55
    delay                          shift and go to state 56
    forward                        shift and go to state 57
    backward                       shift and go to state 58
    turnleft                       shift and go to state 59
    turnright                      shift and go to state 60
    servo                          shift and go to state 61
    lights                         shift and go to state 62
    display                        shift and go to state 63
    distance                       shift and go to state 64
    stop                           shift and go to state 65
    return                         shift and go to state 66

state 46

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 83


state 47

    (16) params -> type ID . params1
    (18) params1 -> . COMMA type ID params1
    (19) params1 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 103 (empty -> .)

    params1                        shift and go to state 84
    empty                          shift and go to state 86

state 48

    (3) main2 -> varsblock block . RCURLY

    RCURLY          shift and go to state 87


state 49

    (20) block -> statute . block
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (103) empty -> .
    (38) cond -> . IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON
    (39) assign -> . ID assign1 ASSIGN express SEMICOLON
    (42) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (47) cin -> . CIN cin1 SEMICOLON
    (54) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (55) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (56) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (57) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (58) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (59) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (60) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (61) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (62) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (63) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (64) stop -> . STOP LPAREN RPAREN SEMICOLON
    (65) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 103 (empty -> .)
    IF              shift and go to state 67
    ID              shift and go to state 68
    CALL            shift and go to state 69
    CIN             shift and go to state 70
    COUT            shift and go to state 71
    DELAY           shift and go to state 72
    FORWARD         shift and go to state 73
    BACKWARD        shift and go to state 74
    TURNLEFT        shift and go to state 75
    TURNRIGHT       shift and go to state 76
    SERVO           shift and go to state 77
    LIGHTS          shift and go to state 78
    DISPLAY         shift and go to state 79
    DISTANCE        shift and go to state 80
    STOP            shift and go to state 81
    RETURN          shift and go to state 82

    statute                        shift and go to state 49
    block                          shift and go to state 88
    empty                          shift and go to state 50
    cond                           shift and go to state 51
    assign                         shift and go to state 52
    call                           shift and go to state 53
    cin                            shift and go to state 54
    cout                           shift and go to state 55
    delay                          shift and go to state 56
    forward                        shift and go to state 57
    backward                       shift and go to state 58
    turnleft                       shift and go to state 59
    turnright                      shift and go to state 60
    servo                          shift and go to state 61
    lights                         shift and go to state 62
    display                        shift and go to state 63
    distance                       shift and go to state 64
    stop                           shift and go to state 65
    return                         shift and go to state 66

state 50

    (21) block -> empty .

    RCURLY          reduce using rule 21 (block -> empty .)


state 51

    (22) statute -> cond .

    IF              reduce using rule 22 (statute -> cond .)
    ID              reduce using rule 22 (statute -> cond .)
    CALL            reduce using rule 22 (statute -> cond .)
    CIN             reduce using rule 22 (statute -> cond .)
    COUT            reduce using rule 22 (statute -> cond .)
    DELAY           reduce using rule 22 (statute -> cond .)
    FORWARD         reduce using rule 22 (statute -> cond .)
    BACKWARD        reduce using rule 22 (statute -> cond .)
    TURNLEFT        reduce using rule 22 (statute -> cond .)
    TURNRIGHT       reduce using rule 22 (statute -> cond .)
    SERVO           reduce using rule 22 (statute -> cond .)
    LIGHTS          reduce using rule 22 (statute -> cond .)
    DISPLAY         reduce using rule 22 (statute -> cond .)
    DISTANCE        reduce using rule 22 (statute -> cond .)
    STOP            reduce using rule 22 (statute -> cond .)
    RETURN          reduce using rule 22 (statute -> cond .)
    RCURLY          reduce using rule 22 (statute -> cond .)


state 52

    (23) statute -> assign .

    IF              reduce using rule 23 (statute -> assign .)
    ID              reduce using rule 23 (statute -> assign .)
    CALL            reduce using rule 23 (statute -> assign .)
    CIN             reduce using rule 23 (statute -> assign .)
    COUT            reduce using rule 23 (statute -> assign .)
    DELAY           reduce using rule 23 (statute -> assign .)
    FORWARD         reduce using rule 23 (statute -> assign .)
    BACKWARD        reduce using rule 23 (statute -> assign .)
    TURNLEFT        reduce using rule 23 (statute -> assign .)
    TURNRIGHT       reduce using rule 23 (statute -> assign .)
    SERVO           reduce using rule 23 (statute -> assign .)
    LIGHTS          reduce using rule 23 (statute -> assign .)
    DISPLAY         reduce using rule 23 (statute -> assign .)
    DISTANCE        reduce using rule 23 (statute -> assign .)
    STOP            reduce using rule 23 (statute -> assign .)
    RETURN          reduce using rule 23 (statute -> assign .)
    RCURLY          reduce using rule 23 (statute -> assign .)


state 53

    (24) statute -> call .

    IF              reduce using rule 24 (statute -> call .)
    ID              reduce using rule 24 (statute -> call .)
    CALL            reduce using rule 24 (statute -> call .)
    CIN             reduce using rule 24 (statute -> call .)
    COUT            reduce using rule 24 (statute -> call .)
    DELAY           reduce using rule 24 (statute -> call .)
    FORWARD         reduce using rule 24 (statute -> call .)
    BACKWARD        reduce using rule 24 (statute -> call .)
    TURNLEFT        reduce using rule 24 (statute -> call .)
    TURNRIGHT       reduce using rule 24 (statute -> call .)
    SERVO           reduce using rule 24 (statute -> call .)
    LIGHTS          reduce using rule 24 (statute -> call .)
    DISPLAY         reduce using rule 24 (statute -> call .)
    DISTANCE        reduce using rule 24 (statute -> call .)
    STOP            reduce using rule 24 (statute -> call .)
    RETURN          reduce using rule 24 (statute -> call .)
    RCURLY          reduce using rule 24 (statute -> call .)


state 54

    (25) statute -> cin .

    IF              reduce using rule 25 (statute -> cin .)
    ID              reduce using rule 25 (statute -> cin .)
    CALL            reduce using rule 25 (statute -> cin .)
    CIN             reduce using rule 25 (statute -> cin .)
    COUT            reduce using rule 25 (statute -> cin .)
    DELAY           reduce using rule 25 (statute -> cin .)
    FORWARD         reduce using rule 25 (statute -> cin .)
    BACKWARD        reduce using rule 25 (statute -> cin .)
    TURNLEFT        reduce using rule 25 (statute -> cin .)
    TURNRIGHT       reduce using rule 25 (statute -> cin .)
    SERVO           reduce using rule 25 (statute -> cin .)
    LIGHTS          reduce using rule 25 (statute -> cin .)
    DISPLAY         reduce using rule 25 (statute -> cin .)
    DISTANCE        reduce using rule 25 (statute -> cin .)
    STOP            reduce using rule 25 (statute -> cin .)
    RETURN          reduce using rule 25 (statute -> cin .)
    RCURLY          reduce using rule 25 (statute -> cin .)


state 55

    (26) statute -> cout .

    IF              reduce using rule 26 (statute -> cout .)
    ID              reduce using rule 26 (statute -> cout .)
    CALL            reduce using rule 26 (statute -> cout .)
    CIN             reduce using rule 26 (statute -> cout .)
    COUT            reduce using rule 26 (statute -> cout .)
    DELAY           reduce using rule 26 (statute -> cout .)
    FORWARD         reduce using rule 26 (statute -> cout .)
    BACKWARD        reduce using rule 26 (statute -> cout .)
    TURNLEFT        reduce using rule 26 (statute -> cout .)
    TURNRIGHT       reduce using rule 26 (statute -> cout .)
    SERVO           reduce using rule 26 (statute -> cout .)
    LIGHTS          reduce using rule 26 (statute -> cout .)
    DISPLAY         reduce using rule 26 (statute -> cout .)
    DISTANCE        reduce using rule 26 (statute -> cout .)
    STOP            reduce using rule 26 (statute -> cout .)
    RETURN          reduce using rule 26 (statute -> cout .)
    RCURLY          reduce using rule 26 (statute -> cout .)


state 56

    (27) statute -> delay .

    IF              reduce using rule 27 (statute -> delay .)
    ID              reduce using rule 27 (statute -> delay .)
    CALL            reduce using rule 27 (statute -> delay .)
    CIN             reduce using rule 27 (statute -> delay .)
    COUT            reduce using rule 27 (statute -> delay .)
    DELAY           reduce using rule 27 (statute -> delay .)
    FORWARD         reduce using rule 27 (statute -> delay .)
    BACKWARD        reduce using rule 27 (statute -> delay .)
    TURNLEFT        reduce using rule 27 (statute -> delay .)
    TURNRIGHT       reduce using rule 27 (statute -> delay .)
    SERVO           reduce using rule 27 (statute -> delay .)
    LIGHTS          reduce using rule 27 (statute -> delay .)
    DISPLAY         reduce using rule 27 (statute -> delay .)
    DISTANCE        reduce using rule 27 (statute -> delay .)
    STOP            reduce using rule 27 (statute -> delay .)
    RETURN          reduce using rule 27 (statute -> delay .)
    RCURLY          reduce using rule 27 (statute -> delay .)


state 57

    (28) statute -> forward .

    IF              reduce using rule 28 (statute -> forward .)
    ID              reduce using rule 28 (statute -> forward .)
    CALL            reduce using rule 28 (statute -> forward .)
    CIN             reduce using rule 28 (statute -> forward .)
    COUT            reduce using rule 28 (statute -> forward .)
    DELAY           reduce using rule 28 (statute -> forward .)
    FORWARD         reduce using rule 28 (statute -> forward .)
    BACKWARD        reduce using rule 28 (statute -> forward .)
    TURNLEFT        reduce using rule 28 (statute -> forward .)
    TURNRIGHT       reduce using rule 28 (statute -> forward .)
    SERVO           reduce using rule 28 (statute -> forward .)
    LIGHTS          reduce using rule 28 (statute -> forward .)
    DISPLAY         reduce using rule 28 (statute -> forward .)
    DISTANCE        reduce using rule 28 (statute -> forward .)
    STOP            reduce using rule 28 (statute -> forward .)
    RETURN          reduce using rule 28 (statute -> forward .)
    RCURLY          reduce using rule 28 (statute -> forward .)


state 58

    (29) statute -> backward .

    IF              reduce using rule 29 (statute -> backward .)
    ID              reduce using rule 29 (statute -> backward .)
    CALL            reduce using rule 29 (statute -> backward .)
    CIN             reduce using rule 29 (statute -> backward .)
    COUT            reduce using rule 29 (statute -> backward .)
    DELAY           reduce using rule 29 (statute -> backward .)
    FORWARD         reduce using rule 29 (statute -> backward .)
    BACKWARD        reduce using rule 29 (statute -> backward .)
    TURNLEFT        reduce using rule 29 (statute -> backward .)
    TURNRIGHT       reduce using rule 29 (statute -> backward .)
    SERVO           reduce using rule 29 (statute -> backward .)
    LIGHTS          reduce using rule 29 (statute -> backward .)
    DISPLAY         reduce using rule 29 (statute -> backward .)
    DISTANCE        reduce using rule 29 (statute -> backward .)
    STOP            reduce using rule 29 (statute -> backward .)
    RETURN          reduce using rule 29 (statute -> backward .)
    RCURLY          reduce using rule 29 (statute -> backward .)


state 59

    (30) statute -> turnleft .

    IF              reduce using rule 30 (statute -> turnleft .)
    ID              reduce using rule 30 (statute -> turnleft .)
    CALL            reduce using rule 30 (statute -> turnleft .)
    CIN             reduce using rule 30 (statute -> turnleft .)
    COUT            reduce using rule 30 (statute -> turnleft .)
    DELAY           reduce using rule 30 (statute -> turnleft .)
    FORWARD         reduce using rule 30 (statute -> turnleft .)
    BACKWARD        reduce using rule 30 (statute -> turnleft .)
    TURNLEFT        reduce using rule 30 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 30 (statute -> turnleft .)
    SERVO           reduce using rule 30 (statute -> turnleft .)
    LIGHTS          reduce using rule 30 (statute -> turnleft .)
    DISPLAY         reduce using rule 30 (statute -> turnleft .)
    DISTANCE        reduce using rule 30 (statute -> turnleft .)
    STOP            reduce using rule 30 (statute -> turnleft .)
    RETURN          reduce using rule 30 (statute -> turnleft .)
    RCURLY          reduce using rule 30 (statute -> turnleft .)


state 60

    (31) statute -> turnright .

    IF              reduce using rule 31 (statute -> turnright .)
    ID              reduce using rule 31 (statute -> turnright .)
    CALL            reduce using rule 31 (statute -> turnright .)
    CIN             reduce using rule 31 (statute -> turnright .)
    COUT            reduce using rule 31 (statute -> turnright .)
    DELAY           reduce using rule 31 (statute -> turnright .)
    FORWARD         reduce using rule 31 (statute -> turnright .)
    BACKWARD        reduce using rule 31 (statute -> turnright .)
    TURNLEFT        reduce using rule 31 (statute -> turnright .)
    TURNRIGHT       reduce using rule 31 (statute -> turnright .)
    SERVO           reduce using rule 31 (statute -> turnright .)
    LIGHTS          reduce using rule 31 (statute -> turnright .)
    DISPLAY         reduce using rule 31 (statute -> turnright .)
    DISTANCE        reduce using rule 31 (statute -> turnright .)
    STOP            reduce using rule 31 (statute -> turnright .)
    RETURN          reduce using rule 31 (statute -> turnright .)
    RCURLY          reduce using rule 31 (statute -> turnright .)


state 61

    (32) statute -> servo .

    IF              reduce using rule 32 (statute -> servo .)
    ID              reduce using rule 32 (statute -> servo .)
    CALL            reduce using rule 32 (statute -> servo .)
    CIN             reduce using rule 32 (statute -> servo .)
    COUT            reduce using rule 32 (statute -> servo .)
    DELAY           reduce using rule 32 (statute -> servo .)
    FORWARD         reduce using rule 32 (statute -> servo .)
    BACKWARD        reduce using rule 32 (statute -> servo .)
    TURNLEFT        reduce using rule 32 (statute -> servo .)
    TURNRIGHT       reduce using rule 32 (statute -> servo .)
    SERVO           reduce using rule 32 (statute -> servo .)
    LIGHTS          reduce using rule 32 (statute -> servo .)
    DISPLAY         reduce using rule 32 (statute -> servo .)
    DISTANCE        reduce using rule 32 (statute -> servo .)
    STOP            reduce using rule 32 (statute -> servo .)
    RETURN          reduce using rule 32 (statute -> servo .)
    RCURLY          reduce using rule 32 (statute -> servo .)


state 62

    (33) statute -> lights .

    IF              reduce using rule 33 (statute -> lights .)
    ID              reduce using rule 33 (statute -> lights .)
    CALL            reduce using rule 33 (statute -> lights .)
    CIN             reduce using rule 33 (statute -> lights .)
    COUT            reduce using rule 33 (statute -> lights .)
    DELAY           reduce using rule 33 (statute -> lights .)
    FORWARD         reduce using rule 33 (statute -> lights .)
    BACKWARD        reduce using rule 33 (statute -> lights .)
    TURNLEFT        reduce using rule 33 (statute -> lights .)
    TURNRIGHT       reduce using rule 33 (statute -> lights .)
    SERVO           reduce using rule 33 (statute -> lights .)
    LIGHTS          reduce using rule 33 (statute -> lights .)
    DISPLAY         reduce using rule 33 (statute -> lights .)
    DISTANCE        reduce using rule 33 (statute -> lights .)
    STOP            reduce using rule 33 (statute -> lights .)
    RETURN          reduce using rule 33 (statute -> lights .)
    RCURLY          reduce using rule 33 (statute -> lights .)


state 63

    (34) statute -> display .

    IF              reduce using rule 34 (statute -> display .)
    ID              reduce using rule 34 (statute -> display .)
    CALL            reduce using rule 34 (statute -> display .)
    CIN             reduce using rule 34 (statute -> display .)
    COUT            reduce using rule 34 (statute -> display .)
    DELAY           reduce using rule 34 (statute -> display .)
    FORWARD         reduce using rule 34 (statute -> display .)
    BACKWARD        reduce using rule 34 (statute -> display .)
    TURNLEFT        reduce using rule 34 (statute -> display .)
    TURNRIGHT       reduce using rule 34 (statute -> display .)
    SERVO           reduce using rule 34 (statute -> display .)
    LIGHTS          reduce using rule 34 (statute -> display .)
    DISPLAY         reduce using rule 34 (statute -> display .)
    DISTANCE        reduce using rule 34 (statute -> display .)
    STOP            reduce using rule 34 (statute -> display .)
    RETURN          reduce using rule 34 (statute -> display .)
    RCURLY          reduce using rule 34 (statute -> display .)


state 64

    (35) statute -> distance .

    IF              reduce using rule 35 (statute -> distance .)
    ID              reduce using rule 35 (statute -> distance .)
    CALL            reduce using rule 35 (statute -> distance .)
    CIN             reduce using rule 35 (statute -> distance .)
    COUT            reduce using rule 35 (statute -> distance .)
    DELAY           reduce using rule 35 (statute -> distance .)
    FORWARD         reduce using rule 35 (statute -> distance .)
    BACKWARD        reduce using rule 35 (statute -> distance .)
    TURNLEFT        reduce using rule 35 (statute -> distance .)
    TURNRIGHT       reduce using rule 35 (statute -> distance .)
    SERVO           reduce using rule 35 (statute -> distance .)
    LIGHTS          reduce using rule 35 (statute -> distance .)
    DISPLAY         reduce using rule 35 (statute -> distance .)
    DISTANCE        reduce using rule 35 (statute -> distance .)
    STOP            reduce using rule 35 (statute -> distance .)
    RETURN          reduce using rule 35 (statute -> distance .)
    RCURLY          reduce using rule 35 (statute -> distance .)


state 65

    (36) statute -> stop .

    IF              reduce using rule 36 (statute -> stop .)
    ID              reduce using rule 36 (statute -> stop .)
    CALL            reduce using rule 36 (statute -> stop .)
    CIN             reduce using rule 36 (statute -> stop .)
    COUT            reduce using rule 36 (statute -> stop .)
    DELAY           reduce using rule 36 (statute -> stop .)
    FORWARD         reduce using rule 36 (statute -> stop .)
    BACKWARD        reduce using rule 36 (statute -> stop .)
    TURNLEFT        reduce using rule 36 (statute -> stop .)
    TURNRIGHT       reduce using rule 36 (statute -> stop .)
    SERVO           reduce using rule 36 (statute -> stop .)
    LIGHTS          reduce using rule 36 (statute -> stop .)
    DISPLAY         reduce using rule 36 (statute -> stop .)
    DISTANCE        reduce using rule 36 (statute -> stop .)
    STOP            reduce using rule 36 (statute -> stop .)
    RETURN          reduce using rule 36 (statute -> stop .)
    RCURLY          reduce using rule 36 (statute -> stop .)


state 66

    (37) statute -> return .

    IF              reduce using rule 37 (statute -> return .)
    ID              reduce using rule 37 (statute -> return .)
    CALL            reduce using rule 37 (statute -> return .)
    CIN             reduce using rule 37 (statute -> return .)
    COUT            reduce using rule 37 (statute -> return .)
    DELAY           reduce using rule 37 (statute -> return .)
    FORWARD         reduce using rule 37 (statute -> return .)
    BACKWARD        reduce using rule 37 (statute -> return .)
    TURNLEFT        reduce using rule 37 (statute -> return .)
    TURNRIGHT       reduce using rule 37 (statute -> return .)
    SERVO           reduce using rule 37 (statute -> return .)
    LIGHTS          reduce using rule 37 (statute -> return .)
    DISPLAY         reduce using rule 37 (statute -> return .)
    DISTANCE        reduce using rule 37 (statute -> return .)
    STOP            reduce using rule 37 (statute -> return .)
    RETURN          reduce using rule 37 (statute -> return .)
    RCURLY          reduce using rule 37 (statute -> return .)


state 67

    (38) cond -> IF . LPAREN express RPAREN LCURLY block RCURLY SEMICOLON

    LPAREN          shift and go to state 89


state 68

    (39) assign -> ID . assign1 ASSIGN express SEMICOLON
    (40) assign1 -> . LBRACKET express RBRACKET
    (41) assign1 -> . empty
    (103) empty -> .

    LBRACKET        shift and go to state 91
    ASSIGN          reduce using rule 103 (empty -> .)

    assign1                        shift and go to state 90
    empty                          shift and go to state 92

state 69

    (42) call -> CALL . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 93


state 70

    (47) cin -> CIN . cin1 SEMICOLON
    (48) cin1 -> . cin2
    (49) cin1 -> . cin3
    (50) cin2 -> . LPAREN ID RPAREN
    (51) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 97
    LBRACKET        shift and go to state 98

    cin1                           shift and go to state 94
    cin2                           shift and go to state 95
    cin3                           shift and go to state 96

state 71

    (54) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 99


state 72

    (55) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 73

    (56) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 101


state 74

    (57) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 102


state 75

    (58) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 103


state 76

    (59) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 104


state 77

    (60) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 78

    (61) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 79

    (62) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 80

    (63) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 108


state 81

    (64) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 82

    (65) return -> RETURN . express SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 110
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 83

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY . varsblock block RCURLY
    (9) varsblock -> . vars varsblock
    (10) varsblock -> . empty
    (11) vars -> . VARDEF type ID vars1 SEMICOLON
    (103) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    CIN             reduce using rule 103 (empty -> .)
    COUT            reduce using rule 103 (empty -> .)
    DELAY           reduce using rule 103 (empty -> .)
    FORWARD         reduce using rule 103 (empty -> .)
    BACKWARD        reduce using rule 103 (empty -> .)
    TURNLEFT        reduce using rule 103 (empty -> .)
    TURNRIGHT       reduce using rule 103 (empty -> .)
    SERVO           reduce using rule 103 (empty -> .)
    LIGHTS          reduce using rule 103 (empty -> .)
    DISPLAY         reduce using rule 103 (empty -> .)
    DISTANCE        reduce using rule 103 (empty -> .)
    STOP            reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    RCURLY          reduce using rule 103 (empty -> .)

    varsblock                      shift and go to state 114
    vars                           shift and go to state 11
    empty                          shift and go to state 13

state 84

    (16) params -> type ID params1 .

    RPAREN          reduce using rule 16 (params -> type ID params1 .)


state 85

    (18) params1 -> COMMA . type ID params1
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . bool
    (69) type -> . CHAR
    (70) type -> . STRING

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    bool            shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    type                           shift and go to state 115

state 86

    (19) params1 -> empty .

    RPAREN          reduce using rule 19 (params1 -> empty .)


state 87

    (3) main2 -> varsblock block RCURLY .

    FIN             reduce using rule 3 (main2 -> varsblock block RCURLY .)


state 88

    (20) block -> statute block .

    RCURLY          reduce using rule 20 (block -> statute block .)


state 89

    (38) cond -> IF LPAREN . express RPAREN LCURLY block RCURLY SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 116
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 90

    (39) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 117


state 91

    (40) assign1 -> LBRACKET . express RBRACKET
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 118
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 92

    (41) assign1 -> empty .

    ASSIGN          reduce using rule 41 (assign1 -> empty .)


state 93

    (42) call -> CALL ID . LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 119


state 94

    (47) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 120


state 95

    (48) cin1 -> cin2 .

    SEMICOLON       reduce using rule 48 (cin1 -> cin2 .)


state 96

    (49) cin1 -> cin3 .

    SEMICOLON       reduce using rule 49 (cin1 -> cin3 .)


state 97

    (50) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 121


state 98

    (51) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 122


state 99

    (54) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 123
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 100

    (55) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 124


state 101

    (56) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 125
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 102

    (57) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 126
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 103

    (58) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 127
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 104

    (59) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 128
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 105

    (60) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 129
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 106

    (61) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 130


state 107

    (62) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 131


state 108

    (63) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 132


state 109

    (64) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 133


state 110

    (65) return -> RETURN express . SEMICOLON

    SEMICOLON       shift and go to state 134


state 111

    (76) express -> express1 . relational express2
    (83) relational -> . exp relational1
    (84) relational -> . NOT
    (91) exp -> . term exp1
    (96) term -> . factor term1
    (101) factor -> . LPAREN express RPAREN
    (102) factor -> . constant
    (71) constant -> . ID
    (72) constant -> . CTE_INT
    (73) constant -> . CTE_FLOAT
    (74) constant -> . CTE_STRING
    (75) constant -> . CTE_CHAR

    NOT             shift and go to state 137
    LPAREN          shift and go to state 140
    ID              shift and go to state 142
    CTE_INT         shift and go to state 143
    CTE_FLOAT       shift and go to state 144
    CTE_STRING      shift and go to state 145
    CTE_CHAR        shift and go to state 146

    relational                     shift and go to state 135
    exp                            shift and go to state 136
    term                           shift and go to state 138
    factor                         shift and go to state 139
    constant                       shift and go to state 141

state 112

    (77) express1 -> NOTEQUALS .

    NOT             reduce using rule 77 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 77 (express1 -> NOTEQUALS .)
    ID              reduce using rule 77 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 77 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 77 (express1 -> NOTEQUALS .)
    CTE_STRING      reduce using rule 77 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 77 (express1 -> NOTEQUALS .)


state 113

    (78) express1 -> empty .

    NOT             reduce using rule 78 (express1 -> empty .)
    LPAREN          reduce using rule 78 (express1 -> empty .)
    ID              reduce using rule 78 (express1 -> empty .)
    CTE_INT         reduce using rule 78 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 78 (express1 -> empty .)
    CTE_STRING      reduce using rule 78 (express1 -> empty .)
    CTE_CHAR        reduce using rule 78 (express1 -> empty .)


state 114

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock . block RCURLY
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (103) empty -> .
    (38) cond -> . IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON
    (39) assign -> . ID assign1 ASSIGN express SEMICOLON
    (42) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (47) cin -> . CIN cin1 SEMICOLON
    (54) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (55) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (56) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (57) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (58) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (59) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (60) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (61) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (62) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (63) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (64) stop -> . STOP LPAREN RPAREN SEMICOLON
    (65) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 103 (empty -> .)
    IF              shift and go to state 67
    ID              shift and go to state 68
    CALL            shift and go to state 69
    CIN             shift and go to state 70
    COUT            shift and go to state 71
    DELAY           shift and go to state 72
    FORWARD         shift and go to state 73
    BACKWARD        shift and go to state 74
    TURNLEFT        shift and go to state 75
    TURNRIGHT       shift and go to state 76
    SERVO           shift and go to state 77
    LIGHTS          shift and go to state 78
    DISPLAY         shift and go to state 79
    DISTANCE        shift and go to state 80
    STOP            shift and go to state 81
    RETURN          shift and go to state 82

    block                          shift and go to state 147
    statute                        shift and go to state 49
    empty                          shift and go to state 50
    cond                           shift and go to state 51
    assign                         shift and go to state 52
    call                           shift and go to state 53
    cin                            shift and go to state 54
    cout                           shift and go to state 55
    delay                          shift and go to state 56
    forward                        shift and go to state 57
    backward                       shift and go to state 58
    turnleft                       shift and go to state 59
    turnright                      shift and go to state 60
    servo                          shift and go to state 61
    lights                         shift and go to state 62
    display                        shift and go to state 63
    distance                       shift and go to state 64
    stop                           shift and go to state 65
    return                         shift and go to state 66

state 115

    (18) params1 -> COMMA type . ID params1

    ID              shift and go to state 148


state 116

    (38) cond -> IF LPAREN express . RPAREN LCURLY block RCURLY SEMICOLON

    RPAREN          shift and go to state 149


state 117

    (39) assign -> ID assign1 ASSIGN . express SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 150
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 118

    (40) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 151


state 119

    (42) call -> CALL ID LPAREN . call1 RPAREN SEMICOLON
    (43) call1 -> . express call2
    (44) call1 -> . empty
    (76) express -> . express1 relational express2
    (103) empty -> .
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty

    RPAREN          reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)
    NOTEQUALS       shift and go to state 112

    call1                          shift and go to state 152
    express                        shift and go to state 153
    empty                          shift and go to state 154
    express1                       shift and go to state 111

state 120

    (47) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    CALL            reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 47 (cin -> CIN cin1 SEMICOLON .)


state 121

    (50) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 155


state 122

    (51) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 156


state 123

    (54) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 157


state 124

    (55) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 158


state 125

    (56) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 159


state 126

    (57) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 160


state 127

    (58) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 161


state 128

    (59) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 162


state 129

    (60) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 163


state 130

    (61) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 164


state 131

    (62) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 165


state 132

    (63) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 166


state 133

    (64) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 134

    (65) return -> RETURN express SEMICOLON .

    IF              reduce using rule 65 (return -> RETURN express SEMICOLON .)
    ID              reduce using rule 65 (return -> RETURN express SEMICOLON .)
    CALL            reduce using rule 65 (return -> RETURN express SEMICOLON .)
    CIN             reduce using rule 65 (return -> RETURN express SEMICOLON .)
    COUT            reduce using rule 65 (return -> RETURN express SEMICOLON .)
    DELAY           reduce using rule 65 (return -> RETURN express SEMICOLON .)
    FORWARD         reduce using rule 65 (return -> RETURN express SEMICOLON .)
    BACKWARD        reduce using rule 65 (return -> RETURN express SEMICOLON .)
    TURNLEFT        reduce using rule 65 (return -> RETURN express SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (return -> RETURN express SEMICOLON .)
    SERVO           reduce using rule 65 (return -> RETURN express SEMICOLON .)
    LIGHTS          reduce using rule 65 (return -> RETURN express SEMICOLON .)
    DISPLAY         reduce using rule 65 (return -> RETURN express SEMICOLON .)
    DISTANCE        reduce using rule 65 (return -> RETURN express SEMICOLON .)
    STOP            reduce using rule 65 (return -> RETURN express SEMICOLON .)
    RETURN          reduce using rule 65 (return -> RETURN express SEMICOLON .)
    RCURLY          reduce using rule 65 (return -> RETURN express SEMICOLON .)


state 135

    (76) express -> express1 relational . express2
    (79) express2 -> . andor express
    (80) express2 -> . empty
    (81) andor -> . AND
    (82) andor -> . OR
    (103) empty -> .

    AND             shift and go to state 171
    OR              shift and go to state 172
    SEMICOLON       reduce using rule 103 (empty -> .)
    RPAREN          reduce using rule 103 (empty -> .)
    RBRACKET        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)

    express2                       shift and go to state 168
    andor                          shift and go to state 169
    empty                          shift and go to state 170

state 136

    (83) relational -> exp . relational1
    (85) relational1 -> . compare exp
    (86) relational1 -> . empty
    (87) compare -> . LESSTHAN
    (88) compare -> . GREATERTHAN
    (89) compare -> . EQUALS
    (90) compare -> . NOTEQUALS
    (103) empty -> .

    LESSTHAN        shift and go to state 176
    GREATERTHAN     shift and go to state 177
    EQUALS          shift and go to state 178
    NOTEQUALS       shift and go to state 179
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    RPAREN          reduce using rule 103 (empty -> .)
    RBRACKET        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)

    relational1                    shift and go to state 173
    compare                        shift and go to state 174
    empty                          shift and go to state 175

state 137

    (84) relational -> NOT .

    AND             reduce using rule 84 (relational -> NOT .)
    OR              reduce using rule 84 (relational -> NOT .)
    SEMICOLON       reduce using rule 84 (relational -> NOT .)
    RPAREN          reduce using rule 84 (relational -> NOT .)
    RBRACKET        reduce using rule 84 (relational -> NOT .)
    COMMA           reduce using rule 84 (relational -> NOT .)


state 138

    (91) exp -> term . exp1
    (92) exp1 -> . plusminus exp
    (93) exp1 -> . empty
    (94) plusminus -> . PLUS
    (95) plusminus -> . MINUS
    (103) empty -> .

    PLUS            shift and go to state 183
    MINUS           shift and go to state 184
    LESSTHAN        reduce using rule 103 (empty -> .)
    GREATERTHAN     reduce using rule 103 (empty -> .)
    EQUALS          reduce using rule 103 (empty -> .)
    NOTEQUALS       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    RPAREN          reduce using rule 103 (empty -> .)
    RBRACKET        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)

    exp1                           shift and go to state 180
    plusminus                      shift and go to state 181
    empty                          shift and go to state 182

state 139

    (96) term -> factor . term1
    (97) term1 -> . multidivi term
    (98) term1 -> . empty
    (99) multidivi -> . MULTI
    (100) multidivi -> . DIVI
    (103) empty -> .

    MULTI           shift and go to state 188
    DIVI            shift and go to state 189
    PLUS            reduce using rule 103 (empty -> .)
    MINUS           reduce using rule 103 (empty -> .)
    LESSTHAN        reduce using rule 103 (empty -> .)
    GREATERTHAN     reduce using rule 103 (empty -> .)
    EQUALS          reduce using rule 103 (empty -> .)
    NOTEQUALS       reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    RPAREN          reduce using rule 103 (empty -> .)
    RBRACKET        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)

    term1                          shift and go to state 185
    multidivi                      shift and go to state 186
    empty                          shift and go to state 187

state 140

    (101) factor -> LPAREN . express RPAREN
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 190
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 141

    (102) factor -> constant .

    MULTI           reduce using rule 102 (factor -> constant .)
    DIVI            reduce using rule 102 (factor -> constant .)
    PLUS            reduce using rule 102 (factor -> constant .)
    MINUS           reduce using rule 102 (factor -> constant .)
    LESSTHAN        reduce using rule 102 (factor -> constant .)
    GREATERTHAN     reduce using rule 102 (factor -> constant .)
    EQUALS          reduce using rule 102 (factor -> constant .)
    NOTEQUALS       reduce using rule 102 (factor -> constant .)
    AND             reduce using rule 102 (factor -> constant .)
    OR              reduce using rule 102 (factor -> constant .)
    SEMICOLON       reduce using rule 102 (factor -> constant .)
    RPAREN          reduce using rule 102 (factor -> constant .)
    RBRACKET        reduce using rule 102 (factor -> constant .)
    COMMA           reduce using rule 102 (factor -> constant .)


state 142

    (71) constant -> ID .

    MULTI           reduce using rule 71 (constant -> ID .)
    DIVI            reduce using rule 71 (constant -> ID .)
    PLUS            reduce using rule 71 (constant -> ID .)
    MINUS           reduce using rule 71 (constant -> ID .)
    LESSTHAN        reduce using rule 71 (constant -> ID .)
    GREATERTHAN     reduce using rule 71 (constant -> ID .)
    EQUALS          reduce using rule 71 (constant -> ID .)
    NOTEQUALS       reduce using rule 71 (constant -> ID .)
    AND             reduce using rule 71 (constant -> ID .)
    OR              reduce using rule 71 (constant -> ID .)
    SEMICOLON       reduce using rule 71 (constant -> ID .)
    RPAREN          reduce using rule 71 (constant -> ID .)
    RBRACKET        reduce using rule 71 (constant -> ID .)
    COMMA           reduce using rule 71 (constant -> ID .)


state 143

    (72) constant -> CTE_INT .

    MULTI           reduce using rule 72 (constant -> CTE_INT .)
    DIVI            reduce using rule 72 (constant -> CTE_INT .)
    PLUS            reduce using rule 72 (constant -> CTE_INT .)
    MINUS           reduce using rule 72 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 72 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 72 (constant -> CTE_INT .)
    EQUALS          reduce using rule 72 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 72 (constant -> CTE_INT .)
    AND             reduce using rule 72 (constant -> CTE_INT .)
    OR              reduce using rule 72 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 72 (constant -> CTE_INT .)
    RPAREN          reduce using rule 72 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 72 (constant -> CTE_INT .)
    COMMA           reduce using rule 72 (constant -> CTE_INT .)


state 144

    (73) constant -> CTE_FLOAT .

    MULTI           reduce using rule 73 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 73 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 73 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 73 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 73 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 73 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 73 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 73 (constant -> CTE_FLOAT .)
    AND             reduce using rule 73 (constant -> CTE_FLOAT .)
    OR              reduce using rule 73 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 73 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 73 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 73 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 73 (constant -> CTE_FLOAT .)


state 145

    (74) constant -> CTE_STRING .

    MULTI           reduce using rule 74 (constant -> CTE_STRING .)
    DIVI            reduce using rule 74 (constant -> CTE_STRING .)
    PLUS            reduce using rule 74 (constant -> CTE_STRING .)
    MINUS           reduce using rule 74 (constant -> CTE_STRING .)
    LESSTHAN        reduce using rule 74 (constant -> CTE_STRING .)
    GREATERTHAN     reduce using rule 74 (constant -> CTE_STRING .)
    EQUALS          reduce using rule 74 (constant -> CTE_STRING .)
    NOTEQUALS       reduce using rule 74 (constant -> CTE_STRING .)
    AND             reduce using rule 74 (constant -> CTE_STRING .)
    OR              reduce using rule 74 (constant -> CTE_STRING .)
    SEMICOLON       reduce using rule 74 (constant -> CTE_STRING .)
    RPAREN          reduce using rule 74 (constant -> CTE_STRING .)
    RBRACKET        reduce using rule 74 (constant -> CTE_STRING .)
    COMMA           reduce using rule 74 (constant -> CTE_STRING .)


state 146

    (75) constant -> CTE_CHAR .

    MULTI           reduce using rule 75 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 75 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 75 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 75 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 75 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 75 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 75 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 75 (constant -> CTE_CHAR .)
    AND             reduce using rule 75 (constant -> CTE_CHAR .)
    OR              reduce using rule 75 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 75 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 75 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 75 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 75 (constant -> CTE_CHAR .)


state 147

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 191


state 148

    (18) params1 -> COMMA type ID . params1
    (18) params1 -> . COMMA type ID params1
    (19) params1 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 103 (empty -> .)

    params1                        shift and go to state 192
    empty                          shift and go to state 86

state 149

    (38) cond -> IF LPAREN express RPAREN . LCURLY block RCURLY SEMICOLON

    LCURLY          shift and go to state 193


state 150

    (39) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 194


state 151

    (40) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 40 (assign1 -> LBRACKET express RBRACKET .)


state 152

    (42) call -> CALL ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 195


state 153

    (43) call1 -> express . call2
    (45) call2 -> . COMMA call1
    (46) call2 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 197
    RPAREN          reduce using rule 103 (empty -> .)

    call2                          shift and go to state 196
    empty                          shift and go to state 198

state 154

    (44) call1 -> empty .
    (78) express1 -> empty .

    RPAREN          reduce using rule 44 (call1 -> empty .)
    NOT             reduce using rule 78 (express1 -> empty .)
    LPAREN          reduce using rule 78 (express1 -> empty .)
    ID              reduce using rule 78 (express1 -> empty .)
    CTE_INT         reduce using rule 78 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 78 (express1 -> empty .)
    CTE_STRING      reduce using rule 78 (express1 -> empty .)
    CTE_CHAR        reduce using rule 78 (express1 -> empty .)


state 155

    (50) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 50 (cin2 -> LPAREN ID RPAREN .)


state 156

    (51) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 199


state 157

    (54) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 200


state 158

    (55) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 201


state 159

    (56) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 202
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 160

    (57) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 203
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 161

    (58) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 204
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 162

    (59) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 205
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 163

    (60) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 206


state 164

    (61) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 207


state 165

    (62) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 208


state 166

    (63) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 167

    (64) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 168

    (76) express -> express1 relational express2 .

    SEMICOLON       reduce using rule 76 (express -> express1 relational express2 .)
    RPAREN          reduce using rule 76 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 76 (express -> express1 relational express2 .)
    COMMA           reduce using rule 76 (express -> express1 relational express2 .)


state 169

    (79) express2 -> andor . express
    (76) express -> . express1 relational express2
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty
    (103) empty -> .

    NOTEQUALS       shift and go to state 112
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)

    express                        shift and go to state 209
    express1                       shift and go to state 111
    empty                          shift and go to state 113

state 170

    (80) express2 -> empty .

    SEMICOLON       reduce using rule 80 (express2 -> empty .)
    RPAREN          reduce using rule 80 (express2 -> empty .)
    RBRACKET        reduce using rule 80 (express2 -> empty .)
    COMMA           reduce using rule 80 (express2 -> empty .)


state 171

    (81) andor -> AND .

    NOTEQUALS       reduce using rule 81 (andor -> AND .)
    NOT             reduce using rule 81 (andor -> AND .)
    LPAREN          reduce using rule 81 (andor -> AND .)
    ID              reduce using rule 81 (andor -> AND .)
    CTE_INT         reduce using rule 81 (andor -> AND .)
    CTE_FLOAT       reduce using rule 81 (andor -> AND .)
    CTE_STRING      reduce using rule 81 (andor -> AND .)
    CTE_CHAR        reduce using rule 81 (andor -> AND .)


state 172

    (82) andor -> OR .

    NOTEQUALS       reduce using rule 82 (andor -> OR .)
    NOT             reduce using rule 82 (andor -> OR .)
    LPAREN          reduce using rule 82 (andor -> OR .)
    ID              reduce using rule 82 (andor -> OR .)
    CTE_INT         reduce using rule 82 (andor -> OR .)
    CTE_FLOAT       reduce using rule 82 (andor -> OR .)
    CTE_STRING      reduce using rule 82 (andor -> OR .)
    CTE_CHAR        reduce using rule 82 (andor -> OR .)


state 173

    (83) relational -> exp relational1 .

    AND             reduce using rule 83 (relational -> exp relational1 .)
    OR              reduce using rule 83 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 83 (relational -> exp relational1 .)
    RPAREN          reduce using rule 83 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 83 (relational -> exp relational1 .)
    COMMA           reduce using rule 83 (relational -> exp relational1 .)


state 174

    (85) relational1 -> compare . exp
    (91) exp -> . term exp1
    (96) term -> . factor term1
    (101) factor -> . LPAREN express RPAREN
    (102) factor -> . constant
    (71) constant -> . ID
    (72) constant -> . CTE_INT
    (73) constant -> . CTE_FLOAT
    (74) constant -> . CTE_STRING
    (75) constant -> . CTE_CHAR

    LPAREN          shift and go to state 140
    ID              shift and go to state 142
    CTE_INT         shift and go to state 143
    CTE_FLOAT       shift and go to state 144
    CTE_STRING      shift and go to state 145
    CTE_CHAR        shift and go to state 146

    exp                            shift and go to state 210
    term                           shift and go to state 138
    factor                         shift and go to state 139
    constant                       shift and go to state 141

state 175

    (86) relational1 -> empty .

    AND             reduce using rule 86 (relational1 -> empty .)
    OR              reduce using rule 86 (relational1 -> empty .)
    SEMICOLON       reduce using rule 86 (relational1 -> empty .)
    RPAREN          reduce using rule 86 (relational1 -> empty .)
    RBRACKET        reduce using rule 86 (relational1 -> empty .)
    COMMA           reduce using rule 86 (relational1 -> empty .)


state 176

    (87) compare -> LESSTHAN .

    LPAREN          reduce using rule 87 (compare -> LESSTHAN .)
    ID              reduce using rule 87 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 87 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 87 (compare -> LESSTHAN .)
    CTE_STRING      reduce using rule 87 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 87 (compare -> LESSTHAN .)


state 177

    (88) compare -> GREATERTHAN .

    LPAREN          reduce using rule 88 (compare -> GREATERTHAN .)
    ID              reduce using rule 88 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 88 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 88 (compare -> GREATERTHAN .)
    CTE_STRING      reduce using rule 88 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 88 (compare -> GREATERTHAN .)


state 178

    (89) compare -> EQUALS .

    LPAREN          reduce using rule 89 (compare -> EQUALS .)
    ID              reduce using rule 89 (compare -> EQUALS .)
    CTE_INT         reduce using rule 89 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 89 (compare -> EQUALS .)
    CTE_STRING      reduce using rule 89 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 89 (compare -> EQUALS .)


state 179

    (90) compare -> NOTEQUALS .

    LPAREN          reduce using rule 90 (compare -> NOTEQUALS .)
    ID              reduce using rule 90 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 90 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 90 (compare -> NOTEQUALS .)
    CTE_STRING      reduce using rule 90 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 90 (compare -> NOTEQUALS .)


state 180

    (91) exp -> term exp1 .

    LESSTHAN        reduce using rule 91 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 91 (exp -> term exp1 .)
    EQUALS          reduce using rule 91 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 91 (exp -> term exp1 .)
    AND             reduce using rule 91 (exp -> term exp1 .)
    OR              reduce using rule 91 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 91 (exp -> term exp1 .)
    RPAREN          reduce using rule 91 (exp -> term exp1 .)
    RBRACKET        reduce using rule 91 (exp -> term exp1 .)
    COMMA           reduce using rule 91 (exp -> term exp1 .)


state 181

    (92) exp1 -> plusminus . exp
    (91) exp -> . term exp1
    (96) term -> . factor term1
    (101) factor -> . LPAREN express RPAREN
    (102) factor -> . constant
    (71) constant -> . ID
    (72) constant -> . CTE_INT
    (73) constant -> . CTE_FLOAT
    (74) constant -> . CTE_STRING
    (75) constant -> . CTE_CHAR

    LPAREN          shift and go to state 140
    ID              shift and go to state 142
    CTE_INT         shift and go to state 143
    CTE_FLOAT       shift and go to state 144
    CTE_STRING      shift and go to state 145
    CTE_CHAR        shift and go to state 146

    exp                            shift and go to state 211
    term                           shift and go to state 138
    factor                         shift and go to state 139
    constant                       shift and go to state 141

state 182

    (93) exp1 -> empty .

    LESSTHAN        reduce using rule 93 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 93 (exp1 -> empty .)
    EQUALS          reduce using rule 93 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 93 (exp1 -> empty .)
    AND             reduce using rule 93 (exp1 -> empty .)
    OR              reduce using rule 93 (exp1 -> empty .)
    SEMICOLON       reduce using rule 93 (exp1 -> empty .)
    RPAREN          reduce using rule 93 (exp1 -> empty .)
    RBRACKET        reduce using rule 93 (exp1 -> empty .)
    COMMA           reduce using rule 93 (exp1 -> empty .)


state 183

    (94) plusminus -> PLUS .

    LPAREN          reduce using rule 94 (plusminus -> PLUS .)
    ID              reduce using rule 94 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 94 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 94 (plusminus -> PLUS .)
    CTE_STRING      reduce using rule 94 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 94 (plusminus -> PLUS .)


state 184

    (95) plusminus -> MINUS .

    LPAREN          reduce using rule 95 (plusminus -> MINUS .)
    ID              reduce using rule 95 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 95 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 95 (plusminus -> MINUS .)
    CTE_STRING      reduce using rule 95 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 95 (plusminus -> MINUS .)


state 185

    (96) term -> factor term1 .

    PLUS            reduce using rule 96 (term -> factor term1 .)
    MINUS           reduce using rule 96 (term -> factor term1 .)
    LESSTHAN        reduce using rule 96 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 96 (term -> factor term1 .)
    EQUALS          reduce using rule 96 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 96 (term -> factor term1 .)
    AND             reduce using rule 96 (term -> factor term1 .)
    OR              reduce using rule 96 (term -> factor term1 .)
    SEMICOLON       reduce using rule 96 (term -> factor term1 .)
    RPAREN          reduce using rule 96 (term -> factor term1 .)
    RBRACKET        reduce using rule 96 (term -> factor term1 .)
    COMMA           reduce using rule 96 (term -> factor term1 .)


state 186

    (97) term1 -> multidivi . term
    (96) term -> . factor term1
    (101) factor -> . LPAREN express RPAREN
    (102) factor -> . constant
    (71) constant -> . ID
    (72) constant -> . CTE_INT
    (73) constant -> . CTE_FLOAT
    (74) constant -> . CTE_STRING
    (75) constant -> . CTE_CHAR

    LPAREN          shift and go to state 140
    ID              shift and go to state 142
    CTE_INT         shift and go to state 143
    CTE_FLOAT       shift and go to state 144
    CTE_STRING      shift and go to state 145
    CTE_CHAR        shift and go to state 146

    term                           shift and go to state 212
    factor                         shift and go to state 139
    constant                       shift and go to state 141

state 187

    (98) term1 -> empty .

    PLUS            reduce using rule 98 (term1 -> empty .)
    MINUS           reduce using rule 98 (term1 -> empty .)
    LESSTHAN        reduce using rule 98 (term1 -> empty .)
    GREATERTHAN     reduce using rule 98 (term1 -> empty .)
    EQUALS          reduce using rule 98 (term1 -> empty .)
    NOTEQUALS       reduce using rule 98 (term1 -> empty .)
    AND             reduce using rule 98 (term1 -> empty .)
    OR              reduce using rule 98 (term1 -> empty .)
    SEMICOLON       reduce using rule 98 (term1 -> empty .)
    RPAREN          reduce using rule 98 (term1 -> empty .)
    RBRACKET        reduce using rule 98 (term1 -> empty .)
    COMMA           reduce using rule 98 (term1 -> empty .)


state 188

    (99) multidivi -> MULTI .

    LPAREN          reduce using rule 99 (multidivi -> MULTI .)
    ID              reduce using rule 99 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 99 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 99 (multidivi -> MULTI .)
    CTE_STRING      reduce using rule 99 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 99 (multidivi -> MULTI .)


state 189

    (100) multidivi -> DIVI .

    LPAREN          reduce using rule 100 (multidivi -> DIVI .)
    ID              reduce using rule 100 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 100 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 100 (multidivi -> DIVI .)
    CTE_STRING      reduce using rule 100 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 100 (multidivi -> DIVI .)


state 190

    (101) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 213


state 191

    (6) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .

    FUNCDEF         reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)
    MAIN            reduce using rule 6 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)


state 192

    (18) params1 -> COMMA type ID params1 .

    RPAREN          reduce using rule 18 (params1 -> COMMA type ID params1 .)


state 193

    (38) cond -> IF LPAREN express RPAREN LCURLY . block RCURLY SEMICOLON
    (20) block -> . statute block
    (21) block -> . empty
    (22) statute -> . cond
    (23) statute -> . assign
    (24) statute -> . call
    (25) statute -> . cin
    (26) statute -> . cout
    (27) statute -> . delay
    (28) statute -> . forward
    (29) statute -> . backward
    (30) statute -> . turnleft
    (31) statute -> . turnright
    (32) statute -> . servo
    (33) statute -> . lights
    (34) statute -> . display
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . return
    (103) empty -> .
    (38) cond -> . IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON
    (39) assign -> . ID assign1 ASSIGN express SEMICOLON
    (42) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (47) cin -> . CIN cin1 SEMICOLON
    (54) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (55) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (56) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (57) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (58) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (59) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (60) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (61) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (62) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (63) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (64) stop -> . STOP LPAREN RPAREN SEMICOLON
    (65) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 103 (empty -> .)
    IF              shift and go to state 67
    ID              shift and go to state 68
    CALL            shift and go to state 69
    CIN             shift and go to state 70
    COUT            shift and go to state 71
    DELAY           shift and go to state 72
    FORWARD         shift and go to state 73
    BACKWARD        shift and go to state 74
    TURNLEFT        shift and go to state 75
    TURNRIGHT       shift and go to state 76
    SERVO           shift and go to state 77
    LIGHTS          shift and go to state 78
    DISPLAY         shift and go to state 79
    DISTANCE        shift and go to state 80
    STOP            shift and go to state 81
    RETURN          shift and go to state 82

    block                          shift and go to state 214
    statute                        shift and go to state 49
    empty                          shift and go to state 50
    cond                           shift and go to state 51
    assign                         shift and go to state 52
    call                           shift and go to state 53
    cin                            shift and go to state 54
    cout                           shift and go to state 55
    delay                          shift and go to state 56
    forward                        shift and go to state 57
    backward                       shift and go to state 58
    turnleft                       shift and go to state 59
    turnright                      shift and go to state 60
    servo                          shift and go to state 61
    lights                         shift and go to state 62
    display                        shift and go to state 63
    distance                       shift and go to state 64
    stop                           shift and go to state 65
    return                         shift and go to state 66

state 194

    (39) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CALL            reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 39 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 195

    (42) call -> CALL ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 215


state 196

    (43) call1 -> express call2 .

    RPAREN          reduce using rule 43 (call1 -> express call2 .)


state 197

    (45) call2 -> COMMA . call1
    (43) call1 -> . express call2
    (44) call1 -> . empty
    (76) express -> . express1 relational express2
    (103) empty -> .
    (77) express1 -> . NOTEQUALS
    (78) express1 -> . empty

    RPAREN          reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTE_INT         reduce using rule 103 (empty -> .)
    CTE_FLOAT       reduce using rule 103 (empty -> .)
    CTE_STRING      reduce using rule 103 (empty -> .)
    CTE_CHAR        reduce using rule 103 (empty -> .)
    NOTEQUALS       shift and go to state 112

    call1                          shift and go to state 216
    express                        shift and go to state 153
    empty                          shift and go to state 154
    express1                       shift and go to state 111

state 198

    (46) call2 -> empty .

    RPAREN          reduce using rule 46 (call2 -> empty .)


state 199

    (51) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (52) cin4 -> . COMMA ID cin4
    (53) cin4 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 218
    RPAREN          reduce using rule 103 (empty -> .)

    cin4                           shift and go to state 217
    empty                          shift and go to state 219

state 200

    (54) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 54 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 201

    (55) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 55 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 202

    (56) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 220


state 203

    (57) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 221


state 204

    (58) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 222


state 205

    (59) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 223


state 206

    (60) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 60 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 207

    (61) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 224


state 208

    (62) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CALL            reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 62 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 209

    (79) express2 -> andor express .

    SEMICOLON       reduce using rule 79 (express2 -> andor express .)
    RPAREN          reduce using rule 79 (express2 -> andor express .)
    RBRACKET        reduce using rule 79 (express2 -> andor express .)
    COMMA           reduce using rule 79 (express2 -> andor express .)


state 210

    (85) relational1 -> compare exp .

    AND             reduce using rule 85 (relational1 -> compare exp .)
    OR              reduce using rule 85 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 85 (relational1 -> compare exp .)
    RPAREN          reduce using rule 85 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 85 (relational1 -> compare exp .)
    COMMA           reduce using rule 85 (relational1 -> compare exp .)


state 211

    (92) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 92 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 92 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 92 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 92 (exp1 -> plusminus exp .)
    AND             reduce using rule 92 (exp1 -> plusminus exp .)
    OR              reduce using rule 92 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 92 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 92 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 92 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 92 (exp1 -> plusminus exp .)


state 212

    (97) term1 -> multidivi term .

    PLUS            reduce using rule 97 (term1 -> multidivi term .)
    MINUS           reduce using rule 97 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 97 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 97 (term1 -> multidivi term .)
    EQUALS          reduce using rule 97 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 97 (term1 -> multidivi term .)
    AND             reduce using rule 97 (term1 -> multidivi term .)
    OR              reduce using rule 97 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 97 (term1 -> multidivi term .)
    RPAREN          reduce using rule 97 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 97 (term1 -> multidivi term .)
    COMMA           reduce using rule 97 (term1 -> multidivi term .)


state 213

    (101) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 101 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 101 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 101 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 101 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 101 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 101 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 101 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 101 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 101 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 101 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 101 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 101 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 101 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 101 (factor -> LPAREN express RPAREN .)


state 214

    (38) cond -> IF LPAREN express RPAREN LCURLY block . RCURLY SEMICOLON

    RCURLY          shift and go to state 225


state 215

    (42) call -> CALL ID LPAREN call1 RPAREN SEMICOLON .

    IF              reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ID              reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CALL            reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CIN             reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    COUT            reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    STOP            reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 42 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)


state 216

    (45) call2 -> COMMA call1 .

    RPAREN          reduce using rule 45 (call2 -> COMMA call1 .)


state 217

    (51) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 226


state 218

    (52) cin4 -> COMMA . ID cin4

    ID              shift and go to state 227


state 219

    (53) cin4 -> empty .

    RPAREN          reduce using rule 53 (cin4 -> empty .)


state 220

    (56) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 228


state 221

    (57) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 229


state 222

    (58) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 230


state 223

    (59) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 224

    (61) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 232


state 225

    (38) cond -> IF LPAREN express RPAREN LCURLY block RCURLY . SEMICOLON

    SEMICOLON       shift and go to state 233


state 226

    (51) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 51 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 227

    (52) cin4 -> COMMA ID . cin4
    (52) cin4 -> . COMMA ID cin4
    (53) cin4 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 218
    RPAREN          reduce using rule 103 (empty -> .)

    cin4                           shift and go to state 234
    empty                          shift and go to state 219

state 228

    (56) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 56 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 229

    (57) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 57 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 230

    (58) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 58 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 231

    (59) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 59 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 232

    (61) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 61 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 233

    (38) cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .

    IF              reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    ID              reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    CALL            reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    CIN             reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    COUT            reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    DELAY           reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    FORWARD         reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    BACKWARD        reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    TURNLEFT        reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    TURNRIGHT       reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    SERVO           reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    LIGHTS          reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    DISPLAY         reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    DISTANCE        reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    STOP            reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    RETURN          reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)
    RCURLY          reduce using rule 38 (cond -> IF LPAREN express RPAREN LCURLY block RCURLY SEMICOLON .)


state 234

    (52) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 52 (cin4 -> COMMA ID cin4 .)

