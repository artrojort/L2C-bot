Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_ARR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON
Rule 2     gotomain -> empty
Rule 3     main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY
Rule 4     main1 -> empty
Rule 5     setmain -> empty
Rule 6     funcsblock -> funcs funcsblock
Rule 7     funcsblock -> empty
Rule 8     funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
Rule 9     funcs1 -> empty
Rule 10    setscope -> ID
Rule 11    varsblock -> vars varsblock
Rule 12    varsblock -> empty
Rule 13    vars -> VARDEF type ID vars1 SEMICOLON
Rule 14    vars1 -> LBRACKET CTE_INT RBRACKET
Rule 15    vars1 -> empty
Rule 16    paramsblock -> params paramsblock
Rule 17    paramsblock -> COMMA params paramsblock
Rule 18    paramsblock -> empty
Rule 19    params -> type ID
Rule 20    params -> empty
Rule 21    block -> statute SEMICOLON block
Rule 22    block -> empty
Rule 23    statute -> cond
Rule 24    statute -> assign
Rule 25    statute -> call
Rule 26    statute -> cin
Rule 27    statute -> cout
Rule 28    statute -> delay
Rule 29    statute -> forward
Rule 30    statute -> backward
Rule 31    statute -> turnleft
Rule 32    statute -> turnright
Rule 33    statute -> servo
Rule 34    statute -> lights
Rule 35    statute -> distance
Rule 36    statute -> stop
Rule 37    statute -> while
Rule 38    statute -> return
Rule 39    cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
Rule 40    gotoif -> empty
Rule 41    else -> ELSE LCURLY gotoelse block RCURLY else
Rule 42    else -> empty
Rule 43    gotoelse -> empty
Rule 44    assign -> ID assign1 ASSIGN express
Rule 45    assign1 -> LBRACKET express RBRACKET
Rule 46    assign1 -> empty
Rule 47    call -> era LPAREN paramcall RPAREN
Rule 48    era -> ID
Rule 49    paramcall -> express paramcall1
Rule 50    paramcall1 -> COMMA paramcall
Rule 51    paramcall1 -> empty
Rule 52    cin -> CIN cin1
Rule 53    cin1 -> cin2
Rule 54    cin1 -> cin3
Rule 55    cin2 -> LPAREN ID RPAREN
Rule 56    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 57    cin4 -> COMMA ID cin4
Rule 58    cin4 -> empty
Rule 59    cout -> COUT LPAREN express cout1 RPAREN
Rule 60    cout1 -> COMMA express cout1
Rule 61    cout1 -> empty
Rule 62    delay -> DELAY LPAREN express RPAREN
Rule 63    forward -> FORWARD LPAREN express RPAREN
Rule 64    backward -> BACKWARD LPAREN express RPAREN
Rule 65    turnleft -> TURNLEFT LPAREN express RPAREN
Rule 66    turnright -> TURNRIGHT LPAREN express RPAREN
Rule 67    servo -> SERVO LPAREN express RPAREN
Rule 68    lights -> LIGHTS LPAREN express COMMA express RPAREN
Rule 69    distance -> DISTANCE LPAREN RPAREN
Rule 70    stop -> STOP LPAREN RPAREN
Rule 71    while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
Rule 72    while1 -> empty
Rule 73    return -> RETURN LPAREN express RPAREN
Rule 74    type -> INT
Rule 75    type -> FLOAT
Rule 76    type -> BOOL
Rule 77    type -> CHAR
Rule 78    type -> VOID
Rule 79    constant -> ID
Rule 80    constant -> CTE_INT
Rule 81    constant -> CTE_FLOAT
Rule 82    constant -> CTE_CHAR
Rule 83    constant -> CTE_BOOL
Rule 84    express -> express1 relational express2
Rule 85    express1 -> NOTEQUALS
Rule 86    express1 -> empty
Rule 87    express2 -> andor express
Rule 88    express2 -> empty
Rule 89    andor -> AND
Rule 90    andor -> OR
Rule 91    relational -> exp relational1
Rule 92    relational -> NOT
Rule 93    relational1 -> compare exp
Rule 94    relational1 -> empty
Rule 95    compare -> LESSTHAN
Rule 96    compare -> GREATERTHAN
Rule 97    compare -> EQUALS
Rule 98    compare -> NOTEQUALS
Rule 99    exp -> term exp1
Rule 100   exp1 -> plusminus exp
Rule 101   exp1 -> empty
Rule 102   plusminus -> PLUS
Rule 103   plusminus -> MINUS
Rule 104   term -> factor term1
Rule 105   term1 -> multidivi term
Rule 106   term1 -> empty
Rule 107   multidivi -> MULTI
Rule 108   multidivi -> DIVI
Rule 109   factor -> LPAREN express RPAREN
Rule 110   factor -> constant
Rule 111   factor -> call
Rule 112   empty -> <empty>

Terminals, with rules where they appear

AND                  : 89
ASSIGN               : 44
BACKWARD             : 64
BOOL                 : 76
CHAR                 : 77
CIN                  : 52
COMMA                : 17 50 57 60 68
COUT                 : 59
CTE_ARR              : 
CTE_BOOL             : 83
CTE_CHAR             : 82
CTE_FLOAT            : 81
CTE_INT              : 14 56 80
DELAY                : 62
DISTANCE             : 69
DIVI                 : 108
ELSE                 : 41
EQUALS               : 97
FIN                  : 1
FLOAT                : 75
FORWARD              : 63
FUNCDEF              : 8
GREATERTHAN          : 96
ID                   : 10 13 19 44 48 55 57 79
IF                   : 39
INT                  : 74
LBRACKET             : 14 45 56
LCURLY               : 3 8 39 41 71
LESSTHAN             : 95
LIGHTS               : 68
LPAREN               : 3 8 39 47 55 56 59 62 63 64 65 66 67 68 69 70 71 73 109
MAIN                 : 3
MINUS                : 103
MULTI                : 107
NOT                  : 92
NOTEQUALS            : 85 98
OR                   : 90
PLUS                 : 102
PROGRAM              : 1
RBRACKET             : 14 45 56
RCURLY               : 3 8 39 41 71
RETURN               : 73
RPAREN               : 3 8 39 47 55 56 59 62 63 64 65 66 67 68 69 70 71 73 109
SEMICOLON            : 1 13 21
SERVO                : 67
STOP                 : 70
TURNLEFT             : 65
TURNRIGHT            : 66
VARDEF               : 13
VOID                 : 78
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

andor                : 87
assign               : 24
assign1              : 44
backward             : 30
block                : 3 8 21 39 41 71
call                 : 25 111
cin                  : 26
cin1                 : 52
cin2                 : 53
cin3                 : 54
cin4                 : 56 57
compare              : 93
cond                 : 23
constant             : 110
cout                 : 27
cout1                : 59 60
delay                : 28
distance             : 35
else                 : 39 41
empty                : 2 4 5 7 9 12 15 18 20 22 40 42 43 46 51 58 61 72 86 88 94 101 106
era                  : 47
exp                  : 91 93 100
exp1                 : 99
express              : 39 44 45 49 59 60 62 63 64 65 66 67 68 68 71 73 87 109
express1             : 84
express2             : 84
factor               : 104
forward              : 29
funcs                : 6
funcs1               : 8
funcsblock           : 1 6
gotoelse             : 41
gotoif               : 39
gotomain             : 1
lights               : 34
main                 : 1
main1                : 3
multidivi            : 105
paramcall            : 47 50
paramcall1           : 49
params               : 16 17
paramsblock          : 8 16 17
plusminus            : 100
program              : 0
relational           : 84
relational1          : 91
return               : 38
servo                : 33
setmain              : 3
setscope             : 8
statute              : 21
stop                 : 36
term                 : 99 105
term1                : 104
turnleft             : 31
turnright            : 32
type                 : 8 13 19
vars                 : 11
vars1                : 13
varsblock            : 1 3 8 11
while                : 37
while1               : 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . gotomain varsblock funcsblock main FIN SEMICOLON
    (2) gotomain -> . empty
    (112) empty -> .

    VARDEF          reduce using rule 112 (empty -> .)
    FUNCDEF         reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)

    gotomain                       shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM gotomain . varsblock funcsblock main FIN SEMICOLON
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID vars1 SEMICOLON
    (112) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)

    varsblock                      shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 4

    (2) gotomain -> empty .

    VARDEF          reduce using rule 2 (gotomain -> empty .)
    FUNCDEF         reduce using rule 2 (gotomain -> empty .)
    MAIN            reduce using rule 2 (gotomain -> empty .)


state 5

    (1) program -> PROGRAM gotomain varsblock . funcsblock main FIN SEMICOLON
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (112) empty -> .

    FUNCDEF         shift and go to state 12
    MAIN            reduce using rule 112 (empty -> .)

    funcsblock                     shift and go to state 9
    funcs                          shift and go to state 10
    empty                          shift and go to state 11

state 6

    (11) varsblock -> vars . varsblock
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID vars1 SEMICOLON
    (112) empty -> .

    VARDEF          shift and go to state 8
    FUNCDEF         reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    vars                           shift and go to state 6
    varsblock                      shift and go to state 13
    empty                          shift and go to state 7

state 7

    (12) varsblock -> empty .

    FUNCDEF         reduce using rule 12 (varsblock -> empty .)
    MAIN            reduce using rule 12 (varsblock -> empty .)
    IF              reduce using rule 12 (varsblock -> empty .)
    ID              reduce using rule 12 (varsblock -> empty .)
    CIN             reduce using rule 12 (varsblock -> empty .)
    COUT            reduce using rule 12 (varsblock -> empty .)
    DELAY           reduce using rule 12 (varsblock -> empty .)
    FORWARD         reduce using rule 12 (varsblock -> empty .)
    BACKWARD        reduce using rule 12 (varsblock -> empty .)
    TURNLEFT        reduce using rule 12 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 12 (varsblock -> empty .)
    SERVO           reduce using rule 12 (varsblock -> empty .)
    LIGHTS          reduce using rule 12 (varsblock -> empty .)
    DISTANCE        reduce using rule 12 (varsblock -> empty .)
    STOP            reduce using rule 12 (varsblock -> empty .)
    WHILE           reduce using rule 12 (varsblock -> empty .)
    RETURN          reduce using rule 12 (varsblock -> empty .)
    RCURLY          reduce using rule 12 (varsblock -> empty .)


state 8

    (13) vars -> VARDEF . type ID vars1 SEMICOLON
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

    type                           shift and go to state 14

state 9

    (1) program -> PROGRAM gotomain varsblock funcsblock . main FIN SEMICOLON
    (3) main -> . MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 10

    (6) funcsblock -> funcs . funcsblock
    (6) funcsblock -> . funcs funcsblock
    (7) funcsblock -> . empty
    (8) funcs -> . FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (112) empty -> .

    FUNCDEF         shift and go to state 12
    MAIN            reduce using rule 112 (empty -> .)

    funcs                          shift and go to state 10
    funcsblock                     shift and go to state 22
    empty                          shift and go to state 11

state 11

    (7) funcsblock -> empty .

    MAIN            reduce using rule 7 (funcsblock -> empty .)


state 12

    (8) funcs -> FUNCDEF . type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

    type                           shift and go to state 23

state 13

    (11) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 11 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 11 (varsblock -> vars varsblock .)
    IF              reduce using rule 11 (varsblock -> vars varsblock .)
    ID              reduce using rule 11 (varsblock -> vars varsblock .)
    CIN             reduce using rule 11 (varsblock -> vars varsblock .)
    COUT            reduce using rule 11 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 11 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 11 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 11 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 11 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 11 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 11 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 11 (varsblock -> vars varsblock .)
    STOP            reduce using rule 11 (varsblock -> vars varsblock .)
    WHILE           reduce using rule 11 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 11 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 11 (varsblock -> vars varsblock .)


state 14

    (13) vars -> VARDEF type . ID vars1 SEMICOLON

    ID              shift and go to state 24


state 15

    (74) type -> INT .

    ID              reduce using rule 74 (type -> INT .)


state 16

    (75) type -> FLOAT .

    ID              reduce using rule 75 (type -> FLOAT .)


state 17

    (76) type -> BOOL .

    ID              reduce using rule 76 (type -> BOOL .)


state 18

    (77) type -> CHAR .

    ID              reduce using rule 77 (type -> CHAR .)


state 19

    (78) type -> VOID .

    ID              reduce using rule 78 (type -> VOID .)


state 20

    (1) program -> PROGRAM gotomain varsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 25


state 21

    (3) main -> MAIN . setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY
    (5) setmain -> . empty
    (112) empty -> .

    LPAREN          reduce using rule 112 (empty -> .)

    setmain                        shift and go to state 26
    empty                          shift and go to state 27

state 22

    (6) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 6 (funcsblock -> funcs funcsblock .)


state 23

    (8) funcs -> FUNCDEF type . setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (10) setscope -> . ID

    ID              shift and go to state 29

    setscope                       shift and go to state 28

state 24

    (13) vars -> VARDEF type ID . vars1 SEMICOLON
    (14) vars1 -> . LBRACKET CTE_INT RBRACKET
    (15) vars1 -> . empty
    (112) empty -> .

    LBRACKET        shift and go to state 31
    SEMICOLON       reduce using rule 112 (empty -> .)

    vars1                          shift and go to state 30
    empty                          shift and go to state 32

state 25

    (1) program -> PROGRAM gotomain varsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 33


state 26

    (3) main -> MAIN setmain . LPAREN RPAREN LCURLY varsblock main1 block RCURLY

    LPAREN          shift and go to state 34


state 27

    (5) setmain -> empty .

    LPAREN          reduce using rule 5 (setmain -> empty .)


state 28

    (8) funcs -> FUNCDEF type setscope . LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY

    LPAREN          shift and go to state 35


state 29

    (10) setscope -> ID .

    LPAREN          reduce using rule 10 (setscope -> ID .)


state 30

    (13) vars -> VARDEF type ID vars1 . SEMICOLON

    SEMICOLON       shift and go to state 36


state 31

    (14) vars1 -> LBRACKET . CTE_INT RBRACKET

    CTE_INT         shift and go to state 37


state 32

    (15) vars1 -> empty .

    SEMICOLON       reduce using rule 15 (vars1 -> empty .)


state 33

    (1) program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM gotomain varsblock funcsblock main FIN SEMICOLON .)


state 34

    (3) main -> MAIN setmain LPAREN . RPAREN LCURLY varsblock main1 block RCURLY

    RPAREN          shift and go to state 38


state 35

    (8) funcs -> FUNCDEF type setscope LPAREN . paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (112) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 112 (empty -> .) ]
  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! CHAR            [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]

    type                           shift and go to state 39
    paramsblock                    shift and go to state 40
    params                         shift and go to state 41
    empty                          shift and go to state 43

state 36

    (13) vars -> VARDEF type ID vars1 SEMICOLON .

    VARDEF          reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    MAIN            reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    IF              reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    ID              reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    CIN             reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    COUT            reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DELAY           reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    FORWARD         reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    BACKWARD        reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    SERVO           reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    LIGHTS          reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    DISTANCE        reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    STOP            reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    WHILE           reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RETURN          reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)
    RCURLY          reduce using rule 13 (vars -> VARDEF type ID vars1 SEMICOLON .)


state 37

    (14) vars1 -> LBRACKET CTE_INT . RBRACKET

    RBRACKET        shift and go to state 44


state 38

    (3) main -> MAIN setmain LPAREN RPAREN . LCURLY varsblock main1 block RCURLY

    LCURLY          shift and go to state 45


state 39

    (19) params -> type . ID

    ID              shift and go to state 46


state 40

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock . RPAREN LCURLY varsblock funcs1 block RCURLY

    RPAREN          shift and go to state 47


state 41

    (16) paramsblock -> params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (112) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 112 (empty -> .) ]
  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! CHAR            [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]

    params                         shift and go to state 41
    paramsblock                    shift and go to state 48
    empty                          shift and go to state 43
    type                           shift and go to state 39

state 42

    (17) paramsblock -> COMMA . params paramsblock
    (19) params -> . type ID
    (20) params -> . empty
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID
    (112) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19
    COMMA           reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)

  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! CHAR            [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]

    params                         shift and go to state 49
    type                           shift and go to state 39
    empty                          shift and go to state 50

state 43

    (18) paramsblock -> empty .
    (20) params -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 18 (paramsblock -> empty .)
    RPAREN          reduce using rule 18 (paramsblock -> empty .)
    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    VOID            reduce using rule 20 (params -> empty .)

  ! RPAREN          [ reduce using rule 20 (params -> empty .) ]


state 44

    (14) vars1 -> LBRACKET CTE_INT RBRACKET .

    SEMICOLON       reduce using rule 14 (vars1 -> LBRACKET CTE_INT RBRACKET .)


state 45

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY . varsblock main1 block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID vars1 SEMICOLON
    (112) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    varsblock                      shift and go to state 51
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 46

    (19) params -> type ID .

    COMMA           reduce using rule 19 (params -> type ID .)
    INT             reduce using rule 19 (params -> type ID .)
    FLOAT           reduce using rule 19 (params -> type ID .)
    BOOL            reduce using rule 19 (params -> type ID .)
    CHAR            reduce using rule 19 (params -> type ID .)
    VOID            reduce using rule 19 (params -> type ID .)
    RPAREN          reduce using rule 19 (params -> type ID .)


state 47

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN . LCURLY varsblock funcs1 block RCURLY

    LCURLY          shift and go to state 52


state 48

    (16) paramsblock -> params paramsblock .

    RPAREN          reduce using rule 16 (paramsblock -> params paramsblock .)


state 49

    (17) paramsblock -> COMMA params . paramsblock
    (16) paramsblock -> . params paramsblock
    (17) paramsblock -> . COMMA params paramsblock
    (18) paramsblock -> . empty
    (19) params -> . type ID
    (20) params -> . empty
    (112) empty -> .
    (74) type -> . INT
    (75) type -> . FLOAT
    (76) type -> . BOOL
    (77) type -> . CHAR
    (78) type -> . VOID

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    COMMA           shift and go to state 42
    RPAREN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 18
    VOID            shift and go to state 19

  ! COMMA           [ reduce using rule 112 (empty -> .) ]
  ! INT             [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]
  ! BOOL            [ reduce using rule 112 (empty -> .) ]
  ! CHAR            [ reduce using rule 112 (empty -> .) ]
  ! VOID            [ reduce using rule 112 (empty -> .) ]

    params                         shift and go to state 41
    paramsblock                    shift and go to state 53
    empty                          shift and go to state 43
    type                           shift and go to state 39

state 50

    (20) params -> empty .

    COMMA           reduce using rule 20 (params -> empty .)
    INT             reduce using rule 20 (params -> empty .)
    FLOAT           reduce using rule 20 (params -> empty .)
    BOOL            reduce using rule 20 (params -> empty .)
    CHAR            reduce using rule 20 (params -> empty .)
    VOID            reduce using rule 20 (params -> empty .)
    RPAREN          reduce using rule 20 (params -> empty .)


state 51

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock . main1 block RCURLY
    (4) main1 -> . empty
    (112) empty -> .

    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    main1                          shift and go to state 54
    empty                          shift and go to state 55

state 52

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY . varsblock funcs1 block RCURLY
    (11) varsblock -> . vars varsblock
    (12) varsblock -> . empty
    (13) vars -> . VARDEF type ID vars1 SEMICOLON
    (112) empty -> .

    VARDEF          shift and go to state 8
    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    varsblock                      shift and go to state 56
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 53

    (17) paramsblock -> COMMA params paramsblock .

    RPAREN          reduce using rule 17 (paramsblock -> COMMA params paramsblock .)


state 54

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    block                          shift and go to state 57
    statute                        shift and go to state 58
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 55

    (4) main1 -> empty .

    IF              reduce using rule 4 (main1 -> empty .)
    ID              reduce using rule 4 (main1 -> empty .)
    CIN             reduce using rule 4 (main1 -> empty .)
    COUT            reduce using rule 4 (main1 -> empty .)
    DELAY           reduce using rule 4 (main1 -> empty .)
    FORWARD         reduce using rule 4 (main1 -> empty .)
    BACKWARD        reduce using rule 4 (main1 -> empty .)
    TURNLEFT        reduce using rule 4 (main1 -> empty .)
    TURNRIGHT       reduce using rule 4 (main1 -> empty .)
    SERVO           reduce using rule 4 (main1 -> empty .)
    LIGHTS          reduce using rule 4 (main1 -> empty .)
    DISTANCE        reduce using rule 4 (main1 -> empty .)
    STOP            reduce using rule 4 (main1 -> empty .)
    WHILE           reduce using rule 4 (main1 -> empty .)
    RETURN          reduce using rule 4 (main1 -> empty .)
    RCURLY          reduce using rule 4 (main1 -> empty .)


state 56

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock . funcs1 block RCURLY
    (9) funcs1 -> . empty
    (112) empty -> .

    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    funcs1                         shift and go to state 92
    empty                          shift and go to state 93

state 57

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block . RCURLY

    RCURLY          shift and go to state 94


state 58

    (21) block -> statute . SEMICOLON block

    SEMICOLON       shift and go to state 95


state 59

    (22) block -> empty .

    RCURLY          reduce using rule 22 (block -> empty .)


state 60

    (23) statute -> cond .

    SEMICOLON       reduce using rule 23 (statute -> cond .)


state 61

    (24) statute -> assign .

    SEMICOLON       reduce using rule 24 (statute -> assign .)


state 62

    (25) statute -> call .

    SEMICOLON       reduce using rule 25 (statute -> call .)


state 63

    (26) statute -> cin .

    SEMICOLON       reduce using rule 26 (statute -> cin .)


state 64

    (27) statute -> cout .

    SEMICOLON       reduce using rule 27 (statute -> cout .)


state 65

    (28) statute -> delay .

    SEMICOLON       reduce using rule 28 (statute -> delay .)


state 66

    (29) statute -> forward .

    SEMICOLON       reduce using rule 29 (statute -> forward .)


state 67

    (30) statute -> backward .

    SEMICOLON       reduce using rule 30 (statute -> backward .)


state 68

    (31) statute -> turnleft .

    SEMICOLON       reduce using rule 31 (statute -> turnleft .)


state 69

    (32) statute -> turnright .

    SEMICOLON       reduce using rule 32 (statute -> turnright .)


state 70

    (33) statute -> servo .

    SEMICOLON       reduce using rule 33 (statute -> servo .)


state 71

    (34) statute -> lights .

    SEMICOLON       reduce using rule 34 (statute -> lights .)


state 72

    (35) statute -> distance .

    SEMICOLON       reduce using rule 35 (statute -> distance .)


state 73

    (36) statute -> stop .

    SEMICOLON       reduce using rule 36 (statute -> stop .)


state 74

    (37) statute -> while .

    SEMICOLON       reduce using rule 37 (statute -> while .)


state 75

    (38) statute -> return .

    SEMICOLON       reduce using rule 38 (statute -> return .)


state 76

    (39) cond -> IF . LPAREN express RPAREN LCURLY gotoif block RCURLY else

    LPAREN          shift and go to state 96


state 77

    (44) assign -> ID . assign1 ASSIGN express
    (48) era -> ID .
    (45) assign1 -> . LBRACKET express RBRACKET
    (46) assign1 -> . empty
    (112) empty -> .

    LPAREN          reduce using rule 48 (era -> ID .)
    LBRACKET        shift and go to state 98
    ASSIGN          reduce using rule 112 (empty -> .)

    assign1                        shift and go to state 97
    empty                          shift and go to state 99

state 78

    (47) call -> era . LPAREN paramcall RPAREN

    LPAREN          shift and go to state 100


state 79

    (52) cin -> CIN . cin1
    (53) cin1 -> . cin2
    (54) cin1 -> . cin3
    (55) cin2 -> . LPAREN ID RPAREN
    (56) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 104
    LBRACKET        shift and go to state 105

    cin1                           shift and go to state 101
    cin2                           shift and go to state 102
    cin3                           shift and go to state 103

state 80

    (59) cout -> COUT . LPAREN express cout1 RPAREN

    LPAREN          shift and go to state 106


state 81

    (62) delay -> DELAY . LPAREN express RPAREN

    LPAREN          shift and go to state 107


state 82

    (63) forward -> FORWARD . LPAREN express RPAREN

    LPAREN          shift and go to state 108


state 83

    (64) backward -> BACKWARD . LPAREN express RPAREN

    LPAREN          shift and go to state 109


state 84

    (65) turnleft -> TURNLEFT . LPAREN express RPAREN

    LPAREN          shift and go to state 110


state 85

    (66) turnright -> TURNRIGHT . LPAREN express RPAREN

    LPAREN          shift and go to state 111


state 86

    (67) servo -> SERVO . LPAREN express RPAREN

    LPAREN          shift and go to state 112


state 87

    (68) lights -> LIGHTS . LPAREN express COMMA express RPAREN

    LPAREN          shift and go to state 113


state 88

    (69) distance -> DISTANCE . LPAREN RPAREN

    LPAREN          shift and go to state 114


state 89

    (70) stop -> STOP . LPAREN RPAREN

    LPAREN          shift and go to state 115


state 90

    (71) while -> WHILE . LPAREN express RPAREN while1 LCURLY block RCURLY

    LPAREN          shift and go to state 116


state 91

    (73) return -> RETURN . LPAREN express RPAREN

    LPAREN          shift and go to state 117


state 92

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    block                          shift and go to state 118
    statute                        shift and go to state 58
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 93

    (9) funcs1 -> empty .

    IF              reduce using rule 9 (funcs1 -> empty .)
    ID              reduce using rule 9 (funcs1 -> empty .)
    CIN             reduce using rule 9 (funcs1 -> empty .)
    COUT            reduce using rule 9 (funcs1 -> empty .)
    DELAY           reduce using rule 9 (funcs1 -> empty .)
    FORWARD         reduce using rule 9 (funcs1 -> empty .)
    BACKWARD        reduce using rule 9 (funcs1 -> empty .)
    TURNLEFT        reduce using rule 9 (funcs1 -> empty .)
    TURNRIGHT       reduce using rule 9 (funcs1 -> empty .)
    SERVO           reduce using rule 9 (funcs1 -> empty .)
    LIGHTS          reduce using rule 9 (funcs1 -> empty .)
    DISTANCE        reduce using rule 9 (funcs1 -> empty .)
    STOP            reduce using rule 9 (funcs1 -> empty .)
    WHILE           reduce using rule 9 (funcs1 -> empty .)
    RETURN          reduce using rule 9 (funcs1 -> empty .)
    RCURLY          reduce using rule 9 (funcs1 -> empty .)


state 94

    (3) main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY .

    FIN             reduce using rule 3 (main -> MAIN setmain LPAREN RPAREN LCURLY varsblock main1 block RCURLY .)


state 95

    (21) block -> statute SEMICOLON . block
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    statute                        shift and go to state 58
    block                          shift and go to state 119
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 96

    (39) cond -> IF LPAREN . express RPAREN LCURLY gotoif block RCURLY else
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 120
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 97

    (44) assign -> ID assign1 . ASSIGN express

    ASSIGN          shift and go to state 124


state 98

    (45) assign1 -> LBRACKET . express RBRACKET
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 125
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 99

    (46) assign1 -> empty .

    ASSIGN          reduce using rule 46 (assign1 -> empty .)


state 100

    (47) call -> era LPAREN . paramcall RPAREN
    (49) paramcall -> . express paramcall1
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    paramcall                      shift and go to state 126
    express                        shift and go to state 127
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 101

    (52) cin -> CIN cin1 .

    SEMICOLON       reduce using rule 52 (cin -> CIN cin1 .)


state 102

    (53) cin1 -> cin2 .

    SEMICOLON       reduce using rule 53 (cin1 -> cin2 .)


state 103

    (54) cin1 -> cin3 .

    SEMICOLON       reduce using rule 54 (cin1 -> cin3 .)


state 104

    (55) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 128


state 105

    (56) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 129


state 106

    (59) cout -> COUT LPAREN . express cout1 RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 130
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 107

    (62) delay -> DELAY LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 131
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 108

    (63) forward -> FORWARD LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 132
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 109

    (64) backward -> BACKWARD LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 133
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 110

    (65) turnleft -> TURNLEFT LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 134
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 111

    (66) turnright -> TURNRIGHT LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 135
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 112

    (67) servo -> SERVO LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 136
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 113

    (68) lights -> LIGHTS LPAREN . express COMMA express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 137
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 114

    (69) distance -> DISTANCE LPAREN . RPAREN

    RPAREN          shift and go to state 138


state 115

    (70) stop -> STOP LPAREN . RPAREN

    RPAREN          shift and go to state 139


state 116

    (71) while -> WHILE LPAREN . express RPAREN while1 LCURLY block RCURLY
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 140
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 117

    (73) return -> RETURN LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 141
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 118

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block . RCURLY

    RCURLY          shift and go to state 142


state 119

    (21) block -> statute SEMICOLON block .

    RCURLY          reduce using rule 21 (block -> statute SEMICOLON block .)


state 120

    (39) cond -> IF LPAREN express . RPAREN LCURLY gotoif block RCURLY else

    RPAREN          shift and go to state 143


state 121

    (84) express -> express1 . relational express2
    (91) relational -> . exp relational1
    (92) relational -> . NOT
    (99) exp -> . term exp1
    (104) term -> . factor term1
    (109) factor -> . LPAREN express RPAREN
    (110) factor -> . constant
    (111) factor -> . call
    (79) constant -> . ID
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (47) call -> . era LPAREN paramcall RPAREN
    (48) era -> . ID

    NOT             shift and go to state 146
    LPAREN          shift and go to state 149
    ID              shift and go to state 152
    CTE_INT         shift and go to state 153
    CTE_FLOAT       shift and go to state 154
    CTE_CHAR        shift and go to state 155
    CTE_BOOL        shift and go to state 156

    relational                     shift and go to state 144
    exp                            shift and go to state 145
    term                           shift and go to state 147
    factor                         shift and go to state 148
    constant                       shift and go to state 150
    call                           shift and go to state 151
    era                            shift and go to state 78

state 122

    (85) express1 -> NOTEQUALS .

    NOT             reduce using rule 85 (express1 -> NOTEQUALS .)
    LPAREN          reduce using rule 85 (express1 -> NOTEQUALS .)
    ID              reduce using rule 85 (express1 -> NOTEQUALS .)
    CTE_INT         reduce using rule 85 (express1 -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 85 (express1 -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 85 (express1 -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 85 (express1 -> NOTEQUALS .)


state 123

    (86) express1 -> empty .

    NOT             reduce using rule 86 (express1 -> empty .)
    LPAREN          reduce using rule 86 (express1 -> empty .)
    ID              reduce using rule 86 (express1 -> empty .)
    CTE_INT         reduce using rule 86 (express1 -> empty .)
    CTE_FLOAT       reduce using rule 86 (express1 -> empty .)
    CTE_CHAR        reduce using rule 86 (express1 -> empty .)
    CTE_BOOL        reduce using rule 86 (express1 -> empty .)


state 124

    (44) assign -> ID assign1 ASSIGN . express
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 157
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 125

    (45) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 158


state 126

    (47) call -> era LPAREN paramcall . RPAREN

    RPAREN          shift and go to state 159


state 127

    (49) paramcall -> express . paramcall1
    (50) paramcall1 -> . COMMA paramcall
    (51) paramcall1 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 161
    RPAREN          reduce using rule 112 (empty -> .)

    paramcall1                     shift and go to state 160
    empty                          shift and go to state 162

state 128

    (55) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 163


state 129

    (56) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 164


state 130

    (59) cout -> COUT LPAREN express . cout1 RPAREN
    (60) cout1 -> . COMMA express cout1
    (61) cout1 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 112 (empty -> .)

    cout1                          shift and go to state 165
    empty                          shift and go to state 167

state 131

    (62) delay -> DELAY LPAREN express . RPAREN

    RPAREN          shift and go to state 168


state 132

    (63) forward -> FORWARD LPAREN express . RPAREN

    RPAREN          shift and go to state 169


state 133

    (64) backward -> BACKWARD LPAREN express . RPAREN

    RPAREN          shift and go to state 170


state 134

    (65) turnleft -> TURNLEFT LPAREN express . RPAREN

    RPAREN          shift and go to state 171


state 135

    (66) turnright -> TURNRIGHT LPAREN express . RPAREN

    RPAREN          shift and go to state 172


state 136

    (67) servo -> SERVO LPAREN express . RPAREN

    RPAREN          shift and go to state 173


state 137

    (68) lights -> LIGHTS LPAREN express . COMMA express RPAREN

    COMMA           shift and go to state 174


state 138

    (69) distance -> DISTANCE LPAREN RPAREN .

    SEMICOLON       reduce using rule 69 (distance -> DISTANCE LPAREN RPAREN .)


state 139

    (70) stop -> STOP LPAREN RPAREN .

    SEMICOLON       reduce using rule 70 (stop -> STOP LPAREN RPAREN .)


state 140

    (71) while -> WHILE LPAREN express . RPAREN while1 LCURLY block RCURLY

    RPAREN          shift and go to state 175


state 141

    (73) return -> RETURN LPAREN express . RPAREN

    RPAREN          shift and go to state 176


state 142

    (8) funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .

    FUNCDEF         reduce using rule 8 (funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .)
    MAIN            reduce using rule 8 (funcs -> FUNCDEF type setscope LPAREN paramsblock RPAREN LCURLY varsblock funcs1 block RCURLY .)


state 143

    (39) cond -> IF LPAREN express RPAREN . LCURLY gotoif block RCURLY else

    LCURLY          shift and go to state 177


state 144

    (84) express -> express1 relational . express2
    (87) express2 -> . andor express
    (88) express2 -> . empty
    (89) andor -> . AND
    (90) andor -> . OR
    (112) empty -> .

    AND             shift and go to state 181
    OR              shift and go to state 182
    RPAREN          reduce using rule 112 (empty -> .)
    RBRACKET        reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    express2                       shift and go to state 178
    andor                          shift and go to state 179
    empty                          shift and go to state 180

state 145

    (91) relational -> exp . relational1
    (93) relational1 -> . compare exp
    (94) relational1 -> . empty
    (95) compare -> . LESSTHAN
    (96) compare -> . GREATERTHAN
    (97) compare -> . EQUALS
    (98) compare -> . NOTEQUALS
    (112) empty -> .

    LESSTHAN        shift and go to state 186
    GREATERTHAN     shift and go to state 187
    EQUALS          shift and go to state 188
    NOTEQUALS       shift and go to state 189
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    RBRACKET        reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    relational1                    shift and go to state 183
    compare                        shift and go to state 184
    empty                          shift and go to state 185

state 146

    (92) relational -> NOT .

    AND             reduce using rule 92 (relational -> NOT .)
    OR              reduce using rule 92 (relational -> NOT .)
    RPAREN          reduce using rule 92 (relational -> NOT .)
    RBRACKET        reduce using rule 92 (relational -> NOT .)
    COMMA           reduce using rule 92 (relational -> NOT .)
    SEMICOLON       reduce using rule 92 (relational -> NOT .)


state 147

    (99) exp -> term . exp1
    (100) exp1 -> . plusminus exp
    (101) exp1 -> . empty
    (102) plusminus -> . PLUS
    (103) plusminus -> . MINUS
    (112) empty -> .

    PLUS            shift and go to state 193
    MINUS           shift and go to state 194
    LESSTHAN        reduce using rule 112 (empty -> .)
    GREATERTHAN     reduce using rule 112 (empty -> .)
    EQUALS          reduce using rule 112 (empty -> .)
    NOTEQUALS       reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    RBRACKET        reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    exp1                           shift and go to state 190
    plusminus                      shift and go to state 191
    empty                          shift and go to state 192

state 148

    (104) term -> factor . term1
    (105) term1 -> . multidivi term
    (106) term1 -> . empty
    (107) multidivi -> . MULTI
    (108) multidivi -> . DIVI
    (112) empty -> .

    MULTI           shift and go to state 198
    DIVI            shift and go to state 199
    PLUS            reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    LESSTHAN        reduce using rule 112 (empty -> .)
    GREATERTHAN     reduce using rule 112 (empty -> .)
    EQUALS          reduce using rule 112 (empty -> .)
    NOTEQUALS       reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    RBRACKET        reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    term1                          shift and go to state 195
    multidivi                      shift and go to state 196
    empty                          shift and go to state 197

state 149

    (109) factor -> LPAREN . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 200
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 150

    (110) factor -> constant .

    MULTI           reduce using rule 110 (factor -> constant .)
    DIVI            reduce using rule 110 (factor -> constant .)
    PLUS            reduce using rule 110 (factor -> constant .)
    MINUS           reduce using rule 110 (factor -> constant .)
    LESSTHAN        reduce using rule 110 (factor -> constant .)
    GREATERTHAN     reduce using rule 110 (factor -> constant .)
    EQUALS          reduce using rule 110 (factor -> constant .)
    NOTEQUALS       reduce using rule 110 (factor -> constant .)
    AND             reduce using rule 110 (factor -> constant .)
    OR              reduce using rule 110 (factor -> constant .)
    RPAREN          reduce using rule 110 (factor -> constant .)
    RBRACKET        reduce using rule 110 (factor -> constant .)
    COMMA           reduce using rule 110 (factor -> constant .)
    SEMICOLON       reduce using rule 110 (factor -> constant .)


state 151

    (111) factor -> call .

    MULTI           reduce using rule 111 (factor -> call .)
    DIVI            reduce using rule 111 (factor -> call .)
    PLUS            reduce using rule 111 (factor -> call .)
    MINUS           reduce using rule 111 (factor -> call .)
    LESSTHAN        reduce using rule 111 (factor -> call .)
    GREATERTHAN     reduce using rule 111 (factor -> call .)
    EQUALS          reduce using rule 111 (factor -> call .)
    NOTEQUALS       reduce using rule 111 (factor -> call .)
    AND             reduce using rule 111 (factor -> call .)
    OR              reduce using rule 111 (factor -> call .)
    RPAREN          reduce using rule 111 (factor -> call .)
    RBRACKET        reduce using rule 111 (factor -> call .)
    COMMA           reduce using rule 111 (factor -> call .)
    SEMICOLON       reduce using rule 111 (factor -> call .)


state 152

    (79) constant -> ID .
    (48) era -> ID .

    MULTI           reduce using rule 79 (constant -> ID .)
    DIVI            reduce using rule 79 (constant -> ID .)
    PLUS            reduce using rule 79 (constant -> ID .)
    MINUS           reduce using rule 79 (constant -> ID .)
    LESSTHAN        reduce using rule 79 (constant -> ID .)
    GREATERTHAN     reduce using rule 79 (constant -> ID .)
    EQUALS          reduce using rule 79 (constant -> ID .)
    NOTEQUALS       reduce using rule 79 (constant -> ID .)
    AND             reduce using rule 79 (constant -> ID .)
    OR              reduce using rule 79 (constant -> ID .)
    RPAREN          reduce using rule 79 (constant -> ID .)
    RBRACKET        reduce using rule 79 (constant -> ID .)
    COMMA           reduce using rule 79 (constant -> ID .)
    SEMICOLON       reduce using rule 79 (constant -> ID .)
    LPAREN          reduce using rule 48 (era -> ID .)


state 153

    (80) constant -> CTE_INT .

    MULTI           reduce using rule 80 (constant -> CTE_INT .)
    DIVI            reduce using rule 80 (constant -> CTE_INT .)
    PLUS            reduce using rule 80 (constant -> CTE_INT .)
    MINUS           reduce using rule 80 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 80 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 80 (constant -> CTE_INT .)
    EQUALS          reduce using rule 80 (constant -> CTE_INT .)
    NOTEQUALS       reduce using rule 80 (constant -> CTE_INT .)
    AND             reduce using rule 80 (constant -> CTE_INT .)
    OR              reduce using rule 80 (constant -> CTE_INT .)
    RPAREN          reduce using rule 80 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 80 (constant -> CTE_INT .)
    COMMA           reduce using rule 80 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 80 (constant -> CTE_INT .)


state 154

    (81) constant -> CTE_FLOAT .

    MULTI           reduce using rule 81 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 81 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 81 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 81 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 81 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 81 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 81 (constant -> CTE_FLOAT .)
    NOTEQUALS       reduce using rule 81 (constant -> CTE_FLOAT .)
    AND             reduce using rule 81 (constant -> CTE_FLOAT .)
    OR              reduce using rule 81 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 81 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 81 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 81 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 81 (constant -> CTE_FLOAT .)


state 155

    (82) constant -> CTE_CHAR .

    MULTI           reduce using rule 82 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 82 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 82 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 82 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 82 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 82 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 82 (constant -> CTE_CHAR .)
    NOTEQUALS       reduce using rule 82 (constant -> CTE_CHAR .)
    AND             reduce using rule 82 (constant -> CTE_CHAR .)
    OR              reduce using rule 82 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 82 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 82 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 82 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 82 (constant -> CTE_CHAR .)


state 156

    (83) constant -> CTE_BOOL .

    MULTI           reduce using rule 83 (constant -> CTE_BOOL .)
    DIVI            reduce using rule 83 (constant -> CTE_BOOL .)
    PLUS            reduce using rule 83 (constant -> CTE_BOOL .)
    MINUS           reduce using rule 83 (constant -> CTE_BOOL .)
    LESSTHAN        reduce using rule 83 (constant -> CTE_BOOL .)
    GREATERTHAN     reduce using rule 83 (constant -> CTE_BOOL .)
    EQUALS          reduce using rule 83 (constant -> CTE_BOOL .)
    NOTEQUALS       reduce using rule 83 (constant -> CTE_BOOL .)
    AND             reduce using rule 83 (constant -> CTE_BOOL .)
    OR              reduce using rule 83 (constant -> CTE_BOOL .)
    RPAREN          reduce using rule 83 (constant -> CTE_BOOL .)
    RBRACKET        reduce using rule 83 (constant -> CTE_BOOL .)
    COMMA           reduce using rule 83 (constant -> CTE_BOOL .)
    SEMICOLON       reduce using rule 83 (constant -> CTE_BOOL .)


state 157

    (44) assign -> ID assign1 ASSIGN express .

    SEMICOLON       reduce using rule 44 (assign -> ID assign1 ASSIGN express .)


state 158

    (45) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 45 (assign1 -> LBRACKET express RBRACKET .)


state 159

    (47) call -> era LPAREN paramcall RPAREN .

    SEMICOLON       reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    MULTI           reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    DIVI            reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    PLUS            reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    MINUS           reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    LESSTHAN        reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    GREATERTHAN     reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    EQUALS          reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    NOTEQUALS       reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    AND             reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    OR              reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    RPAREN          reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    RBRACKET        reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)
    COMMA           reduce using rule 47 (call -> era LPAREN paramcall RPAREN .)


state 160

    (49) paramcall -> express paramcall1 .

    RPAREN          reduce using rule 49 (paramcall -> express paramcall1 .)


state 161

    (50) paramcall1 -> COMMA . paramcall
    (49) paramcall -> . express paramcall1
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    paramcall                      shift and go to state 201
    express                        shift and go to state 127
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 162

    (51) paramcall1 -> empty .

    RPAREN          reduce using rule 51 (paramcall1 -> empty .)


state 163

    (55) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 55 (cin2 -> LPAREN ID RPAREN .)


state 164

    (56) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 202


state 165

    (59) cout -> COUT LPAREN express cout1 . RPAREN

    RPAREN          shift and go to state 203


state 166

    (60) cout1 -> COMMA . express cout1
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 204
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 167

    (61) cout1 -> empty .

    RPAREN          reduce using rule 61 (cout1 -> empty .)


state 168

    (62) delay -> DELAY LPAREN express RPAREN .

    SEMICOLON       reduce using rule 62 (delay -> DELAY LPAREN express RPAREN .)


state 169

    (63) forward -> FORWARD LPAREN express RPAREN .

    SEMICOLON       reduce using rule 63 (forward -> FORWARD LPAREN express RPAREN .)


state 170

    (64) backward -> BACKWARD LPAREN express RPAREN .

    SEMICOLON       reduce using rule 64 (backward -> BACKWARD LPAREN express RPAREN .)


state 171

    (65) turnleft -> TURNLEFT LPAREN express RPAREN .

    SEMICOLON       reduce using rule 65 (turnleft -> TURNLEFT LPAREN express RPAREN .)


state 172

    (66) turnright -> TURNRIGHT LPAREN express RPAREN .

    SEMICOLON       reduce using rule 66 (turnright -> TURNRIGHT LPAREN express RPAREN .)


state 173

    (67) servo -> SERVO LPAREN express RPAREN .

    SEMICOLON       reduce using rule 67 (servo -> SERVO LPAREN express RPAREN .)


state 174

    (68) lights -> LIGHTS LPAREN express COMMA . express RPAREN
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 205
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 175

    (71) while -> WHILE LPAREN express RPAREN . while1 LCURLY block RCURLY
    (72) while1 -> . empty
    (112) empty -> .

    LCURLY          reduce using rule 112 (empty -> .)

    while1                         shift and go to state 206
    empty                          shift and go to state 207

state 176

    (73) return -> RETURN LPAREN express RPAREN .

    SEMICOLON       reduce using rule 73 (return -> RETURN LPAREN express RPAREN .)


state 177

    (39) cond -> IF LPAREN express RPAREN LCURLY . gotoif block RCURLY else
    (40) gotoif -> . empty
    (112) empty -> .

    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    gotoif                         shift and go to state 208
    empty                          shift and go to state 209

state 178

    (84) express -> express1 relational express2 .

    RPAREN          reduce using rule 84 (express -> express1 relational express2 .)
    RBRACKET        reduce using rule 84 (express -> express1 relational express2 .)
    COMMA           reduce using rule 84 (express -> express1 relational express2 .)
    SEMICOLON       reduce using rule 84 (express -> express1 relational express2 .)


state 179

    (87) express2 -> andor . express
    (84) express -> . express1 relational express2
    (85) express1 -> . NOTEQUALS
    (86) express1 -> . empty
    (112) empty -> .

    NOTEQUALS       shift and go to state 122
    NOT             reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTE_INT         reduce using rule 112 (empty -> .)
    CTE_FLOAT       reduce using rule 112 (empty -> .)
    CTE_CHAR        reduce using rule 112 (empty -> .)
    CTE_BOOL        reduce using rule 112 (empty -> .)

    express                        shift and go to state 210
    express1                       shift and go to state 121
    empty                          shift and go to state 123

state 180

    (88) express2 -> empty .

    RPAREN          reduce using rule 88 (express2 -> empty .)
    RBRACKET        reduce using rule 88 (express2 -> empty .)
    COMMA           reduce using rule 88 (express2 -> empty .)
    SEMICOLON       reduce using rule 88 (express2 -> empty .)


state 181

    (89) andor -> AND .

    NOTEQUALS       reduce using rule 89 (andor -> AND .)
    NOT             reduce using rule 89 (andor -> AND .)
    LPAREN          reduce using rule 89 (andor -> AND .)
    ID              reduce using rule 89 (andor -> AND .)
    CTE_INT         reduce using rule 89 (andor -> AND .)
    CTE_FLOAT       reduce using rule 89 (andor -> AND .)
    CTE_CHAR        reduce using rule 89 (andor -> AND .)
    CTE_BOOL        reduce using rule 89 (andor -> AND .)


state 182

    (90) andor -> OR .

    NOTEQUALS       reduce using rule 90 (andor -> OR .)
    NOT             reduce using rule 90 (andor -> OR .)
    LPAREN          reduce using rule 90 (andor -> OR .)
    ID              reduce using rule 90 (andor -> OR .)
    CTE_INT         reduce using rule 90 (andor -> OR .)
    CTE_FLOAT       reduce using rule 90 (andor -> OR .)
    CTE_CHAR        reduce using rule 90 (andor -> OR .)
    CTE_BOOL        reduce using rule 90 (andor -> OR .)


state 183

    (91) relational -> exp relational1 .

    AND             reduce using rule 91 (relational -> exp relational1 .)
    OR              reduce using rule 91 (relational -> exp relational1 .)
    RPAREN          reduce using rule 91 (relational -> exp relational1 .)
    RBRACKET        reduce using rule 91 (relational -> exp relational1 .)
    COMMA           reduce using rule 91 (relational -> exp relational1 .)
    SEMICOLON       reduce using rule 91 (relational -> exp relational1 .)


state 184

    (93) relational1 -> compare . exp
    (99) exp -> . term exp1
    (104) term -> . factor term1
    (109) factor -> . LPAREN express RPAREN
    (110) factor -> . constant
    (111) factor -> . call
    (79) constant -> . ID
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (47) call -> . era LPAREN paramcall RPAREN
    (48) era -> . ID

    LPAREN          shift and go to state 149
    ID              shift and go to state 152
    CTE_INT         shift and go to state 153
    CTE_FLOAT       shift and go to state 154
    CTE_CHAR        shift and go to state 155
    CTE_BOOL        shift and go to state 156

    exp                            shift and go to state 211
    term                           shift and go to state 147
    factor                         shift and go to state 148
    constant                       shift and go to state 150
    call                           shift and go to state 151
    era                            shift and go to state 78

state 185

    (94) relational1 -> empty .

    AND             reduce using rule 94 (relational1 -> empty .)
    OR              reduce using rule 94 (relational1 -> empty .)
    RPAREN          reduce using rule 94 (relational1 -> empty .)
    RBRACKET        reduce using rule 94 (relational1 -> empty .)
    COMMA           reduce using rule 94 (relational1 -> empty .)
    SEMICOLON       reduce using rule 94 (relational1 -> empty .)


state 186

    (95) compare -> LESSTHAN .

    LPAREN          reduce using rule 95 (compare -> LESSTHAN .)
    ID              reduce using rule 95 (compare -> LESSTHAN .)
    CTE_INT         reduce using rule 95 (compare -> LESSTHAN .)
    CTE_FLOAT       reduce using rule 95 (compare -> LESSTHAN .)
    CTE_CHAR        reduce using rule 95 (compare -> LESSTHAN .)
    CTE_BOOL        reduce using rule 95 (compare -> LESSTHAN .)


state 187

    (96) compare -> GREATERTHAN .

    LPAREN          reduce using rule 96 (compare -> GREATERTHAN .)
    ID              reduce using rule 96 (compare -> GREATERTHAN .)
    CTE_INT         reduce using rule 96 (compare -> GREATERTHAN .)
    CTE_FLOAT       reduce using rule 96 (compare -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 96 (compare -> GREATERTHAN .)
    CTE_BOOL        reduce using rule 96 (compare -> GREATERTHAN .)


state 188

    (97) compare -> EQUALS .

    LPAREN          reduce using rule 97 (compare -> EQUALS .)
    ID              reduce using rule 97 (compare -> EQUALS .)
    CTE_INT         reduce using rule 97 (compare -> EQUALS .)
    CTE_FLOAT       reduce using rule 97 (compare -> EQUALS .)
    CTE_CHAR        reduce using rule 97 (compare -> EQUALS .)
    CTE_BOOL        reduce using rule 97 (compare -> EQUALS .)


state 189

    (98) compare -> NOTEQUALS .

    LPAREN          reduce using rule 98 (compare -> NOTEQUALS .)
    ID              reduce using rule 98 (compare -> NOTEQUALS .)
    CTE_INT         reduce using rule 98 (compare -> NOTEQUALS .)
    CTE_FLOAT       reduce using rule 98 (compare -> NOTEQUALS .)
    CTE_CHAR        reduce using rule 98 (compare -> NOTEQUALS .)
    CTE_BOOL        reduce using rule 98 (compare -> NOTEQUALS .)


state 190

    (99) exp -> term exp1 .

    LESSTHAN        reduce using rule 99 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 99 (exp -> term exp1 .)
    EQUALS          reduce using rule 99 (exp -> term exp1 .)
    NOTEQUALS       reduce using rule 99 (exp -> term exp1 .)
    AND             reduce using rule 99 (exp -> term exp1 .)
    OR              reduce using rule 99 (exp -> term exp1 .)
    RPAREN          reduce using rule 99 (exp -> term exp1 .)
    RBRACKET        reduce using rule 99 (exp -> term exp1 .)
    COMMA           reduce using rule 99 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 99 (exp -> term exp1 .)


state 191

    (100) exp1 -> plusminus . exp
    (99) exp -> . term exp1
    (104) term -> . factor term1
    (109) factor -> . LPAREN express RPAREN
    (110) factor -> . constant
    (111) factor -> . call
    (79) constant -> . ID
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (47) call -> . era LPAREN paramcall RPAREN
    (48) era -> . ID

    LPAREN          shift and go to state 149
    ID              shift and go to state 152
    CTE_INT         shift and go to state 153
    CTE_FLOAT       shift and go to state 154
    CTE_CHAR        shift and go to state 155
    CTE_BOOL        shift and go to state 156

    exp                            shift and go to state 212
    term                           shift and go to state 147
    factor                         shift and go to state 148
    constant                       shift and go to state 150
    call                           shift and go to state 151
    era                            shift and go to state 78

state 192

    (101) exp1 -> empty .

    LESSTHAN        reduce using rule 101 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 101 (exp1 -> empty .)
    EQUALS          reduce using rule 101 (exp1 -> empty .)
    NOTEQUALS       reduce using rule 101 (exp1 -> empty .)
    AND             reduce using rule 101 (exp1 -> empty .)
    OR              reduce using rule 101 (exp1 -> empty .)
    RPAREN          reduce using rule 101 (exp1 -> empty .)
    RBRACKET        reduce using rule 101 (exp1 -> empty .)
    COMMA           reduce using rule 101 (exp1 -> empty .)
    SEMICOLON       reduce using rule 101 (exp1 -> empty .)


state 193

    (102) plusminus -> PLUS .

    LPAREN          reduce using rule 102 (plusminus -> PLUS .)
    ID              reduce using rule 102 (plusminus -> PLUS .)
    CTE_INT         reduce using rule 102 (plusminus -> PLUS .)
    CTE_FLOAT       reduce using rule 102 (plusminus -> PLUS .)
    CTE_CHAR        reduce using rule 102 (plusminus -> PLUS .)
    CTE_BOOL        reduce using rule 102 (plusminus -> PLUS .)


state 194

    (103) plusminus -> MINUS .

    LPAREN          reduce using rule 103 (plusminus -> MINUS .)
    ID              reduce using rule 103 (plusminus -> MINUS .)
    CTE_INT         reduce using rule 103 (plusminus -> MINUS .)
    CTE_FLOAT       reduce using rule 103 (plusminus -> MINUS .)
    CTE_CHAR        reduce using rule 103 (plusminus -> MINUS .)
    CTE_BOOL        reduce using rule 103 (plusminus -> MINUS .)


state 195

    (104) term -> factor term1 .

    PLUS            reduce using rule 104 (term -> factor term1 .)
    MINUS           reduce using rule 104 (term -> factor term1 .)
    LESSTHAN        reduce using rule 104 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 104 (term -> factor term1 .)
    EQUALS          reduce using rule 104 (term -> factor term1 .)
    NOTEQUALS       reduce using rule 104 (term -> factor term1 .)
    AND             reduce using rule 104 (term -> factor term1 .)
    OR              reduce using rule 104 (term -> factor term1 .)
    RPAREN          reduce using rule 104 (term -> factor term1 .)
    RBRACKET        reduce using rule 104 (term -> factor term1 .)
    COMMA           reduce using rule 104 (term -> factor term1 .)
    SEMICOLON       reduce using rule 104 (term -> factor term1 .)


state 196

    (105) term1 -> multidivi . term
    (104) term -> . factor term1
    (109) factor -> . LPAREN express RPAREN
    (110) factor -> . constant
    (111) factor -> . call
    (79) constant -> . ID
    (80) constant -> . CTE_INT
    (81) constant -> . CTE_FLOAT
    (82) constant -> . CTE_CHAR
    (83) constant -> . CTE_BOOL
    (47) call -> . era LPAREN paramcall RPAREN
    (48) era -> . ID

    LPAREN          shift and go to state 149
    ID              shift and go to state 152
    CTE_INT         shift and go to state 153
    CTE_FLOAT       shift and go to state 154
    CTE_CHAR        shift and go to state 155
    CTE_BOOL        shift and go to state 156

    term                           shift and go to state 213
    factor                         shift and go to state 148
    constant                       shift and go to state 150
    call                           shift and go to state 151
    era                            shift and go to state 78

state 197

    (106) term1 -> empty .

    PLUS            reduce using rule 106 (term1 -> empty .)
    MINUS           reduce using rule 106 (term1 -> empty .)
    LESSTHAN        reduce using rule 106 (term1 -> empty .)
    GREATERTHAN     reduce using rule 106 (term1 -> empty .)
    EQUALS          reduce using rule 106 (term1 -> empty .)
    NOTEQUALS       reduce using rule 106 (term1 -> empty .)
    AND             reduce using rule 106 (term1 -> empty .)
    OR              reduce using rule 106 (term1 -> empty .)
    RPAREN          reduce using rule 106 (term1 -> empty .)
    RBRACKET        reduce using rule 106 (term1 -> empty .)
    COMMA           reduce using rule 106 (term1 -> empty .)
    SEMICOLON       reduce using rule 106 (term1 -> empty .)


state 198

    (107) multidivi -> MULTI .

    LPAREN          reduce using rule 107 (multidivi -> MULTI .)
    ID              reduce using rule 107 (multidivi -> MULTI .)
    CTE_INT         reduce using rule 107 (multidivi -> MULTI .)
    CTE_FLOAT       reduce using rule 107 (multidivi -> MULTI .)
    CTE_CHAR        reduce using rule 107 (multidivi -> MULTI .)
    CTE_BOOL        reduce using rule 107 (multidivi -> MULTI .)


state 199

    (108) multidivi -> DIVI .

    LPAREN          reduce using rule 108 (multidivi -> DIVI .)
    ID              reduce using rule 108 (multidivi -> DIVI .)
    CTE_INT         reduce using rule 108 (multidivi -> DIVI .)
    CTE_FLOAT       reduce using rule 108 (multidivi -> DIVI .)
    CTE_CHAR        reduce using rule 108 (multidivi -> DIVI .)
    CTE_BOOL        reduce using rule 108 (multidivi -> DIVI .)


state 200

    (109) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 214


state 201

    (50) paramcall1 -> COMMA paramcall .

    RPAREN          reduce using rule 50 (paramcall1 -> COMMA paramcall .)


state 202

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 216
    RPAREN          reduce using rule 112 (empty -> .)

    cin4                           shift and go to state 215
    empty                          shift and go to state 217

state 203

    (59) cout -> COUT LPAREN express cout1 RPAREN .

    SEMICOLON       reduce using rule 59 (cout -> COUT LPAREN express cout1 RPAREN .)


state 204

    (60) cout1 -> COMMA express . cout1
    (60) cout1 -> . COMMA express cout1
    (61) cout1 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 112 (empty -> .)

    cout1                          shift and go to state 218
    empty                          shift and go to state 167

state 205

    (68) lights -> LIGHTS LPAREN express COMMA express . RPAREN

    RPAREN          shift and go to state 219


state 206

    (71) while -> WHILE LPAREN express RPAREN while1 . LCURLY block RCURLY

    LCURLY          shift and go to state 220


state 207

    (72) while1 -> empty .

    LCURLY          reduce using rule 72 (while1 -> empty .)


state 208

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif . block RCURLY else
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    block                          shift and go to state 221
    statute                        shift and go to state 58
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 209

    (40) gotoif -> empty .

    IF              reduce using rule 40 (gotoif -> empty .)
    ID              reduce using rule 40 (gotoif -> empty .)
    CIN             reduce using rule 40 (gotoif -> empty .)
    COUT            reduce using rule 40 (gotoif -> empty .)
    DELAY           reduce using rule 40 (gotoif -> empty .)
    FORWARD         reduce using rule 40 (gotoif -> empty .)
    BACKWARD        reduce using rule 40 (gotoif -> empty .)
    TURNLEFT        reduce using rule 40 (gotoif -> empty .)
    TURNRIGHT       reduce using rule 40 (gotoif -> empty .)
    SERVO           reduce using rule 40 (gotoif -> empty .)
    LIGHTS          reduce using rule 40 (gotoif -> empty .)
    DISTANCE        reduce using rule 40 (gotoif -> empty .)
    STOP            reduce using rule 40 (gotoif -> empty .)
    WHILE           reduce using rule 40 (gotoif -> empty .)
    RETURN          reduce using rule 40 (gotoif -> empty .)
    RCURLY          reduce using rule 40 (gotoif -> empty .)


state 210

    (87) express2 -> andor express .

    RPAREN          reduce using rule 87 (express2 -> andor express .)
    RBRACKET        reduce using rule 87 (express2 -> andor express .)
    COMMA           reduce using rule 87 (express2 -> andor express .)
    SEMICOLON       reduce using rule 87 (express2 -> andor express .)


state 211

    (93) relational1 -> compare exp .

    AND             reduce using rule 93 (relational1 -> compare exp .)
    OR              reduce using rule 93 (relational1 -> compare exp .)
    RPAREN          reduce using rule 93 (relational1 -> compare exp .)
    RBRACKET        reduce using rule 93 (relational1 -> compare exp .)
    COMMA           reduce using rule 93 (relational1 -> compare exp .)
    SEMICOLON       reduce using rule 93 (relational1 -> compare exp .)


state 212

    (100) exp1 -> plusminus exp .

    LESSTHAN        reduce using rule 100 (exp1 -> plusminus exp .)
    GREATERTHAN     reduce using rule 100 (exp1 -> plusminus exp .)
    EQUALS          reduce using rule 100 (exp1 -> plusminus exp .)
    NOTEQUALS       reduce using rule 100 (exp1 -> plusminus exp .)
    AND             reduce using rule 100 (exp1 -> plusminus exp .)
    OR              reduce using rule 100 (exp1 -> plusminus exp .)
    RPAREN          reduce using rule 100 (exp1 -> plusminus exp .)
    RBRACKET        reduce using rule 100 (exp1 -> plusminus exp .)
    COMMA           reduce using rule 100 (exp1 -> plusminus exp .)
    SEMICOLON       reduce using rule 100 (exp1 -> plusminus exp .)


state 213

    (105) term1 -> multidivi term .

    PLUS            reduce using rule 105 (term1 -> multidivi term .)
    MINUS           reduce using rule 105 (term1 -> multidivi term .)
    LESSTHAN        reduce using rule 105 (term1 -> multidivi term .)
    GREATERTHAN     reduce using rule 105 (term1 -> multidivi term .)
    EQUALS          reduce using rule 105 (term1 -> multidivi term .)
    NOTEQUALS       reduce using rule 105 (term1 -> multidivi term .)
    AND             reduce using rule 105 (term1 -> multidivi term .)
    OR              reduce using rule 105 (term1 -> multidivi term .)
    RPAREN          reduce using rule 105 (term1 -> multidivi term .)
    RBRACKET        reduce using rule 105 (term1 -> multidivi term .)
    COMMA           reduce using rule 105 (term1 -> multidivi term .)
    SEMICOLON       reduce using rule 105 (term1 -> multidivi term .)


state 214

    (109) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 109 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 109 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 109 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 109 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 109 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 109 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 109 (factor -> LPAREN express RPAREN .)
    NOTEQUALS       reduce using rule 109 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 109 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 109 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 109 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 109 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 109 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 109 (factor -> LPAREN express RPAREN .)


state 215

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 222


state 216

    (57) cin4 -> COMMA . ID cin4

    ID              shift and go to state 223


state 217

    (58) cin4 -> empty .

    RPAREN          reduce using rule 58 (cin4 -> empty .)


state 218

    (60) cout1 -> COMMA express cout1 .

    RPAREN          reduce using rule 60 (cout1 -> COMMA express cout1 .)


state 219

    (68) lights -> LIGHTS LPAREN express COMMA express RPAREN .

    SEMICOLON       reduce using rule 68 (lights -> LIGHTS LPAREN express COMMA express RPAREN .)


state 220

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY . block RCURLY
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    block                          shift and go to state 224
    statute                        shift and go to state 58
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 221

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block . RCURLY else

    RCURLY          shift and go to state 225


state 222

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 56 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 223

    (57) cin4 -> COMMA ID . cin4
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 216
    RPAREN          reduce using rule 112 (empty -> .)

    cin4                           shift and go to state 226
    empty                          shift and go to state 217

state 224

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY block . RCURLY

    RCURLY          shift and go to state 227


state 225

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . empty
    (112) empty -> .

    ELSE            shift and go to state 229
    SEMICOLON       reduce using rule 112 (empty -> .)

    else                           shift and go to state 228
    empty                          shift and go to state 230

state 226

    (57) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 57 (cin4 -> COMMA ID cin4 .)


state 227

    (71) while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY .

    SEMICOLON       reduce using rule 71 (while -> WHILE LPAREN express RPAREN while1 LCURLY block RCURLY .)


state 228

    (39) cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .

    SEMICOLON       reduce using rule 39 (cond -> IF LPAREN express RPAREN LCURLY gotoif block RCURLY else .)


state 229

    (41) else -> ELSE . LCURLY gotoelse block RCURLY else

    LCURLY          shift and go to state 231


state 230

    (42) else -> empty .

    SEMICOLON       reduce using rule 42 (else -> empty .)


state 231

    (41) else -> ELSE LCURLY . gotoelse block RCURLY else
    (43) gotoelse -> . empty
    (112) empty -> .

    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CIN             reduce using rule 112 (empty -> .)
    COUT            reduce using rule 112 (empty -> .)
    DELAY           reduce using rule 112 (empty -> .)
    FORWARD         reduce using rule 112 (empty -> .)
    BACKWARD        reduce using rule 112 (empty -> .)
    TURNLEFT        reduce using rule 112 (empty -> .)
    TURNRIGHT       reduce using rule 112 (empty -> .)
    SERVO           reduce using rule 112 (empty -> .)
    LIGHTS          reduce using rule 112 (empty -> .)
    DISTANCE        reduce using rule 112 (empty -> .)
    STOP            reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    RCURLY          reduce using rule 112 (empty -> .)

    gotoelse                       shift and go to state 232
    empty                          shift and go to state 233

state 232

    (41) else -> ELSE LCURLY gotoelse . block RCURLY else
    (21) block -> . statute SEMICOLON block
    (22) block -> . empty
    (23) statute -> . cond
    (24) statute -> . assign
    (25) statute -> . call
    (26) statute -> . cin
    (27) statute -> . cout
    (28) statute -> . delay
    (29) statute -> . forward
    (30) statute -> . backward
    (31) statute -> . turnleft
    (32) statute -> . turnright
    (33) statute -> . servo
    (34) statute -> . lights
    (35) statute -> . distance
    (36) statute -> . stop
    (37) statute -> . while
    (38) statute -> . return
    (112) empty -> .
    (39) cond -> . IF LPAREN express RPAREN LCURLY gotoif block RCURLY else
    (44) assign -> . ID assign1 ASSIGN express
    (47) call -> . era LPAREN paramcall RPAREN
    (52) cin -> . CIN cin1
    (59) cout -> . COUT LPAREN express cout1 RPAREN
    (62) delay -> . DELAY LPAREN express RPAREN
    (63) forward -> . FORWARD LPAREN express RPAREN
    (64) backward -> . BACKWARD LPAREN express RPAREN
    (65) turnleft -> . TURNLEFT LPAREN express RPAREN
    (66) turnright -> . TURNRIGHT LPAREN express RPAREN
    (67) servo -> . SERVO LPAREN express RPAREN
    (68) lights -> . LIGHTS LPAREN express COMMA express RPAREN
    (69) distance -> . DISTANCE LPAREN RPAREN
    (70) stop -> . STOP LPAREN RPAREN
    (71) while -> . WHILE LPAREN express RPAREN while1 LCURLY block RCURLY
    (73) return -> . RETURN LPAREN express RPAREN
    (48) era -> . ID

    RCURLY          reduce using rule 112 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 77
    CIN             shift and go to state 79
    COUT            shift and go to state 80
    DELAY           shift and go to state 81
    FORWARD         shift and go to state 82
    BACKWARD        shift and go to state 83
    TURNLEFT        shift and go to state 84
    TURNRIGHT       shift and go to state 85
    SERVO           shift and go to state 86
    LIGHTS          shift and go to state 87
    DISTANCE        shift and go to state 88
    STOP            shift and go to state 89
    WHILE           shift and go to state 90
    RETURN          shift and go to state 91

    block                          shift and go to state 234
    statute                        shift and go to state 58
    empty                          shift and go to state 59
    cond                           shift and go to state 60
    assign                         shift and go to state 61
    call                           shift and go to state 62
    cin                            shift and go to state 63
    cout                           shift and go to state 64
    delay                          shift and go to state 65
    forward                        shift and go to state 66
    backward                       shift and go to state 67
    turnleft                       shift and go to state 68
    turnright                      shift and go to state 69
    servo                          shift and go to state 70
    lights                         shift and go to state 71
    distance                       shift and go to state 72
    stop                           shift and go to state 73
    while                          shift and go to state 74
    return                         shift and go to state 75
    era                            shift and go to state 78

state 233

    (43) gotoelse -> empty .

    IF              reduce using rule 43 (gotoelse -> empty .)
    ID              reduce using rule 43 (gotoelse -> empty .)
    CIN             reduce using rule 43 (gotoelse -> empty .)
    COUT            reduce using rule 43 (gotoelse -> empty .)
    DELAY           reduce using rule 43 (gotoelse -> empty .)
    FORWARD         reduce using rule 43 (gotoelse -> empty .)
    BACKWARD        reduce using rule 43 (gotoelse -> empty .)
    TURNLEFT        reduce using rule 43 (gotoelse -> empty .)
    TURNRIGHT       reduce using rule 43 (gotoelse -> empty .)
    SERVO           reduce using rule 43 (gotoelse -> empty .)
    LIGHTS          reduce using rule 43 (gotoelse -> empty .)
    DISTANCE        reduce using rule 43 (gotoelse -> empty .)
    STOP            reduce using rule 43 (gotoelse -> empty .)
    WHILE           reduce using rule 43 (gotoelse -> empty .)
    RETURN          reduce using rule 43 (gotoelse -> empty .)
    RCURLY          reduce using rule 43 (gotoelse -> empty .)


state 234

    (41) else -> ELSE LCURLY gotoelse block . RCURLY else

    RCURLY          shift and go to state 235


state 235

    (41) else -> ELSE LCURLY gotoelse block RCURLY . else
    (41) else -> . ELSE LCURLY gotoelse block RCURLY else
    (42) else -> . empty
    (112) empty -> .

    ELSE            shift and go to state 229
    SEMICOLON       reduce using rule 112 (empty -> .)

    else                           shift and go to state 236
    empty                          shift and go to state 230

state 236

    (41) else -> ELSE LCURLY gotoelse block RCURLY else .

    SEMICOLON       reduce using rule 41 (else -> ELSE LCURLY gotoelse block RCURLY else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for INT in state 35 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 35 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 35 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 35 resolved as shift
WARNING: shift/reduce conflict for VOID in state 35 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 41 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for VOID in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 42 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 42 resolved as shift
WARNING: shift/reduce conflict for VOID in state 42 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
WARNING: shift/reduce conflict for INT in state 49 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 49 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 49 resolved as shift
WARNING: shift/reduce conflict for VOID in state 49 resolved as shift
WARNING: reduce/reduce conflict in state 43 resolved using rule (paramsblock -> empty)
WARNING: rejected rule (params -> empty) in state 43
