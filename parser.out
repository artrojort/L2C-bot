Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM varsblock funcsblock main FIN SEMICOLON
Rule 2     main -> MAIN LPAREN RPAREN LCURLY varsblock block RCURLY
Rule 3     varsblock -> vars varsblock
Rule 4     varsblock -> empty
Rule 5     vars -> VARDEF type vars1 SEMICOLON
Rule 6     vars1 -> vars2
Rule 7     vars1 -> vars3
Rule 8     vars2 -> LBRACKET CTE_INT RBRACKET ID ASSIGN CTE_ARR vars4
Rule 9     vars3 -> ID ASSIGN constant vars5
Rule 10    vars4 -> CTE_ARR COMMA vars4
Rule 11    vars4 -> empty
Rule 12    vars5 -> constant COMMA vars5
Rule 13    vars5 -> empty
Rule 14    funcsblock -> funcs funcsblock
Rule 15    funcsblock -> empty
Rule 16    funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
Rule 17    choosetype -> type
Rule 18    choosetype -> VOID
Rule 19    params -> type ID params1
Rule 20    params -> empty
Rule 21    params1 -> COMMA type ID params1
Rule 22    params1 -> empty
Rule 23    block -> statute block
Rule 24    block -> empty
Rule 25    statute -> cond
Rule 26    statute -> assign
Rule 27    statute -> call
Rule 28    statute -> cin
Rule 29    statute -> cout
Rule 30    statute -> delay
Rule 31    statute -> forward
Rule 32    statute -> backward
Rule 33    statute -> turnleft
Rule 34    statute -> turnright
Rule 35    statute -> servo
Rule 36    statute -> lights
Rule 37    statute -> display
Rule 38    statute -> distance
Rule 39    statute -> stop
Rule 40    statute -> return
Rule 41    cond -> IF LPAREN express RPAREN block else SEMICOLON
Rule 42    else -> ELSE block
Rule 43    else -> empty
Rule 44    assign -> ID assign1 ASSIGN express SEMICOLON
Rule 45    assign1 -> LBRACKET express RBRACKET
Rule 46    assign1 -> empty
Rule 47    call -> CALL ID LPAREN call1 RPAREN SEMICOLON
Rule 48    call1 -> express call2
Rule 49    call1 -> empty
Rule 50    call2 -> COMMA call1
Rule 51    call2 -> empty
Rule 52    cin -> CIN cin1 SEMICOLON
Rule 53    cin1 -> cin2
Rule 54    cin1 -> cin3
Rule 55    cin2 -> LPAREN ID RPAREN
Rule 56    cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN
Rule 57    cin4 -> COMMA ID cin4
Rule 58    cin4 -> empty
Rule 59    cout -> COUT LPAREN express RPAREN SEMICOLON
Rule 60    delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON
Rule 61    forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 62    backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
Rule 63    turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
Rule 64    turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
Rule 65    servo -> SERVO LPAREN express RPAREN SEMICOLON
Rule 66    lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
Rule 67    display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
Rule 68    distance -> DISTANCE LPAREN RPAREN SEMICOLON
Rule 69    stop -> STOP LPAREN RPAREN SEMICOLON
Rule 70    return -> RETURN express SEMICOLON
Rule 71    type -> INT
Rule 72    type -> FLOAT
Rule 73    type -> BOOL
Rule 74    type -> CHAR
Rule 75    type -> STRING
Rule 76    constant -> ID
Rule 77    constant -> CTE_INT
Rule 78    constant -> CTE_FLOAT
Rule 79    constant -> CTE_STRING
Rule 80    constant -> CTE_CHAR
Rule 81    express -> compare express1
Rule 82    express1 -> express2 compare
Rule 83    express1 -> empty
Rule 84    express2 -> AND
Rule 85    express2 -> OR
Rule 86    compare -> exp compare1
Rule 87    compare1 -> LESSTHAN exp
Rule 88    compare1 -> GREATERTHAN exp
Rule 89    compare1 -> EQUALS exp
Rule 90    compare1 -> NOTEQUAL exp
Rule 91    compare1 -> empty
Rule 92    exp -> term exp1
Rule 93    exp1 -> exp2 term
Rule 94    exp1 -> empty
Rule 95    exp2 -> PLUS
Rule 96    exp2 -> MINUS
Rule 97    term -> factor term1
Rule 98    term1 -> term2 term
Rule 99    term1 -> empty
Rule 100   term2 -> MULTI
Rule 101   term2 -> DIVI
Rule 102   factor -> LPAREN express RPAREN
Rule 103   factor -> factor1 constant
Rule 104   factor1 -> PLUS
Rule 105   factor1 -> MINUS
Rule 106   factor1 -> empty
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 84
ASSIGN               : 8 9 44
BACKWARD             : 62
BOOL                 : 73
CALL                 : 47
CHAR                 : 74
CIN                  : 52
COMMA                : 10 12 21 50 57 61 62 63 64 66
COUT                 : 59
CTE_ARR              : 8 10
CTE_CHAR             : 67 80
CTE_FLOAT            : 78
CTE_INT              : 8 56 60 66 66 77
CTE_STRING           : 79
DELAY                : 60
DISPLAY              : 67
DISTANCE             : 68
DIVI                 : 101
ELSE                 : 42
EQUALS               : 89
FIN                  : 1
FLOAT                : 72
FORWARD              : 61
FUNCDEF              : 16
GREATERTHAN          : 88
ID                   : 8 9 16 19 21 44 47 55 57 76
IF                   : 41
INT                  : 71
LBRACKET             : 8 45 56
LCURLY               : 2 16
LESSTHAN             : 87
LIGHTS               : 66
LPAREN               : 2 16 41 47 55 56 59 60 61 62 63 64 65 66 67 68 69 102
MAIN                 : 2
MINUS                : 96 105
MULTI                : 100
NOTEQUAL             : 90
OR                   : 85
PLUS                 : 95 104
PROGRAM              : 1
RBRACKET             : 8 45 56
RCURLY               : 2 16
RETURN               : 70
RPAREN               : 2 16 41 47 55 56 59 60 61 62 63 64 65 66 67 68 69 102
SEMICOLON            : 1 5 41 44 47 52 59 60 61 62 63 64 65 66 67 68 69 70
SERVO                : 65
STOP                 : 69
STRING               : 75
TURNLEFT             : 63
TURNRIGHT            : 64
VARDEF               : 5
VOID                 : 18
error                : 

Nonterminals, with rules where they appear

assign               : 26
assign1              : 44
backward             : 32
block                : 2 16 23 41 42
call                 : 27
call1                : 47 50
call2                : 48
choosetype           : 16
cin                  : 28
cin1                 : 52
cin2                 : 53
cin3                 : 54
cin4                 : 56 57
compare              : 81 82
compare1             : 86
cond                 : 25
constant             : 9 12 103
cout                 : 29
delay                : 30
display              : 37
distance             : 38
else                 : 41
empty                : 4 11 13 15 20 22 24 43 46 49 51 58 83 91 94 99 106
exp                  : 86 87 88 89 90
exp1                 : 92
exp2                 : 93
express              : 41 44 45 48 59 61 61 62 62 63 63 64 64 65 70 102
express1             : 81
express2             : 82
factor               : 97
factor1              : 103
forward              : 31
funcs                : 14
funcsblock           : 1 14
lights               : 36
main                 : 1
params               : 16
params1              : 19 21
program              : 0
return               : 40
servo                : 35
statute              : 23
stop                 : 39
term                 : 92 93 98
term1                : 97
term2                : 98
turnleft             : 33
turnright            : 34
type                 : 5 17 19 21
vars                 : 3
vars1                : 5
vars2                : 6
vars3                : 7
vars4                : 8 10
vars5                : 9 12
varsblock            : 1 2 3 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM varsblock funcsblock main FIN SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . varsblock funcsblock main FIN SEMICOLON
    (3) varsblock -> . vars varsblock
    (4) varsblock -> . empty
    (5) vars -> . VARDEF type vars1 SEMICOLON
    (107) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)

    varsblock                      shift and go to state 3
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> PROGRAM varsblock . funcsblock main FIN SEMICOLON
    (14) funcsblock -> . funcs funcsblock
    (15) funcsblock -> . empty
    (16) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (107) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 107 (empty -> .)

    funcsblock                     shift and go to state 7
    funcs                          shift and go to state 8
    empty                          shift and go to state 9

state 4

    (3) varsblock -> vars . varsblock
    (3) varsblock -> . vars varsblock
    (4) varsblock -> . empty
    (5) vars -> . VARDEF type vars1 SEMICOLON
    (107) empty -> .

    VARDEF          shift and go to state 6
    FUNCDEF         reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CALL            reduce using rule 107 (empty -> .)
    CIN             reduce using rule 107 (empty -> .)
    COUT            reduce using rule 107 (empty -> .)
    DELAY           reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    BACKWARD        reduce using rule 107 (empty -> .)
    TURNLEFT        reduce using rule 107 (empty -> .)
    TURNRIGHT       reduce using rule 107 (empty -> .)
    SERVO           reduce using rule 107 (empty -> .)
    LIGHTS          reduce using rule 107 (empty -> .)
    DISPLAY         reduce using rule 107 (empty -> .)
    DISTANCE        reduce using rule 107 (empty -> .)
    STOP            reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    RCURLY          reduce using rule 107 (empty -> .)

    vars                           shift and go to state 4
    varsblock                      shift and go to state 11
    empty                          shift and go to state 5

state 5

    (4) varsblock -> empty .

    FUNCDEF         reduce using rule 4 (varsblock -> empty .)
    MAIN            reduce using rule 4 (varsblock -> empty .)
    IF              reduce using rule 4 (varsblock -> empty .)
    ID              reduce using rule 4 (varsblock -> empty .)
    CALL            reduce using rule 4 (varsblock -> empty .)
    CIN             reduce using rule 4 (varsblock -> empty .)
    COUT            reduce using rule 4 (varsblock -> empty .)
    DELAY           reduce using rule 4 (varsblock -> empty .)
    FORWARD         reduce using rule 4 (varsblock -> empty .)
    BACKWARD        reduce using rule 4 (varsblock -> empty .)
    TURNLEFT        reduce using rule 4 (varsblock -> empty .)
    TURNRIGHT       reduce using rule 4 (varsblock -> empty .)
    SERVO           reduce using rule 4 (varsblock -> empty .)
    LIGHTS          reduce using rule 4 (varsblock -> empty .)
    DISPLAY         reduce using rule 4 (varsblock -> empty .)
    DISTANCE        reduce using rule 4 (varsblock -> empty .)
    STOP            reduce using rule 4 (varsblock -> empty .)
    RETURN          reduce using rule 4 (varsblock -> empty .)
    RCURLY          reduce using rule 4 (varsblock -> empty .)


state 6

    (5) vars -> VARDEF . type vars1 SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . BOOL
    (74) type -> . CHAR
    (75) type -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    CHAR            shift and go to state 16
    STRING          shift and go to state 17

    type                           shift and go to state 12

state 7

    (1) program -> PROGRAM varsblock funcsblock . main FIN SEMICOLON
    (2) main -> . MAIN LPAREN RPAREN LCURLY varsblock block RCURLY

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 8

    (14) funcsblock -> funcs . funcsblock
    (14) funcsblock -> . funcs funcsblock
    (15) funcsblock -> . empty
    (16) funcs -> . FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (107) empty -> .

    FUNCDEF         shift and go to state 10
    MAIN            reduce using rule 107 (empty -> .)

    funcs                          shift and go to state 8
    funcsblock                     shift and go to state 20
    empty                          shift and go to state 9

state 9

    (15) funcsblock -> empty .

    MAIN            reduce using rule 15 (funcsblock -> empty .)


state 10

    (16) funcs -> FUNCDEF . choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY
    (17) choosetype -> . type
    (18) choosetype -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . BOOL
    (74) type -> . CHAR
    (75) type -> . STRING

    VOID            shift and go to state 23
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    CHAR            shift and go to state 16
    STRING          shift and go to state 17

    choosetype                     shift and go to state 21
    type                           shift and go to state 22

state 11

    (3) varsblock -> vars varsblock .

    FUNCDEF         reduce using rule 3 (varsblock -> vars varsblock .)
    MAIN            reduce using rule 3 (varsblock -> vars varsblock .)
    IF              reduce using rule 3 (varsblock -> vars varsblock .)
    ID              reduce using rule 3 (varsblock -> vars varsblock .)
    CALL            reduce using rule 3 (varsblock -> vars varsblock .)
    CIN             reduce using rule 3 (varsblock -> vars varsblock .)
    COUT            reduce using rule 3 (varsblock -> vars varsblock .)
    DELAY           reduce using rule 3 (varsblock -> vars varsblock .)
    FORWARD         reduce using rule 3 (varsblock -> vars varsblock .)
    BACKWARD        reduce using rule 3 (varsblock -> vars varsblock .)
    TURNLEFT        reduce using rule 3 (varsblock -> vars varsblock .)
    TURNRIGHT       reduce using rule 3 (varsblock -> vars varsblock .)
    SERVO           reduce using rule 3 (varsblock -> vars varsblock .)
    LIGHTS          reduce using rule 3 (varsblock -> vars varsblock .)
    DISPLAY         reduce using rule 3 (varsblock -> vars varsblock .)
    DISTANCE        reduce using rule 3 (varsblock -> vars varsblock .)
    STOP            reduce using rule 3 (varsblock -> vars varsblock .)
    RETURN          reduce using rule 3 (varsblock -> vars varsblock .)
    RCURLY          reduce using rule 3 (varsblock -> vars varsblock .)


state 12

    (5) vars -> VARDEF type . vars1 SEMICOLON
    (6) vars1 -> . vars2
    (7) vars1 -> . vars3
    (8) vars2 -> . LBRACKET CTE_INT RBRACKET ID ASSIGN CTE_ARR vars4
    (9) vars3 -> . ID ASSIGN constant vars5

    LBRACKET        shift and go to state 27
    ID              shift and go to state 28

    vars1                          shift and go to state 24
    vars2                          shift and go to state 25
    vars3                          shift and go to state 26

state 13

    (71) type -> INT .

    LBRACKET        reduce using rule 71 (type -> INT .)
    ID              reduce using rule 71 (type -> INT .)


state 14

    (72) type -> FLOAT .

    LBRACKET        reduce using rule 72 (type -> FLOAT .)
    ID              reduce using rule 72 (type -> FLOAT .)


state 15

    (73) type -> BOOL .

    LBRACKET        reduce using rule 73 (type -> BOOL .)
    ID              reduce using rule 73 (type -> BOOL .)


state 16

    (74) type -> CHAR .

    LBRACKET        reduce using rule 74 (type -> CHAR .)
    ID              reduce using rule 74 (type -> CHAR .)


state 17

    (75) type -> STRING .

    LBRACKET        reduce using rule 75 (type -> STRING .)
    ID              reduce using rule 75 (type -> STRING .)


state 18

    (1) program -> PROGRAM varsblock funcsblock main . FIN SEMICOLON

    FIN             shift and go to state 29


state 19

    (2) main -> MAIN . LPAREN RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 30


state 20

    (14) funcsblock -> funcs funcsblock .

    MAIN            reduce using rule 14 (funcsblock -> funcs funcsblock .)


state 21

    (16) funcs -> FUNCDEF choosetype . ID LPAREN params RPAREN LCURLY varsblock block RCURLY

    ID              shift and go to state 31


state 22

    (17) choosetype -> type .

    ID              reduce using rule 17 (choosetype -> type .)


state 23

    (18) choosetype -> VOID .

    ID              reduce using rule 18 (choosetype -> VOID .)


state 24

    (5) vars -> VARDEF type vars1 . SEMICOLON

    SEMICOLON       shift and go to state 32


state 25

    (6) vars1 -> vars2 .

    SEMICOLON       reduce using rule 6 (vars1 -> vars2 .)


state 26

    (7) vars1 -> vars3 .

    SEMICOLON       reduce using rule 7 (vars1 -> vars3 .)


state 27

    (8) vars2 -> LBRACKET . CTE_INT RBRACKET ID ASSIGN CTE_ARR vars4

    CTE_INT         shift and go to state 33


state 28

    (9) vars3 -> ID . ASSIGN constant vars5

    ASSIGN          shift and go to state 34


state 29

    (1) program -> PROGRAM varsblock funcsblock main FIN . SEMICOLON

    SEMICOLON       shift and go to state 35


state 30

    (2) main -> MAIN LPAREN . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 36


state 31

    (16) funcs -> FUNCDEF choosetype ID . LPAREN params RPAREN LCURLY varsblock block RCURLY

    LPAREN          shift and go to state 37


state 32

    (5) vars -> VARDEF type vars1 SEMICOLON .

    VARDEF          reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    FUNCDEF         reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    MAIN            reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    IF              reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    ID              reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    CALL            reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    CIN             reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    COUT            reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    DELAY           reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    FORWARD         reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    BACKWARD        reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    TURNLEFT        reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    TURNRIGHT       reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    SERVO           reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    LIGHTS          reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    DISPLAY         reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    DISTANCE        reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    STOP            reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    RETURN          reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)
    RCURLY          reduce using rule 5 (vars -> VARDEF type vars1 SEMICOLON .)


state 33

    (8) vars2 -> LBRACKET CTE_INT . RBRACKET ID ASSIGN CTE_ARR vars4

    RBRACKET        shift and go to state 38


state 34

    (9) vars3 -> ID ASSIGN . constant vars5
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    ID              shift and go to state 39
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42
    CTE_STRING      shift and go to state 43
    CTE_CHAR        shift and go to state 44

    constant                       shift and go to state 40

state 35

    (1) program -> PROGRAM varsblock funcsblock main FIN SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM varsblock funcsblock main FIN SEMICOLON .)


state 36

    (2) main -> MAIN LPAREN RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 45


state 37

    (16) funcs -> FUNCDEF choosetype ID LPAREN . params RPAREN LCURLY varsblock block RCURLY
    (19) params -> . type ID params1
    (20) params -> . empty
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . BOOL
    (74) type -> . CHAR
    (75) type -> . STRING
    (107) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    CHAR            shift and go to state 16
    STRING          shift and go to state 17
    RPAREN          reduce using rule 107 (empty -> .)

    params                         shift and go to state 46
    type                           shift and go to state 47
    empty                          shift and go to state 48

state 38

    (8) vars2 -> LBRACKET CTE_INT RBRACKET . ID ASSIGN CTE_ARR vars4

    ID              shift and go to state 49


state 39

    (76) constant -> ID .

    ID              reduce using rule 76 (constant -> ID .)
    CTE_INT         reduce using rule 76 (constant -> ID .)
    CTE_FLOAT       reduce using rule 76 (constant -> ID .)
    CTE_STRING      reduce using rule 76 (constant -> ID .)
    CTE_CHAR        reduce using rule 76 (constant -> ID .)
    SEMICOLON       reduce using rule 76 (constant -> ID .)
    COMMA           reduce using rule 76 (constant -> ID .)
    MULTI           reduce using rule 76 (constant -> ID .)
    DIVI            reduce using rule 76 (constant -> ID .)
    PLUS            reduce using rule 76 (constant -> ID .)
    MINUS           reduce using rule 76 (constant -> ID .)
    LESSTHAN        reduce using rule 76 (constant -> ID .)
    GREATERTHAN     reduce using rule 76 (constant -> ID .)
    EQUALS          reduce using rule 76 (constant -> ID .)
    NOTEQUAL        reduce using rule 76 (constant -> ID .)
    AND             reduce using rule 76 (constant -> ID .)
    OR              reduce using rule 76 (constant -> ID .)
    RPAREN          reduce using rule 76 (constant -> ID .)
    RBRACKET        reduce using rule 76 (constant -> ID .)


state 40

    (9) vars3 -> ID ASSIGN constant . vars5
    (12) vars5 -> . constant COMMA vars5
    (13) vars5 -> . empty
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR
    (107) empty -> .

    ID              shift and go to state 39
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42
    CTE_STRING      shift and go to state 43
    CTE_CHAR        shift and go to state 44
    SEMICOLON       reduce using rule 107 (empty -> .)

    constant                       shift and go to state 50
    vars5                          shift and go to state 51
    empty                          shift and go to state 52

state 41

    (77) constant -> CTE_INT .

    ID              reduce using rule 77 (constant -> CTE_INT .)
    CTE_INT         reduce using rule 77 (constant -> CTE_INT .)
    CTE_FLOAT       reduce using rule 77 (constant -> CTE_INT .)
    CTE_STRING      reduce using rule 77 (constant -> CTE_INT .)
    CTE_CHAR        reduce using rule 77 (constant -> CTE_INT .)
    SEMICOLON       reduce using rule 77 (constant -> CTE_INT .)
    COMMA           reduce using rule 77 (constant -> CTE_INT .)
    MULTI           reduce using rule 77 (constant -> CTE_INT .)
    DIVI            reduce using rule 77 (constant -> CTE_INT .)
    PLUS            reduce using rule 77 (constant -> CTE_INT .)
    MINUS           reduce using rule 77 (constant -> CTE_INT .)
    LESSTHAN        reduce using rule 77 (constant -> CTE_INT .)
    GREATERTHAN     reduce using rule 77 (constant -> CTE_INT .)
    EQUALS          reduce using rule 77 (constant -> CTE_INT .)
    NOTEQUAL        reduce using rule 77 (constant -> CTE_INT .)
    AND             reduce using rule 77 (constant -> CTE_INT .)
    OR              reduce using rule 77 (constant -> CTE_INT .)
    RPAREN          reduce using rule 77 (constant -> CTE_INT .)
    RBRACKET        reduce using rule 77 (constant -> CTE_INT .)


state 42

    (78) constant -> CTE_FLOAT .

    ID              reduce using rule 78 (constant -> CTE_FLOAT .)
    CTE_INT         reduce using rule 78 (constant -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 78 (constant -> CTE_FLOAT .)
    CTE_STRING      reduce using rule 78 (constant -> CTE_FLOAT .)
    CTE_CHAR        reduce using rule 78 (constant -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 78 (constant -> CTE_FLOAT .)
    COMMA           reduce using rule 78 (constant -> CTE_FLOAT .)
    MULTI           reduce using rule 78 (constant -> CTE_FLOAT .)
    DIVI            reduce using rule 78 (constant -> CTE_FLOAT .)
    PLUS            reduce using rule 78 (constant -> CTE_FLOAT .)
    MINUS           reduce using rule 78 (constant -> CTE_FLOAT .)
    LESSTHAN        reduce using rule 78 (constant -> CTE_FLOAT .)
    GREATERTHAN     reduce using rule 78 (constant -> CTE_FLOAT .)
    EQUALS          reduce using rule 78 (constant -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 78 (constant -> CTE_FLOAT .)
    AND             reduce using rule 78 (constant -> CTE_FLOAT .)
    OR              reduce using rule 78 (constant -> CTE_FLOAT .)
    RPAREN          reduce using rule 78 (constant -> CTE_FLOAT .)
    RBRACKET        reduce using rule 78 (constant -> CTE_FLOAT .)


state 43

    (79) constant -> CTE_STRING .

    ID              reduce using rule 79 (constant -> CTE_STRING .)
    CTE_INT         reduce using rule 79 (constant -> CTE_STRING .)
    CTE_FLOAT       reduce using rule 79 (constant -> CTE_STRING .)
    CTE_STRING      reduce using rule 79 (constant -> CTE_STRING .)
    CTE_CHAR        reduce using rule 79 (constant -> CTE_STRING .)
    SEMICOLON       reduce using rule 79 (constant -> CTE_STRING .)
    COMMA           reduce using rule 79 (constant -> CTE_STRING .)
    MULTI           reduce using rule 79 (constant -> CTE_STRING .)
    DIVI            reduce using rule 79 (constant -> CTE_STRING .)
    PLUS            reduce using rule 79 (constant -> CTE_STRING .)
    MINUS           reduce using rule 79 (constant -> CTE_STRING .)
    LESSTHAN        reduce using rule 79 (constant -> CTE_STRING .)
    GREATERTHAN     reduce using rule 79 (constant -> CTE_STRING .)
    EQUALS          reduce using rule 79 (constant -> CTE_STRING .)
    NOTEQUAL        reduce using rule 79 (constant -> CTE_STRING .)
    AND             reduce using rule 79 (constant -> CTE_STRING .)
    OR              reduce using rule 79 (constant -> CTE_STRING .)
    RPAREN          reduce using rule 79 (constant -> CTE_STRING .)
    RBRACKET        reduce using rule 79 (constant -> CTE_STRING .)


state 44

    (80) constant -> CTE_CHAR .

    ID              reduce using rule 80 (constant -> CTE_CHAR .)
    CTE_INT         reduce using rule 80 (constant -> CTE_CHAR .)
    CTE_FLOAT       reduce using rule 80 (constant -> CTE_CHAR .)
    CTE_STRING      reduce using rule 80 (constant -> CTE_CHAR .)
    CTE_CHAR        reduce using rule 80 (constant -> CTE_CHAR .)
    SEMICOLON       reduce using rule 80 (constant -> CTE_CHAR .)
    COMMA           reduce using rule 80 (constant -> CTE_CHAR .)
    MULTI           reduce using rule 80 (constant -> CTE_CHAR .)
    DIVI            reduce using rule 80 (constant -> CTE_CHAR .)
    PLUS            reduce using rule 80 (constant -> CTE_CHAR .)
    MINUS           reduce using rule 80 (constant -> CTE_CHAR .)
    LESSTHAN        reduce using rule 80 (constant -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 80 (constant -> CTE_CHAR .)
    EQUALS          reduce using rule 80 (constant -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 80 (constant -> CTE_CHAR .)
    AND             reduce using rule 80 (constant -> CTE_CHAR .)
    OR              reduce using rule 80 (constant -> CTE_CHAR .)
    RPAREN          reduce using rule 80 (constant -> CTE_CHAR .)
    RBRACKET        reduce using rule 80 (constant -> CTE_CHAR .)


state 45

    (2) main -> MAIN LPAREN RPAREN LCURLY . varsblock block RCURLY
    (3) varsblock -> . vars varsblock
    (4) varsblock -> . empty
    (5) vars -> . VARDEF type vars1 SEMICOLON
    (107) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CALL            reduce using rule 107 (empty -> .)
    CIN             reduce using rule 107 (empty -> .)
    COUT            reduce using rule 107 (empty -> .)
    DELAY           reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    BACKWARD        reduce using rule 107 (empty -> .)
    TURNLEFT        reduce using rule 107 (empty -> .)
    TURNRIGHT       reduce using rule 107 (empty -> .)
    SERVO           reduce using rule 107 (empty -> .)
    LIGHTS          reduce using rule 107 (empty -> .)
    DISPLAY         reduce using rule 107 (empty -> .)
    DISTANCE        reduce using rule 107 (empty -> .)
    STOP            reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    RCURLY          reduce using rule 107 (empty -> .)

    varsblock                      shift and go to state 53
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 46

    (16) funcs -> FUNCDEF choosetype ID LPAREN params . RPAREN LCURLY varsblock block RCURLY

    RPAREN          shift and go to state 54


state 47

    (19) params -> type . ID params1

    ID              shift and go to state 55


state 48

    (20) params -> empty .

    RPAREN          reduce using rule 20 (params -> empty .)


state 49

    (8) vars2 -> LBRACKET CTE_INT RBRACKET ID . ASSIGN CTE_ARR vars4

    ASSIGN          shift and go to state 56


state 50

    (12) vars5 -> constant . COMMA vars5

    COMMA           shift and go to state 57


state 51

    (9) vars3 -> ID ASSIGN constant vars5 .

    SEMICOLON       reduce using rule 9 (vars3 -> ID ASSIGN constant vars5 .)


state 52

    (13) vars5 -> empty .

    SEMICOLON       reduce using rule 13 (vars5 -> empty .)


state 53

    (2) main -> MAIN LPAREN RPAREN LCURLY varsblock . block RCURLY
    (23) block -> . statute block
    (24) block -> . empty
    (25) statute -> . cond
    (26) statute -> . assign
    (27) statute -> . call
    (28) statute -> . cin
    (29) statute -> . cout
    (30) statute -> . delay
    (31) statute -> . forward
    (32) statute -> . backward
    (33) statute -> . turnleft
    (34) statute -> . turnright
    (35) statute -> . servo
    (36) statute -> . lights
    (37) statute -> . display
    (38) statute -> . distance
    (39) statute -> . stop
    (40) statute -> . return
    (107) empty -> .
    (41) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 107 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 78
    CALL            shift and go to state 79
    CIN             shift and go to state 80
    COUT            shift and go to state 81
    DELAY           shift and go to state 82
    FORWARD         shift and go to state 83
    BACKWARD        shift and go to state 84
    TURNLEFT        shift and go to state 85
    TURNRIGHT       shift and go to state 86
    SERVO           shift and go to state 87
    LIGHTS          shift and go to state 88
    DISPLAY         shift and go to state 89
    DISTANCE        shift and go to state 90
    STOP            shift and go to state 91
    RETURN          shift and go to state 92

    block                          shift and go to state 58
    statute                        shift and go to state 59
    empty                          shift and go to state 60
    cond                           shift and go to state 61
    assign                         shift and go to state 62
    call                           shift and go to state 63
    cin                            shift and go to state 64
    cout                           shift and go to state 65
    delay                          shift and go to state 66
    forward                        shift and go to state 67
    backward                       shift and go to state 68
    turnleft                       shift and go to state 69
    turnright                      shift and go to state 70
    servo                          shift and go to state 71
    lights                         shift and go to state 72
    display                        shift and go to state 73
    distance                       shift and go to state 74
    stop                           shift and go to state 75
    return                         shift and go to state 76

state 54

    (16) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN . LCURLY varsblock block RCURLY

    LCURLY          shift and go to state 93


state 55

    (19) params -> type ID . params1
    (21) params1 -> . COMMA type ID params1
    (22) params1 -> . empty
    (107) empty -> .

    COMMA           shift and go to state 95
    RPAREN          reduce using rule 107 (empty -> .)

    params1                        shift and go to state 94
    empty                          shift and go to state 96

state 56

    (8) vars2 -> LBRACKET CTE_INT RBRACKET ID ASSIGN . CTE_ARR vars4

    CTE_ARR         shift and go to state 97


state 57

    (12) vars5 -> constant COMMA . vars5
    (12) vars5 -> . constant COMMA vars5
    (13) vars5 -> . empty
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR
    (107) empty -> .

    ID              shift and go to state 39
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42
    CTE_STRING      shift and go to state 43
    CTE_CHAR        shift and go to state 44
    SEMICOLON       reduce using rule 107 (empty -> .)

    constant                       shift and go to state 50
    vars5                          shift and go to state 98
    empty                          shift and go to state 52

state 58

    (2) main -> MAIN LPAREN RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 99


state 59

    (23) block -> statute . block
    (23) block -> . statute block
    (24) block -> . empty
    (25) statute -> . cond
    (26) statute -> . assign
    (27) statute -> . call
    (28) statute -> . cin
    (29) statute -> . cout
    (30) statute -> . delay
    (31) statute -> . forward
    (32) statute -> . backward
    (33) statute -> . turnleft
    (34) statute -> . turnright
    (35) statute -> . servo
    (36) statute -> . lights
    (37) statute -> . display
    (38) statute -> . distance
    (39) statute -> . stop
    (40) statute -> . return
    (107) empty -> .
    (41) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 78
    CALL            shift and go to state 79
    CIN             shift and go to state 80
    COUT            shift and go to state 81
    DELAY           shift and go to state 82
    FORWARD         shift and go to state 83
    BACKWARD        shift and go to state 84
    TURNLEFT        shift and go to state 85
    TURNRIGHT       shift and go to state 86
    SERVO           shift and go to state 87
    LIGHTS          shift and go to state 88
    DISPLAY         shift and go to state 89
    DISTANCE        shift and go to state 90
    STOP            shift and go to state 91
    RETURN          shift and go to state 92

    statute                        shift and go to state 59
    block                          shift and go to state 100
    empty                          shift and go to state 60
    cond                           shift and go to state 61
    assign                         shift and go to state 62
    call                           shift and go to state 63
    cin                            shift and go to state 64
    cout                           shift and go to state 65
    delay                          shift and go to state 66
    forward                        shift and go to state 67
    backward                       shift and go to state 68
    turnleft                       shift and go to state 69
    turnright                      shift and go to state 70
    servo                          shift and go to state 71
    lights                         shift and go to state 72
    display                        shift and go to state 73
    distance                       shift and go to state 74
    stop                           shift and go to state 75
    return                         shift and go to state 76

state 60

    (24) block -> empty .

    RCURLY          reduce using rule 24 (block -> empty .)
    ELSE            reduce using rule 24 (block -> empty .)
    SEMICOLON       reduce using rule 24 (block -> empty .)


state 61

    (25) statute -> cond .

    IF              reduce using rule 25 (statute -> cond .)
    ID              reduce using rule 25 (statute -> cond .)
    CALL            reduce using rule 25 (statute -> cond .)
    CIN             reduce using rule 25 (statute -> cond .)
    COUT            reduce using rule 25 (statute -> cond .)
    DELAY           reduce using rule 25 (statute -> cond .)
    FORWARD         reduce using rule 25 (statute -> cond .)
    BACKWARD        reduce using rule 25 (statute -> cond .)
    TURNLEFT        reduce using rule 25 (statute -> cond .)
    TURNRIGHT       reduce using rule 25 (statute -> cond .)
    SERVO           reduce using rule 25 (statute -> cond .)
    LIGHTS          reduce using rule 25 (statute -> cond .)
    DISPLAY         reduce using rule 25 (statute -> cond .)
    DISTANCE        reduce using rule 25 (statute -> cond .)
    STOP            reduce using rule 25 (statute -> cond .)
    RETURN          reduce using rule 25 (statute -> cond .)
    RCURLY          reduce using rule 25 (statute -> cond .)
    ELSE            reduce using rule 25 (statute -> cond .)
    SEMICOLON       reduce using rule 25 (statute -> cond .)


state 62

    (26) statute -> assign .

    IF              reduce using rule 26 (statute -> assign .)
    ID              reduce using rule 26 (statute -> assign .)
    CALL            reduce using rule 26 (statute -> assign .)
    CIN             reduce using rule 26 (statute -> assign .)
    COUT            reduce using rule 26 (statute -> assign .)
    DELAY           reduce using rule 26 (statute -> assign .)
    FORWARD         reduce using rule 26 (statute -> assign .)
    BACKWARD        reduce using rule 26 (statute -> assign .)
    TURNLEFT        reduce using rule 26 (statute -> assign .)
    TURNRIGHT       reduce using rule 26 (statute -> assign .)
    SERVO           reduce using rule 26 (statute -> assign .)
    LIGHTS          reduce using rule 26 (statute -> assign .)
    DISPLAY         reduce using rule 26 (statute -> assign .)
    DISTANCE        reduce using rule 26 (statute -> assign .)
    STOP            reduce using rule 26 (statute -> assign .)
    RETURN          reduce using rule 26 (statute -> assign .)
    RCURLY          reduce using rule 26 (statute -> assign .)
    ELSE            reduce using rule 26 (statute -> assign .)
    SEMICOLON       reduce using rule 26 (statute -> assign .)


state 63

    (27) statute -> call .

    IF              reduce using rule 27 (statute -> call .)
    ID              reduce using rule 27 (statute -> call .)
    CALL            reduce using rule 27 (statute -> call .)
    CIN             reduce using rule 27 (statute -> call .)
    COUT            reduce using rule 27 (statute -> call .)
    DELAY           reduce using rule 27 (statute -> call .)
    FORWARD         reduce using rule 27 (statute -> call .)
    BACKWARD        reduce using rule 27 (statute -> call .)
    TURNLEFT        reduce using rule 27 (statute -> call .)
    TURNRIGHT       reduce using rule 27 (statute -> call .)
    SERVO           reduce using rule 27 (statute -> call .)
    LIGHTS          reduce using rule 27 (statute -> call .)
    DISPLAY         reduce using rule 27 (statute -> call .)
    DISTANCE        reduce using rule 27 (statute -> call .)
    STOP            reduce using rule 27 (statute -> call .)
    RETURN          reduce using rule 27 (statute -> call .)
    RCURLY          reduce using rule 27 (statute -> call .)
    ELSE            reduce using rule 27 (statute -> call .)
    SEMICOLON       reduce using rule 27 (statute -> call .)


state 64

    (28) statute -> cin .

    IF              reduce using rule 28 (statute -> cin .)
    ID              reduce using rule 28 (statute -> cin .)
    CALL            reduce using rule 28 (statute -> cin .)
    CIN             reduce using rule 28 (statute -> cin .)
    COUT            reduce using rule 28 (statute -> cin .)
    DELAY           reduce using rule 28 (statute -> cin .)
    FORWARD         reduce using rule 28 (statute -> cin .)
    BACKWARD        reduce using rule 28 (statute -> cin .)
    TURNLEFT        reduce using rule 28 (statute -> cin .)
    TURNRIGHT       reduce using rule 28 (statute -> cin .)
    SERVO           reduce using rule 28 (statute -> cin .)
    LIGHTS          reduce using rule 28 (statute -> cin .)
    DISPLAY         reduce using rule 28 (statute -> cin .)
    DISTANCE        reduce using rule 28 (statute -> cin .)
    STOP            reduce using rule 28 (statute -> cin .)
    RETURN          reduce using rule 28 (statute -> cin .)
    RCURLY          reduce using rule 28 (statute -> cin .)
    ELSE            reduce using rule 28 (statute -> cin .)
    SEMICOLON       reduce using rule 28 (statute -> cin .)


state 65

    (29) statute -> cout .

    IF              reduce using rule 29 (statute -> cout .)
    ID              reduce using rule 29 (statute -> cout .)
    CALL            reduce using rule 29 (statute -> cout .)
    CIN             reduce using rule 29 (statute -> cout .)
    COUT            reduce using rule 29 (statute -> cout .)
    DELAY           reduce using rule 29 (statute -> cout .)
    FORWARD         reduce using rule 29 (statute -> cout .)
    BACKWARD        reduce using rule 29 (statute -> cout .)
    TURNLEFT        reduce using rule 29 (statute -> cout .)
    TURNRIGHT       reduce using rule 29 (statute -> cout .)
    SERVO           reduce using rule 29 (statute -> cout .)
    LIGHTS          reduce using rule 29 (statute -> cout .)
    DISPLAY         reduce using rule 29 (statute -> cout .)
    DISTANCE        reduce using rule 29 (statute -> cout .)
    STOP            reduce using rule 29 (statute -> cout .)
    RETURN          reduce using rule 29 (statute -> cout .)
    RCURLY          reduce using rule 29 (statute -> cout .)
    ELSE            reduce using rule 29 (statute -> cout .)
    SEMICOLON       reduce using rule 29 (statute -> cout .)


state 66

    (30) statute -> delay .

    IF              reduce using rule 30 (statute -> delay .)
    ID              reduce using rule 30 (statute -> delay .)
    CALL            reduce using rule 30 (statute -> delay .)
    CIN             reduce using rule 30 (statute -> delay .)
    COUT            reduce using rule 30 (statute -> delay .)
    DELAY           reduce using rule 30 (statute -> delay .)
    FORWARD         reduce using rule 30 (statute -> delay .)
    BACKWARD        reduce using rule 30 (statute -> delay .)
    TURNLEFT        reduce using rule 30 (statute -> delay .)
    TURNRIGHT       reduce using rule 30 (statute -> delay .)
    SERVO           reduce using rule 30 (statute -> delay .)
    LIGHTS          reduce using rule 30 (statute -> delay .)
    DISPLAY         reduce using rule 30 (statute -> delay .)
    DISTANCE        reduce using rule 30 (statute -> delay .)
    STOP            reduce using rule 30 (statute -> delay .)
    RETURN          reduce using rule 30 (statute -> delay .)
    RCURLY          reduce using rule 30 (statute -> delay .)
    ELSE            reduce using rule 30 (statute -> delay .)
    SEMICOLON       reduce using rule 30 (statute -> delay .)


state 67

    (31) statute -> forward .

    IF              reduce using rule 31 (statute -> forward .)
    ID              reduce using rule 31 (statute -> forward .)
    CALL            reduce using rule 31 (statute -> forward .)
    CIN             reduce using rule 31 (statute -> forward .)
    COUT            reduce using rule 31 (statute -> forward .)
    DELAY           reduce using rule 31 (statute -> forward .)
    FORWARD         reduce using rule 31 (statute -> forward .)
    BACKWARD        reduce using rule 31 (statute -> forward .)
    TURNLEFT        reduce using rule 31 (statute -> forward .)
    TURNRIGHT       reduce using rule 31 (statute -> forward .)
    SERVO           reduce using rule 31 (statute -> forward .)
    LIGHTS          reduce using rule 31 (statute -> forward .)
    DISPLAY         reduce using rule 31 (statute -> forward .)
    DISTANCE        reduce using rule 31 (statute -> forward .)
    STOP            reduce using rule 31 (statute -> forward .)
    RETURN          reduce using rule 31 (statute -> forward .)
    RCURLY          reduce using rule 31 (statute -> forward .)
    ELSE            reduce using rule 31 (statute -> forward .)
    SEMICOLON       reduce using rule 31 (statute -> forward .)


state 68

    (32) statute -> backward .

    IF              reduce using rule 32 (statute -> backward .)
    ID              reduce using rule 32 (statute -> backward .)
    CALL            reduce using rule 32 (statute -> backward .)
    CIN             reduce using rule 32 (statute -> backward .)
    COUT            reduce using rule 32 (statute -> backward .)
    DELAY           reduce using rule 32 (statute -> backward .)
    FORWARD         reduce using rule 32 (statute -> backward .)
    BACKWARD        reduce using rule 32 (statute -> backward .)
    TURNLEFT        reduce using rule 32 (statute -> backward .)
    TURNRIGHT       reduce using rule 32 (statute -> backward .)
    SERVO           reduce using rule 32 (statute -> backward .)
    LIGHTS          reduce using rule 32 (statute -> backward .)
    DISPLAY         reduce using rule 32 (statute -> backward .)
    DISTANCE        reduce using rule 32 (statute -> backward .)
    STOP            reduce using rule 32 (statute -> backward .)
    RETURN          reduce using rule 32 (statute -> backward .)
    RCURLY          reduce using rule 32 (statute -> backward .)
    ELSE            reduce using rule 32 (statute -> backward .)
    SEMICOLON       reduce using rule 32 (statute -> backward .)


state 69

    (33) statute -> turnleft .

    IF              reduce using rule 33 (statute -> turnleft .)
    ID              reduce using rule 33 (statute -> turnleft .)
    CALL            reduce using rule 33 (statute -> turnleft .)
    CIN             reduce using rule 33 (statute -> turnleft .)
    COUT            reduce using rule 33 (statute -> turnleft .)
    DELAY           reduce using rule 33 (statute -> turnleft .)
    FORWARD         reduce using rule 33 (statute -> turnleft .)
    BACKWARD        reduce using rule 33 (statute -> turnleft .)
    TURNLEFT        reduce using rule 33 (statute -> turnleft .)
    TURNRIGHT       reduce using rule 33 (statute -> turnleft .)
    SERVO           reduce using rule 33 (statute -> turnleft .)
    LIGHTS          reduce using rule 33 (statute -> turnleft .)
    DISPLAY         reduce using rule 33 (statute -> turnleft .)
    DISTANCE        reduce using rule 33 (statute -> turnleft .)
    STOP            reduce using rule 33 (statute -> turnleft .)
    RETURN          reduce using rule 33 (statute -> turnleft .)
    RCURLY          reduce using rule 33 (statute -> turnleft .)
    ELSE            reduce using rule 33 (statute -> turnleft .)
    SEMICOLON       reduce using rule 33 (statute -> turnleft .)


state 70

    (34) statute -> turnright .

    IF              reduce using rule 34 (statute -> turnright .)
    ID              reduce using rule 34 (statute -> turnright .)
    CALL            reduce using rule 34 (statute -> turnright .)
    CIN             reduce using rule 34 (statute -> turnright .)
    COUT            reduce using rule 34 (statute -> turnright .)
    DELAY           reduce using rule 34 (statute -> turnright .)
    FORWARD         reduce using rule 34 (statute -> turnright .)
    BACKWARD        reduce using rule 34 (statute -> turnright .)
    TURNLEFT        reduce using rule 34 (statute -> turnright .)
    TURNRIGHT       reduce using rule 34 (statute -> turnright .)
    SERVO           reduce using rule 34 (statute -> turnright .)
    LIGHTS          reduce using rule 34 (statute -> turnright .)
    DISPLAY         reduce using rule 34 (statute -> turnright .)
    DISTANCE        reduce using rule 34 (statute -> turnright .)
    STOP            reduce using rule 34 (statute -> turnright .)
    RETURN          reduce using rule 34 (statute -> turnright .)
    RCURLY          reduce using rule 34 (statute -> turnright .)
    ELSE            reduce using rule 34 (statute -> turnright .)
    SEMICOLON       reduce using rule 34 (statute -> turnright .)


state 71

    (35) statute -> servo .

    IF              reduce using rule 35 (statute -> servo .)
    ID              reduce using rule 35 (statute -> servo .)
    CALL            reduce using rule 35 (statute -> servo .)
    CIN             reduce using rule 35 (statute -> servo .)
    COUT            reduce using rule 35 (statute -> servo .)
    DELAY           reduce using rule 35 (statute -> servo .)
    FORWARD         reduce using rule 35 (statute -> servo .)
    BACKWARD        reduce using rule 35 (statute -> servo .)
    TURNLEFT        reduce using rule 35 (statute -> servo .)
    TURNRIGHT       reduce using rule 35 (statute -> servo .)
    SERVO           reduce using rule 35 (statute -> servo .)
    LIGHTS          reduce using rule 35 (statute -> servo .)
    DISPLAY         reduce using rule 35 (statute -> servo .)
    DISTANCE        reduce using rule 35 (statute -> servo .)
    STOP            reduce using rule 35 (statute -> servo .)
    RETURN          reduce using rule 35 (statute -> servo .)
    RCURLY          reduce using rule 35 (statute -> servo .)
    ELSE            reduce using rule 35 (statute -> servo .)
    SEMICOLON       reduce using rule 35 (statute -> servo .)


state 72

    (36) statute -> lights .

    IF              reduce using rule 36 (statute -> lights .)
    ID              reduce using rule 36 (statute -> lights .)
    CALL            reduce using rule 36 (statute -> lights .)
    CIN             reduce using rule 36 (statute -> lights .)
    COUT            reduce using rule 36 (statute -> lights .)
    DELAY           reduce using rule 36 (statute -> lights .)
    FORWARD         reduce using rule 36 (statute -> lights .)
    BACKWARD        reduce using rule 36 (statute -> lights .)
    TURNLEFT        reduce using rule 36 (statute -> lights .)
    TURNRIGHT       reduce using rule 36 (statute -> lights .)
    SERVO           reduce using rule 36 (statute -> lights .)
    LIGHTS          reduce using rule 36 (statute -> lights .)
    DISPLAY         reduce using rule 36 (statute -> lights .)
    DISTANCE        reduce using rule 36 (statute -> lights .)
    STOP            reduce using rule 36 (statute -> lights .)
    RETURN          reduce using rule 36 (statute -> lights .)
    RCURLY          reduce using rule 36 (statute -> lights .)
    ELSE            reduce using rule 36 (statute -> lights .)
    SEMICOLON       reduce using rule 36 (statute -> lights .)


state 73

    (37) statute -> display .

    IF              reduce using rule 37 (statute -> display .)
    ID              reduce using rule 37 (statute -> display .)
    CALL            reduce using rule 37 (statute -> display .)
    CIN             reduce using rule 37 (statute -> display .)
    COUT            reduce using rule 37 (statute -> display .)
    DELAY           reduce using rule 37 (statute -> display .)
    FORWARD         reduce using rule 37 (statute -> display .)
    BACKWARD        reduce using rule 37 (statute -> display .)
    TURNLEFT        reduce using rule 37 (statute -> display .)
    TURNRIGHT       reduce using rule 37 (statute -> display .)
    SERVO           reduce using rule 37 (statute -> display .)
    LIGHTS          reduce using rule 37 (statute -> display .)
    DISPLAY         reduce using rule 37 (statute -> display .)
    DISTANCE        reduce using rule 37 (statute -> display .)
    STOP            reduce using rule 37 (statute -> display .)
    RETURN          reduce using rule 37 (statute -> display .)
    RCURLY          reduce using rule 37 (statute -> display .)
    ELSE            reduce using rule 37 (statute -> display .)
    SEMICOLON       reduce using rule 37 (statute -> display .)


state 74

    (38) statute -> distance .

    IF              reduce using rule 38 (statute -> distance .)
    ID              reduce using rule 38 (statute -> distance .)
    CALL            reduce using rule 38 (statute -> distance .)
    CIN             reduce using rule 38 (statute -> distance .)
    COUT            reduce using rule 38 (statute -> distance .)
    DELAY           reduce using rule 38 (statute -> distance .)
    FORWARD         reduce using rule 38 (statute -> distance .)
    BACKWARD        reduce using rule 38 (statute -> distance .)
    TURNLEFT        reduce using rule 38 (statute -> distance .)
    TURNRIGHT       reduce using rule 38 (statute -> distance .)
    SERVO           reduce using rule 38 (statute -> distance .)
    LIGHTS          reduce using rule 38 (statute -> distance .)
    DISPLAY         reduce using rule 38 (statute -> distance .)
    DISTANCE        reduce using rule 38 (statute -> distance .)
    STOP            reduce using rule 38 (statute -> distance .)
    RETURN          reduce using rule 38 (statute -> distance .)
    RCURLY          reduce using rule 38 (statute -> distance .)
    ELSE            reduce using rule 38 (statute -> distance .)
    SEMICOLON       reduce using rule 38 (statute -> distance .)


state 75

    (39) statute -> stop .

    IF              reduce using rule 39 (statute -> stop .)
    ID              reduce using rule 39 (statute -> stop .)
    CALL            reduce using rule 39 (statute -> stop .)
    CIN             reduce using rule 39 (statute -> stop .)
    COUT            reduce using rule 39 (statute -> stop .)
    DELAY           reduce using rule 39 (statute -> stop .)
    FORWARD         reduce using rule 39 (statute -> stop .)
    BACKWARD        reduce using rule 39 (statute -> stop .)
    TURNLEFT        reduce using rule 39 (statute -> stop .)
    TURNRIGHT       reduce using rule 39 (statute -> stop .)
    SERVO           reduce using rule 39 (statute -> stop .)
    LIGHTS          reduce using rule 39 (statute -> stop .)
    DISPLAY         reduce using rule 39 (statute -> stop .)
    DISTANCE        reduce using rule 39 (statute -> stop .)
    STOP            reduce using rule 39 (statute -> stop .)
    RETURN          reduce using rule 39 (statute -> stop .)
    RCURLY          reduce using rule 39 (statute -> stop .)
    ELSE            reduce using rule 39 (statute -> stop .)
    SEMICOLON       reduce using rule 39 (statute -> stop .)


state 76

    (40) statute -> return .

    IF              reduce using rule 40 (statute -> return .)
    ID              reduce using rule 40 (statute -> return .)
    CALL            reduce using rule 40 (statute -> return .)
    CIN             reduce using rule 40 (statute -> return .)
    COUT            reduce using rule 40 (statute -> return .)
    DELAY           reduce using rule 40 (statute -> return .)
    FORWARD         reduce using rule 40 (statute -> return .)
    BACKWARD        reduce using rule 40 (statute -> return .)
    TURNLEFT        reduce using rule 40 (statute -> return .)
    TURNRIGHT       reduce using rule 40 (statute -> return .)
    SERVO           reduce using rule 40 (statute -> return .)
    LIGHTS          reduce using rule 40 (statute -> return .)
    DISPLAY         reduce using rule 40 (statute -> return .)
    DISTANCE        reduce using rule 40 (statute -> return .)
    STOP            reduce using rule 40 (statute -> return .)
    RETURN          reduce using rule 40 (statute -> return .)
    RCURLY          reduce using rule 40 (statute -> return .)
    ELSE            reduce using rule 40 (statute -> return .)
    SEMICOLON       reduce using rule 40 (statute -> return .)


state 77

    (41) cond -> IF . LPAREN express RPAREN block else SEMICOLON

    LPAREN          shift and go to state 101


state 78

    (44) assign -> ID . assign1 ASSIGN express SEMICOLON
    (45) assign1 -> . LBRACKET express RBRACKET
    (46) assign1 -> . empty
    (107) empty -> .

    LBRACKET        shift and go to state 103
    ASSIGN          reduce using rule 107 (empty -> .)

    assign1                        shift and go to state 102
    empty                          shift and go to state 104

state 79

    (47) call -> CALL . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 105


state 80

    (52) cin -> CIN . cin1 SEMICOLON
    (53) cin1 -> . cin2
    (54) cin1 -> . cin3
    (55) cin2 -> . LPAREN ID RPAREN
    (56) cin3 -> . LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN

    LPAREN          shift and go to state 109
    LBRACKET        shift and go to state 110

    cin1                           shift and go to state 106
    cin2                           shift and go to state 107
    cin3                           shift and go to state 108

state 81

    (59) cout -> COUT . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 82

    (60) delay -> DELAY . LPAREN CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 83

    (61) forward -> FORWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 84

    (62) backward -> BACKWARD . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 114


state 85

    (63) turnleft -> TURNLEFT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 115


state 86

    (64) turnright -> TURNRIGHT . LPAREN express COMMA express RPAREN SEMICOLON

    LPAREN          shift and go to state 116


state 87

    (65) servo -> SERVO . LPAREN express RPAREN SEMICOLON

    LPAREN          shift and go to state 117


state 88

    (66) lights -> LIGHTS . LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    LPAREN          shift and go to state 118


state 89

    (67) display -> DISPLAY . LPAREN CTE_CHAR RPAREN SEMICOLON

    LPAREN          shift and go to state 119


state 90

    (68) distance -> DISTANCE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 120


state 91

    (69) stop -> STOP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 121


state 92

    (70) return -> RETURN . express SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 122
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 93

    (16) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY . varsblock block RCURLY
    (3) varsblock -> . vars varsblock
    (4) varsblock -> . empty
    (5) vars -> . VARDEF type vars1 SEMICOLON
    (107) empty -> .

    VARDEF          shift and go to state 6
    IF              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CALL            reduce using rule 107 (empty -> .)
    CIN             reduce using rule 107 (empty -> .)
    COUT            reduce using rule 107 (empty -> .)
    DELAY           reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    BACKWARD        reduce using rule 107 (empty -> .)
    TURNLEFT        reduce using rule 107 (empty -> .)
    TURNRIGHT       reduce using rule 107 (empty -> .)
    SERVO           reduce using rule 107 (empty -> .)
    LIGHTS          reduce using rule 107 (empty -> .)
    DISPLAY         reduce using rule 107 (empty -> .)
    DISTANCE        reduce using rule 107 (empty -> .)
    STOP            reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    RCURLY          reduce using rule 107 (empty -> .)

    varsblock                      shift and go to state 132
    vars                           shift and go to state 4
    empty                          shift and go to state 5

state 94

    (19) params -> type ID params1 .

    RPAREN          reduce using rule 19 (params -> type ID params1 .)


state 95

    (21) params1 -> COMMA . type ID params1
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . BOOL
    (74) type -> . CHAR
    (75) type -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    CHAR            shift and go to state 16
    STRING          shift and go to state 17

    type                           shift and go to state 133

state 96

    (22) params1 -> empty .

    RPAREN          reduce using rule 22 (params1 -> empty .)


state 97

    (8) vars2 -> LBRACKET CTE_INT RBRACKET ID ASSIGN CTE_ARR . vars4
    (10) vars4 -> . CTE_ARR COMMA vars4
    (11) vars4 -> . empty
    (107) empty -> .

    CTE_ARR         shift and go to state 134
    SEMICOLON       reduce using rule 107 (empty -> .)

    vars4                          shift and go to state 135
    empty                          shift and go to state 136

state 98

    (12) vars5 -> constant COMMA vars5 .

    SEMICOLON       reduce using rule 12 (vars5 -> constant COMMA vars5 .)


state 99

    (2) main -> MAIN LPAREN RPAREN LCURLY varsblock block RCURLY .

    FIN             reduce using rule 2 (main -> MAIN LPAREN RPAREN LCURLY varsblock block RCURLY .)


state 100

    (23) block -> statute block .

    RCURLY          reduce using rule 23 (block -> statute block .)
    ELSE            reduce using rule 23 (block -> statute block .)
    SEMICOLON       reduce using rule 23 (block -> statute block .)


state 101

    (41) cond -> IF LPAREN . express RPAREN block else SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 137
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 102

    (44) assign -> ID assign1 . ASSIGN express SEMICOLON

    ASSIGN          shift and go to state 138


state 103

    (45) assign1 -> LBRACKET . express RBRACKET
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 139
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 104

    (46) assign1 -> empty .

    ASSIGN          reduce using rule 46 (assign1 -> empty .)


state 105

    (47) call -> CALL ID . LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 140


state 106

    (52) cin -> CIN cin1 . SEMICOLON

    SEMICOLON       shift and go to state 141


state 107

    (53) cin1 -> cin2 .

    SEMICOLON       reduce using rule 53 (cin1 -> cin2 .)


state 108

    (54) cin1 -> cin3 .

    SEMICOLON       reduce using rule 54 (cin1 -> cin3 .)


state 109

    (55) cin2 -> LPAREN . ID RPAREN

    ID              shift and go to state 142


state 110

    (56) cin3 -> LBRACKET . CTE_INT RBRACKET LPAREN cin4 RPAREN

    CTE_INT         shift and go to state 143


state 111

    (59) cout -> COUT LPAREN . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 144
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 112

    (60) delay -> DELAY LPAREN . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 145


state 113

    (61) forward -> FORWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 146
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 114

    (62) backward -> BACKWARD LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 147
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 115

    (63) turnleft -> TURNLEFT LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 148
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 116

    (64) turnright -> TURNRIGHT LPAREN . express COMMA express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 149
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 117

    (65) servo -> SERVO LPAREN . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 150
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 118

    (66) lights -> LIGHTS LPAREN . CTE_INT COMMA CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 151


state 119

    (67) display -> DISPLAY LPAREN . CTE_CHAR RPAREN SEMICOLON

    CTE_CHAR        shift and go to state 152


state 120

    (68) distance -> DISTANCE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 153


state 121

    (69) stop -> STOP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 154


state 122

    (70) return -> RETURN express . SEMICOLON

    SEMICOLON       shift and go to state 155


state 123

    (81) express -> compare . express1
    (82) express1 -> . express2 compare
    (83) express1 -> . empty
    (84) express2 -> . AND
    (85) express2 -> . OR
    (107) empty -> .

    AND             shift and go to state 159
    OR              shift and go to state 160
    SEMICOLON       reduce using rule 107 (empty -> .)
    RPAREN          reduce using rule 107 (empty -> .)
    RBRACKET        reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)

    express1                       shift and go to state 156
    express2                       shift and go to state 157
    empty                          shift and go to state 158

state 124

    (86) compare -> exp . compare1
    (87) compare1 -> . LESSTHAN exp
    (88) compare1 -> . GREATERTHAN exp
    (89) compare1 -> . EQUALS exp
    (90) compare1 -> . NOTEQUAL exp
    (91) compare1 -> . empty
    (107) empty -> .

    LESSTHAN        shift and go to state 162
    GREATERTHAN     shift and go to state 163
    EQUALS          shift and go to state 164
    NOTEQUAL        shift and go to state 165
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    RPAREN          reduce using rule 107 (empty -> .)
    RBRACKET        reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)

    compare1                       shift and go to state 161
    empty                          shift and go to state 166

state 125

    (92) exp -> term . exp1
    (93) exp1 -> . exp2 term
    (94) exp1 -> . empty
    (95) exp2 -> . PLUS
    (96) exp2 -> . MINUS
    (107) empty -> .

    PLUS            shift and go to state 170
    MINUS           shift and go to state 171
    LESSTHAN        reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    EQUALS          reduce using rule 107 (empty -> .)
    NOTEQUAL        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    RPAREN          reduce using rule 107 (empty -> .)
    RBRACKET        reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)

    exp1                           shift and go to state 167
    exp2                           shift and go to state 168
    empty                          shift and go to state 169

state 126

    (97) term -> factor . term1
    (98) term1 -> . term2 term
    (99) term1 -> . empty
    (100) term2 -> . MULTI
    (101) term2 -> . DIVI
    (107) empty -> .

    MULTI           shift and go to state 175
    DIVI            shift and go to state 176
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LESSTHAN        reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    EQUALS          reduce using rule 107 (empty -> .)
    NOTEQUAL        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    RPAREN          reduce using rule 107 (empty -> .)
    RBRACKET        reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)

    term1                          shift and go to state 172
    term2                          shift and go to state 173
    empty                          shift and go to state 174

state 127

    (102) factor -> LPAREN . express RPAREN
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 177
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 128

    (103) factor -> factor1 . constant
    (76) constant -> . ID
    (77) constant -> . CTE_INT
    (78) constant -> . CTE_FLOAT
    (79) constant -> . CTE_STRING
    (80) constant -> . CTE_CHAR

    ID              shift and go to state 39
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42
    CTE_STRING      shift and go to state 43
    CTE_CHAR        shift and go to state 44

    constant                       shift and go to state 178

state 129

    (104) factor1 -> PLUS .

    ID              reduce using rule 104 (factor1 -> PLUS .)
    CTE_INT         reduce using rule 104 (factor1 -> PLUS .)
    CTE_FLOAT       reduce using rule 104 (factor1 -> PLUS .)
    CTE_STRING      reduce using rule 104 (factor1 -> PLUS .)
    CTE_CHAR        reduce using rule 104 (factor1 -> PLUS .)


state 130

    (105) factor1 -> MINUS .

    ID              reduce using rule 105 (factor1 -> MINUS .)
    CTE_INT         reduce using rule 105 (factor1 -> MINUS .)
    CTE_FLOAT       reduce using rule 105 (factor1 -> MINUS .)
    CTE_STRING      reduce using rule 105 (factor1 -> MINUS .)
    CTE_CHAR        reduce using rule 105 (factor1 -> MINUS .)


state 131

    (106) factor1 -> empty .

    ID              reduce using rule 106 (factor1 -> empty .)
    CTE_INT         reduce using rule 106 (factor1 -> empty .)
    CTE_FLOAT       reduce using rule 106 (factor1 -> empty .)
    CTE_STRING      reduce using rule 106 (factor1 -> empty .)
    CTE_CHAR        reduce using rule 106 (factor1 -> empty .)


state 132

    (16) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock . block RCURLY
    (23) block -> . statute block
    (24) block -> . empty
    (25) statute -> . cond
    (26) statute -> . assign
    (27) statute -> . call
    (28) statute -> . cin
    (29) statute -> . cout
    (30) statute -> . delay
    (31) statute -> . forward
    (32) statute -> . backward
    (33) statute -> . turnleft
    (34) statute -> . turnright
    (35) statute -> . servo
    (36) statute -> . lights
    (37) statute -> . display
    (38) statute -> . distance
    (39) statute -> . stop
    (40) statute -> . return
    (107) empty -> .
    (41) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN express SEMICOLON

    RCURLY          reduce using rule 107 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 78
    CALL            shift and go to state 79
    CIN             shift and go to state 80
    COUT            shift and go to state 81
    DELAY           shift and go to state 82
    FORWARD         shift and go to state 83
    BACKWARD        shift and go to state 84
    TURNLEFT        shift and go to state 85
    TURNRIGHT       shift and go to state 86
    SERVO           shift and go to state 87
    LIGHTS          shift and go to state 88
    DISPLAY         shift and go to state 89
    DISTANCE        shift and go to state 90
    STOP            shift and go to state 91
    RETURN          shift and go to state 92

    block                          shift and go to state 179
    statute                        shift and go to state 59
    empty                          shift and go to state 60
    cond                           shift and go to state 61
    assign                         shift and go to state 62
    call                           shift and go to state 63
    cin                            shift and go to state 64
    cout                           shift and go to state 65
    delay                          shift and go to state 66
    forward                        shift and go to state 67
    backward                       shift and go to state 68
    turnleft                       shift and go to state 69
    turnright                      shift and go to state 70
    servo                          shift and go to state 71
    lights                         shift and go to state 72
    display                        shift and go to state 73
    distance                       shift and go to state 74
    stop                           shift and go to state 75
    return                         shift and go to state 76

state 133

    (21) params1 -> COMMA type . ID params1

    ID              shift and go to state 180


state 134

    (10) vars4 -> CTE_ARR . COMMA vars4

    COMMA           shift and go to state 181


state 135

    (8) vars2 -> LBRACKET CTE_INT RBRACKET ID ASSIGN CTE_ARR vars4 .

    SEMICOLON       reduce using rule 8 (vars2 -> LBRACKET CTE_INT RBRACKET ID ASSIGN CTE_ARR vars4 .)


state 136

    (11) vars4 -> empty .

    SEMICOLON       reduce using rule 11 (vars4 -> empty .)


state 137

    (41) cond -> IF LPAREN express . RPAREN block else SEMICOLON

    RPAREN          shift and go to state 182


state 138

    (44) assign -> ID assign1 ASSIGN . express SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 183
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 139

    (45) assign1 -> LBRACKET express . RBRACKET

    RBRACKET        shift and go to state 184


state 140

    (47) call -> CALL ID LPAREN . call1 RPAREN SEMICOLON
    (48) call1 -> . express call2
    (49) call1 -> . empty
    (81) express -> . compare express1
    (107) empty -> .
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty

    RPAREN          reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130

    call1                          shift and go to state 185
    express                        shift and go to state 186
    empty                          shift and go to state 187
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128

state 141

    (52) cin -> CIN cin1 SEMICOLON .

    IF              reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    ID              reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    CALL            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    CIN             reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    COUT            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DELAY           reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    FORWARD         reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    BACKWARD        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    TURNLEFT        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    TURNRIGHT       reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    SERVO           reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    LIGHTS          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DISPLAY         reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    DISTANCE        reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    STOP            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    RETURN          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    RCURLY          reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    ELSE            reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)
    SEMICOLON       reduce using rule 52 (cin -> CIN cin1 SEMICOLON .)


state 142

    (55) cin2 -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 188


state 143

    (56) cin3 -> LBRACKET CTE_INT . RBRACKET LPAREN cin4 RPAREN

    RBRACKET        shift and go to state 189


state 144

    (59) cout -> COUT LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 190


state 145

    (60) delay -> DELAY LPAREN CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 191


state 146

    (61) forward -> FORWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 192


state 147

    (62) backward -> BACKWARD LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 193


state 148

    (63) turnleft -> TURNLEFT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 194


state 149

    (64) turnright -> TURNRIGHT LPAREN express . COMMA express RPAREN SEMICOLON

    COMMA           shift and go to state 195


state 150

    (65) servo -> SERVO LPAREN express . RPAREN SEMICOLON

    RPAREN          shift and go to state 196


state 151

    (66) lights -> LIGHTS LPAREN CTE_INT . COMMA CTE_INT RPAREN SEMICOLON

    COMMA           shift and go to state 197


state 152

    (67) display -> DISPLAY LPAREN CTE_CHAR . RPAREN SEMICOLON

    RPAREN          shift and go to state 198


state 153

    (68) distance -> DISTANCE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 199


state 154

    (69) stop -> STOP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 200


state 155

    (70) return -> RETURN express SEMICOLON .

    IF              reduce using rule 70 (return -> RETURN express SEMICOLON .)
    ID              reduce using rule 70 (return -> RETURN express SEMICOLON .)
    CALL            reduce using rule 70 (return -> RETURN express SEMICOLON .)
    CIN             reduce using rule 70 (return -> RETURN express SEMICOLON .)
    COUT            reduce using rule 70 (return -> RETURN express SEMICOLON .)
    DELAY           reduce using rule 70 (return -> RETURN express SEMICOLON .)
    FORWARD         reduce using rule 70 (return -> RETURN express SEMICOLON .)
    BACKWARD        reduce using rule 70 (return -> RETURN express SEMICOLON .)
    TURNLEFT        reduce using rule 70 (return -> RETURN express SEMICOLON .)
    TURNRIGHT       reduce using rule 70 (return -> RETURN express SEMICOLON .)
    SERVO           reduce using rule 70 (return -> RETURN express SEMICOLON .)
    LIGHTS          reduce using rule 70 (return -> RETURN express SEMICOLON .)
    DISPLAY         reduce using rule 70 (return -> RETURN express SEMICOLON .)
    DISTANCE        reduce using rule 70 (return -> RETURN express SEMICOLON .)
    STOP            reduce using rule 70 (return -> RETURN express SEMICOLON .)
    RETURN          reduce using rule 70 (return -> RETURN express SEMICOLON .)
    RCURLY          reduce using rule 70 (return -> RETURN express SEMICOLON .)
    ELSE            reduce using rule 70 (return -> RETURN express SEMICOLON .)
    SEMICOLON       reduce using rule 70 (return -> RETURN express SEMICOLON .)


state 156

    (81) express -> compare express1 .

    SEMICOLON       reduce using rule 81 (express -> compare express1 .)
    RPAREN          reduce using rule 81 (express -> compare express1 .)
    RBRACKET        reduce using rule 81 (express -> compare express1 .)
    COMMA           reduce using rule 81 (express -> compare express1 .)


state 157

    (82) express1 -> express2 . compare
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    compare                        shift and go to state 201
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 158

    (83) express1 -> empty .

    SEMICOLON       reduce using rule 83 (express1 -> empty .)
    RPAREN          reduce using rule 83 (express1 -> empty .)
    RBRACKET        reduce using rule 83 (express1 -> empty .)
    COMMA           reduce using rule 83 (express1 -> empty .)


state 159

    (84) express2 -> AND .

    LPAREN          reduce using rule 84 (express2 -> AND .)
    PLUS            reduce using rule 84 (express2 -> AND .)
    MINUS           reduce using rule 84 (express2 -> AND .)
    ID              reduce using rule 84 (express2 -> AND .)
    CTE_INT         reduce using rule 84 (express2 -> AND .)
    CTE_FLOAT       reduce using rule 84 (express2 -> AND .)
    CTE_STRING      reduce using rule 84 (express2 -> AND .)
    CTE_CHAR        reduce using rule 84 (express2 -> AND .)


state 160

    (85) express2 -> OR .

    LPAREN          reduce using rule 85 (express2 -> OR .)
    PLUS            reduce using rule 85 (express2 -> OR .)
    MINUS           reduce using rule 85 (express2 -> OR .)
    ID              reduce using rule 85 (express2 -> OR .)
    CTE_INT         reduce using rule 85 (express2 -> OR .)
    CTE_FLOAT       reduce using rule 85 (express2 -> OR .)
    CTE_STRING      reduce using rule 85 (express2 -> OR .)
    CTE_CHAR        reduce using rule 85 (express2 -> OR .)


state 161

    (86) compare -> exp compare1 .

    AND             reduce using rule 86 (compare -> exp compare1 .)
    OR              reduce using rule 86 (compare -> exp compare1 .)
    SEMICOLON       reduce using rule 86 (compare -> exp compare1 .)
    RPAREN          reduce using rule 86 (compare -> exp compare1 .)
    RBRACKET        reduce using rule 86 (compare -> exp compare1 .)
    COMMA           reduce using rule 86 (compare -> exp compare1 .)


state 162

    (87) compare1 -> LESSTHAN . exp
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    exp                            shift and go to state 202
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 163

    (88) compare1 -> GREATERTHAN . exp
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    exp                            shift and go to state 203
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 164

    (89) compare1 -> EQUALS . exp
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    exp                            shift and go to state 204
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 165

    (90) compare1 -> NOTEQUAL . exp
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    exp                            shift and go to state 205
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 166

    (91) compare1 -> empty .

    AND             reduce using rule 91 (compare1 -> empty .)
    OR              reduce using rule 91 (compare1 -> empty .)
    SEMICOLON       reduce using rule 91 (compare1 -> empty .)
    RPAREN          reduce using rule 91 (compare1 -> empty .)
    RBRACKET        reduce using rule 91 (compare1 -> empty .)
    COMMA           reduce using rule 91 (compare1 -> empty .)


state 167

    (92) exp -> term exp1 .

    LESSTHAN        reduce using rule 92 (exp -> term exp1 .)
    GREATERTHAN     reduce using rule 92 (exp -> term exp1 .)
    EQUALS          reduce using rule 92 (exp -> term exp1 .)
    NOTEQUAL        reduce using rule 92 (exp -> term exp1 .)
    AND             reduce using rule 92 (exp -> term exp1 .)
    OR              reduce using rule 92 (exp -> term exp1 .)
    SEMICOLON       reduce using rule 92 (exp -> term exp1 .)
    RPAREN          reduce using rule 92 (exp -> term exp1 .)
    RBRACKET        reduce using rule 92 (exp -> term exp1 .)
    COMMA           reduce using rule 92 (exp -> term exp1 .)


state 168

    (93) exp1 -> exp2 . term
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    term                           shift and go to state 206
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 169

    (94) exp1 -> empty .

    LESSTHAN        reduce using rule 94 (exp1 -> empty .)
    GREATERTHAN     reduce using rule 94 (exp1 -> empty .)
    EQUALS          reduce using rule 94 (exp1 -> empty .)
    NOTEQUAL        reduce using rule 94 (exp1 -> empty .)
    AND             reduce using rule 94 (exp1 -> empty .)
    OR              reduce using rule 94 (exp1 -> empty .)
    SEMICOLON       reduce using rule 94 (exp1 -> empty .)
    RPAREN          reduce using rule 94 (exp1 -> empty .)
    RBRACKET        reduce using rule 94 (exp1 -> empty .)
    COMMA           reduce using rule 94 (exp1 -> empty .)


state 170

    (95) exp2 -> PLUS .

    LPAREN          reduce using rule 95 (exp2 -> PLUS .)
    PLUS            reduce using rule 95 (exp2 -> PLUS .)
    MINUS           reduce using rule 95 (exp2 -> PLUS .)
    ID              reduce using rule 95 (exp2 -> PLUS .)
    CTE_INT         reduce using rule 95 (exp2 -> PLUS .)
    CTE_FLOAT       reduce using rule 95 (exp2 -> PLUS .)
    CTE_STRING      reduce using rule 95 (exp2 -> PLUS .)
    CTE_CHAR        reduce using rule 95 (exp2 -> PLUS .)


state 171

    (96) exp2 -> MINUS .

    LPAREN          reduce using rule 96 (exp2 -> MINUS .)
    PLUS            reduce using rule 96 (exp2 -> MINUS .)
    MINUS           reduce using rule 96 (exp2 -> MINUS .)
    ID              reduce using rule 96 (exp2 -> MINUS .)
    CTE_INT         reduce using rule 96 (exp2 -> MINUS .)
    CTE_FLOAT       reduce using rule 96 (exp2 -> MINUS .)
    CTE_STRING      reduce using rule 96 (exp2 -> MINUS .)
    CTE_CHAR        reduce using rule 96 (exp2 -> MINUS .)


state 172

    (97) term -> factor term1 .

    PLUS            reduce using rule 97 (term -> factor term1 .)
    MINUS           reduce using rule 97 (term -> factor term1 .)
    LESSTHAN        reduce using rule 97 (term -> factor term1 .)
    GREATERTHAN     reduce using rule 97 (term -> factor term1 .)
    EQUALS          reduce using rule 97 (term -> factor term1 .)
    NOTEQUAL        reduce using rule 97 (term -> factor term1 .)
    AND             reduce using rule 97 (term -> factor term1 .)
    OR              reduce using rule 97 (term -> factor term1 .)
    SEMICOLON       reduce using rule 97 (term -> factor term1 .)
    RPAREN          reduce using rule 97 (term -> factor term1 .)
    RBRACKET        reduce using rule 97 (term -> factor term1 .)
    COMMA           reduce using rule 97 (term -> factor term1 .)


state 173

    (98) term1 -> term2 . term
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    term                           shift and go to state 207
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 174

    (99) term1 -> empty .

    PLUS            reduce using rule 99 (term1 -> empty .)
    MINUS           reduce using rule 99 (term1 -> empty .)
    LESSTHAN        reduce using rule 99 (term1 -> empty .)
    GREATERTHAN     reduce using rule 99 (term1 -> empty .)
    EQUALS          reduce using rule 99 (term1 -> empty .)
    NOTEQUAL        reduce using rule 99 (term1 -> empty .)
    AND             reduce using rule 99 (term1 -> empty .)
    OR              reduce using rule 99 (term1 -> empty .)
    SEMICOLON       reduce using rule 99 (term1 -> empty .)
    RPAREN          reduce using rule 99 (term1 -> empty .)
    RBRACKET        reduce using rule 99 (term1 -> empty .)
    COMMA           reduce using rule 99 (term1 -> empty .)


state 175

    (100) term2 -> MULTI .

    LPAREN          reduce using rule 100 (term2 -> MULTI .)
    PLUS            reduce using rule 100 (term2 -> MULTI .)
    MINUS           reduce using rule 100 (term2 -> MULTI .)
    ID              reduce using rule 100 (term2 -> MULTI .)
    CTE_INT         reduce using rule 100 (term2 -> MULTI .)
    CTE_FLOAT       reduce using rule 100 (term2 -> MULTI .)
    CTE_STRING      reduce using rule 100 (term2 -> MULTI .)
    CTE_CHAR        reduce using rule 100 (term2 -> MULTI .)


state 176

    (101) term2 -> DIVI .

    LPAREN          reduce using rule 101 (term2 -> DIVI .)
    PLUS            reduce using rule 101 (term2 -> DIVI .)
    MINUS           reduce using rule 101 (term2 -> DIVI .)
    ID              reduce using rule 101 (term2 -> DIVI .)
    CTE_INT         reduce using rule 101 (term2 -> DIVI .)
    CTE_FLOAT       reduce using rule 101 (term2 -> DIVI .)
    CTE_STRING      reduce using rule 101 (term2 -> DIVI .)
    CTE_CHAR        reduce using rule 101 (term2 -> DIVI .)


state 177

    (102) factor -> LPAREN express . RPAREN

    RPAREN          shift and go to state 208


state 178

    (103) factor -> factor1 constant .

    MULTI           reduce using rule 103 (factor -> factor1 constant .)
    DIVI            reduce using rule 103 (factor -> factor1 constant .)
    PLUS            reduce using rule 103 (factor -> factor1 constant .)
    MINUS           reduce using rule 103 (factor -> factor1 constant .)
    LESSTHAN        reduce using rule 103 (factor -> factor1 constant .)
    GREATERTHAN     reduce using rule 103 (factor -> factor1 constant .)
    EQUALS          reduce using rule 103 (factor -> factor1 constant .)
    NOTEQUAL        reduce using rule 103 (factor -> factor1 constant .)
    AND             reduce using rule 103 (factor -> factor1 constant .)
    OR              reduce using rule 103 (factor -> factor1 constant .)
    SEMICOLON       reduce using rule 103 (factor -> factor1 constant .)
    RPAREN          reduce using rule 103 (factor -> factor1 constant .)
    RBRACKET        reduce using rule 103 (factor -> factor1 constant .)
    COMMA           reduce using rule 103 (factor -> factor1 constant .)


state 179

    (16) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block . RCURLY

    RCURLY          shift and go to state 209


state 180

    (21) params1 -> COMMA type ID . params1
    (21) params1 -> . COMMA type ID params1
    (22) params1 -> . empty
    (107) empty -> .

    COMMA           shift and go to state 95
    RPAREN          reduce using rule 107 (empty -> .)

    params1                        shift and go to state 210
    empty                          shift and go to state 96

state 181

    (10) vars4 -> CTE_ARR COMMA . vars4
    (10) vars4 -> . CTE_ARR COMMA vars4
    (11) vars4 -> . empty
    (107) empty -> .

    CTE_ARR         shift and go to state 134
    SEMICOLON       reduce using rule 107 (empty -> .)

    vars4                          shift and go to state 211
    empty                          shift and go to state 136

state 182

    (41) cond -> IF LPAREN express RPAREN . block else SEMICOLON
    (23) block -> . statute block
    (24) block -> . empty
    (25) statute -> . cond
    (26) statute -> . assign
    (27) statute -> . call
    (28) statute -> . cin
    (29) statute -> . cout
    (30) statute -> . delay
    (31) statute -> . forward
    (32) statute -> . backward
    (33) statute -> . turnleft
    (34) statute -> . turnright
    (35) statute -> . servo
    (36) statute -> . lights
    (37) statute -> . display
    (38) statute -> . distance
    (39) statute -> . stop
    (40) statute -> . return
    (107) empty -> .
    (41) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN express SEMICOLON

    ELSE            reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 78
    CALL            shift and go to state 79
    CIN             shift and go to state 80
    COUT            shift and go to state 81
    DELAY           shift and go to state 82
    FORWARD         shift and go to state 83
    BACKWARD        shift and go to state 84
    TURNLEFT        shift and go to state 85
    TURNRIGHT       shift and go to state 86
    SERVO           shift and go to state 87
    LIGHTS          shift and go to state 88
    DISPLAY         shift and go to state 89
    DISTANCE        shift and go to state 90
    STOP            shift and go to state 91
    RETURN          shift and go to state 92

    block                          shift and go to state 212
    statute                        shift and go to state 59
    empty                          shift and go to state 60
    cond                           shift and go to state 61
    assign                         shift and go to state 62
    call                           shift and go to state 63
    cin                            shift and go to state 64
    cout                           shift and go to state 65
    delay                          shift and go to state 66
    forward                        shift and go to state 67
    backward                       shift and go to state 68
    turnleft                       shift and go to state 69
    turnright                      shift and go to state 70
    servo                          shift and go to state 71
    lights                         shift and go to state 72
    display                        shift and go to state 73
    distance                       shift and go to state 74
    stop                           shift and go to state 75
    return                         shift and go to state 76

state 183

    (44) assign -> ID assign1 ASSIGN express . SEMICOLON

    SEMICOLON       shift and go to state 213


state 184

    (45) assign1 -> LBRACKET express RBRACKET .

    ASSIGN          reduce using rule 45 (assign1 -> LBRACKET express RBRACKET .)


state 185

    (47) call -> CALL ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 214


state 186

    (48) call1 -> express . call2
    (50) call2 -> . COMMA call1
    (51) call2 -> . empty
    (107) empty -> .

    COMMA           shift and go to state 216
    RPAREN          reduce using rule 107 (empty -> .)

    call2                          shift and go to state 215
    empty                          shift and go to state 217

state 187

    (49) call1 -> empty .
    (106) factor1 -> empty .

    RPAREN          reduce using rule 49 (call1 -> empty .)
    ID              reduce using rule 106 (factor1 -> empty .)
    CTE_INT         reduce using rule 106 (factor1 -> empty .)
    CTE_FLOAT       reduce using rule 106 (factor1 -> empty .)
    CTE_STRING      reduce using rule 106 (factor1 -> empty .)
    CTE_CHAR        reduce using rule 106 (factor1 -> empty .)


state 188

    (55) cin2 -> LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 55 (cin2 -> LPAREN ID RPAREN .)


state 189

    (56) cin3 -> LBRACKET CTE_INT RBRACKET . LPAREN cin4 RPAREN

    LPAREN          shift and go to state 218


state 190

    (59) cout -> COUT LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 219


state 191

    (60) delay -> DELAY LPAREN CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 220


state 192

    (61) forward -> FORWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 221
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 193

    (62) backward -> BACKWARD LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 222
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 194

    (63) turnleft -> TURNLEFT LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 223
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 195

    (64) turnright -> TURNRIGHT LPAREN express COMMA . express RPAREN SEMICOLON
    (81) express -> . compare express1
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty
    (107) empty -> .

    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)

    express                        shift and go to state 224
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128
    empty                          shift and go to state 131

state 196

    (65) servo -> SERVO LPAREN express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 225


state 197

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA . CTE_INT RPAREN SEMICOLON

    CTE_INT         shift and go to state 226


state 198

    (67) display -> DISPLAY LPAREN CTE_CHAR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 199

    (68) distance -> DISTANCE LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 68 (distance -> DISTANCE LPAREN RPAREN SEMICOLON .)


state 200

    (69) stop -> STOP LPAREN RPAREN SEMICOLON .

    IF              reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CALL            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    CIN             reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    COUT            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DELAY           reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    FORWARD         reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SERVO           reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    STOP            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    ELSE            reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 69 (stop -> STOP LPAREN RPAREN SEMICOLON .)


state 201

    (82) express1 -> express2 compare .

    SEMICOLON       reduce using rule 82 (express1 -> express2 compare .)
    RPAREN          reduce using rule 82 (express1 -> express2 compare .)
    RBRACKET        reduce using rule 82 (express1 -> express2 compare .)
    COMMA           reduce using rule 82 (express1 -> express2 compare .)


state 202

    (87) compare1 -> LESSTHAN exp .

    AND             reduce using rule 87 (compare1 -> LESSTHAN exp .)
    OR              reduce using rule 87 (compare1 -> LESSTHAN exp .)
    SEMICOLON       reduce using rule 87 (compare1 -> LESSTHAN exp .)
    RPAREN          reduce using rule 87 (compare1 -> LESSTHAN exp .)
    RBRACKET        reduce using rule 87 (compare1 -> LESSTHAN exp .)
    COMMA           reduce using rule 87 (compare1 -> LESSTHAN exp .)


state 203

    (88) compare1 -> GREATERTHAN exp .

    AND             reduce using rule 88 (compare1 -> GREATERTHAN exp .)
    OR              reduce using rule 88 (compare1 -> GREATERTHAN exp .)
    SEMICOLON       reduce using rule 88 (compare1 -> GREATERTHAN exp .)
    RPAREN          reduce using rule 88 (compare1 -> GREATERTHAN exp .)
    RBRACKET        reduce using rule 88 (compare1 -> GREATERTHAN exp .)
    COMMA           reduce using rule 88 (compare1 -> GREATERTHAN exp .)


state 204

    (89) compare1 -> EQUALS exp .

    AND             reduce using rule 89 (compare1 -> EQUALS exp .)
    OR              reduce using rule 89 (compare1 -> EQUALS exp .)
    SEMICOLON       reduce using rule 89 (compare1 -> EQUALS exp .)
    RPAREN          reduce using rule 89 (compare1 -> EQUALS exp .)
    RBRACKET        reduce using rule 89 (compare1 -> EQUALS exp .)
    COMMA           reduce using rule 89 (compare1 -> EQUALS exp .)


state 205

    (90) compare1 -> NOTEQUAL exp .

    AND             reduce using rule 90 (compare1 -> NOTEQUAL exp .)
    OR              reduce using rule 90 (compare1 -> NOTEQUAL exp .)
    SEMICOLON       reduce using rule 90 (compare1 -> NOTEQUAL exp .)
    RPAREN          reduce using rule 90 (compare1 -> NOTEQUAL exp .)
    RBRACKET        reduce using rule 90 (compare1 -> NOTEQUAL exp .)
    COMMA           reduce using rule 90 (compare1 -> NOTEQUAL exp .)


state 206

    (93) exp1 -> exp2 term .

    LESSTHAN        reduce using rule 93 (exp1 -> exp2 term .)
    GREATERTHAN     reduce using rule 93 (exp1 -> exp2 term .)
    EQUALS          reduce using rule 93 (exp1 -> exp2 term .)
    NOTEQUAL        reduce using rule 93 (exp1 -> exp2 term .)
    AND             reduce using rule 93 (exp1 -> exp2 term .)
    OR              reduce using rule 93 (exp1 -> exp2 term .)
    SEMICOLON       reduce using rule 93 (exp1 -> exp2 term .)
    RPAREN          reduce using rule 93 (exp1 -> exp2 term .)
    RBRACKET        reduce using rule 93 (exp1 -> exp2 term .)
    COMMA           reduce using rule 93 (exp1 -> exp2 term .)


state 207

    (98) term1 -> term2 term .

    PLUS            reduce using rule 98 (term1 -> term2 term .)
    MINUS           reduce using rule 98 (term1 -> term2 term .)
    LESSTHAN        reduce using rule 98 (term1 -> term2 term .)
    GREATERTHAN     reduce using rule 98 (term1 -> term2 term .)
    EQUALS          reduce using rule 98 (term1 -> term2 term .)
    NOTEQUAL        reduce using rule 98 (term1 -> term2 term .)
    AND             reduce using rule 98 (term1 -> term2 term .)
    OR              reduce using rule 98 (term1 -> term2 term .)
    SEMICOLON       reduce using rule 98 (term1 -> term2 term .)
    RPAREN          reduce using rule 98 (term1 -> term2 term .)
    RBRACKET        reduce using rule 98 (term1 -> term2 term .)
    COMMA           reduce using rule 98 (term1 -> term2 term .)


state 208

    (102) factor -> LPAREN express RPAREN .

    MULTI           reduce using rule 102 (factor -> LPAREN express RPAREN .)
    DIVI            reduce using rule 102 (factor -> LPAREN express RPAREN .)
    PLUS            reduce using rule 102 (factor -> LPAREN express RPAREN .)
    MINUS           reduce using rule 102 (factor -> LPAREN express RPAREN .)
    LESSTHAN        reduce using rule 102 (factor -> LPAREN express RPAREN .)
    GREATERTHAN     reduce using rule 102 (factor -> LPAREN express RPAREN .)
    EQUALS          reduce using rule 102 (factor -> LPAREN express RPAREN .)
    NOTEQUAL        reduce using rule 102 (factor -> LPAREN express RPAREN .)
    AND             reduce using rule 102 (factor -> LPAREN express RPAREN .)
    OR              reduce using rule 102 (factor -> LPAREN express RPAREN .)
    SEMICOLON       reduce using rule 102 (factor -> LPAREN express RPAREN .)
    RPAREN          reduce using rule 102 (factor -> LPAREN express RPAREN .)
    RBRACKET        reduce using rule 102 (factor -> LPAREN express RPAREN .)
    COMMA           reduce using rule 102 (factor -> LPAREN express RPAREN .)


state 209

    (16) funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .

    FUNCDEF         reduce using rule 16 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)
    MAIN            reduce using rule 16 (funcs -> FUNCDEF choosetype ID LPAREN params RPAREN LCURLY varsblock block RCURLY .)


state 210

    (21) params1 -> COMMA type ID params1 .

    RPAREN          reduce using rule 21 (params1 -> COMMA type ID params1 .)


state 211

    (10) vars4 -> CTE_ARR COMMA vars4 .

    SEMICOLON       reduce using rule 10 (vars4 -> CTE_ARR COMMA vars4 .)


state 212

    (41) cond -> IF LPAREN express RPAREN block . else SEMICOLON
    (42) else -> . ELSE block
    (43) else -> . empty
    (107) empty -> .

    ELSE            shift and go to state 229
    SEMICOLON       reduce using rule 107 (empty -> .)

    else                           shift and go to state 228
    empty                          shift and go to state 230

state 213

    (44) assign -> ID assign1 ASSIGN express SEMICOLON .

    IF              reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ID              reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CALL            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    CIN             reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    COUT            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DELAY           reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    FORWARD         reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    BACKWARD        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNLEFT        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    TURNRIGHT       reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SERVO           reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    LIGHTS          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISPLAY         reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    DISTANCE        reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    STOP            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RETURN          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    RCURLY          reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    ELSE            reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)
    SEMICOLON       reduce using rule 44 (assign -> ID assign1 ASSIGN express SEMICOLON .)


state 214

    (47) call -> CALL ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 215

    (48) call1 -> express call2 .

    RPAREN          reduce using rule 48 (call1 -> express call2 .)


state 216

    (50) call2 -> COMMA . call1
    (48) call1 -> . express call2
    (49) call1 -> . empty
    (81) express -> . compare express1
    (107) empty -> .
    (86) compare -> . exp compare1
    (92) exp -> . term exp1
    (97) term -> . factor term1
    (102) factor -> . LPAREN express RPAREN
    (103) factor -> . factor1 constant
    (104) factor1 -> . PLUS
    (105) factor1 -> . MINUS
    (106) factor1 -> . empty

    RPAREN          reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CTE_INT         reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    CTE_STRING      reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    LPAREN          shift and go to state 127
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130

    call1                          shift and go to state 232
    express                        shift and go to state 186
    empty                          shift and go to state 187
    compare                        shift and go to state 123
    exp                            shift and go to state 124
    term                           shift and go to state 125
    factor                         shift and go to state 126
    factor1                        shift and go to state 128

state 217

    (51) call2 -> empty .

    RPAREN          reduce using rule 51 (call2 -> empty .)


state 218

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN . cin4 RPAREN
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (107) empty -> .

    COMMA           shift and go to state 234
    RPAREN          reduce using rule 107 (empty -> .)

    cin4                           shift and go to state 233
    empty                          shift and go to state 235

state 219

    (59) cout -> COUT LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    ELSE            reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 59 (cout -> COUT LPAREN express RPAREN SEMICOLON .)


state 220

    (60) delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    ELSE            reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 60 (delay -> DELAY LPAREN CTE_INT RPAREN SEMICOLON .)


state 221

    (61) forward -> FORWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 236


state 222

    (62) backward -> BACKWARD LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 237


state 223

    (63) turnleft -> TURNLEFT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 238


state 224

    (64) turnright -> TURNRIGHT LPAREN express COMMA express . RPAREN SEMICOLON

    RPAREN          shift and go to state 239


state 225

    (65) servo -> SERVO LPAREN express RPAREN SEMICOLON .

    IF              reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ID              reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CALL            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    CIN             reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    COUT            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DELAY           reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SERVO           reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    STOP            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    ELSE            reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 65 (servo -> SERVO LPAREN express RPAREN SEMICOLON .)


state 226

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT . RPAREN SEMICOLON

    RPAREN          shift and go to state 240


state 227

    (67) display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .

    IF              reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ID              reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CALL            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    CIN             reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    COUT            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DELAY           reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    FORWARD         reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SERVO           reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    STOP            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    RCURLY          reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    ELSE            reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 67 (display -> DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON .)


state 228

    (41) cond -> IF LPAREN express RPAREN block else . SEMICOLON

    SEMICOLON       shift and go to state 241


state 229

    (42) else -> ELSE . block
    (23) block -> . statute block
    (24) block -> . empty
    (25) statute -> . cond
    (26) statute -> . assign
    (27) statute -> . call
    (28) statute -> . cin
    (29) statute -> . cout
    (30) statute -> . delay
    (31) statute -> . forward
    (32) statute -> . backward
    (33) statute -> . turnleft
    (34) statute -> . turnright
    (35) statute -> . servo
    (36) statute -> . lights
    (37) statute -> . display
    (38) statute -> . distance
    (39) statute -> . stop
    (40) statute -> . return
    (107) empty -> .
    (41) cond -> . IF LPAREN express RPAREN block else SEMICOLON
    (44) assign -> . ID assign1 ASSIGN express SEMICOLON
    (47) call -> . CALL ID LPAREN call1 RPAREN SEMICOLON
    (52) cin -> . CIN cin1 SEMICOLON
    (59) cout -> . COUT LPAREN express RPAREN SEMICOLON
    (60) delay -> . DELAY LPAREN CTE_INT RPAREN SEMICOLON
    (61) forward -> . FORWARD LPAREN express COMMA express RPAREN SEMICOLON
    (62) backward -> . BACKWARD LPAREN express COMMA express RPAREN SEMICOLON
    (63) turnleft -> . TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON
    (64) turnright -> . TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON
    (65) servo -> . SERVO LPAREN express RPAREN SEMICOLON
    (66) lights -> . LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON
    (67) display -> . DISPLAY LPAREN CTE_CHAR RPAREN SEMICOLON
    (68) distance -> . DISTANCE LPAREN RPAREN SEMICOLON
    (69) stop -> . STOP LPAREN RPAREN SEMICOLON
    (70) return -> . RETURN express SEMICOLON

    SEMICOLON       reduce using rule 107 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 78
    CALL            shift and go to state 79
    CIN             shift and go to state 80
    COUT            shift and go to state 81
    DELAY           shift and go to state 82
    FORWARD         shift and go to state 83
    BACKWARD        shift and go to state 84
    TURNLEFT        shift and go to state 85
    TURNRIGHT       shift and go to state 86
    SERVO           shift and go to state 87
    LIGHTS          shift and go to state 88
    DISPLAY         shift and go to state 89
    DISTANCE        shift and go to state 90
    STOP            shift and go to state 91
    RETURN          shift and go to state 92

    block                          shift and go to state 242
    statute                        shift and go to state 59
    empty                          shift and go to state 60
    cond                           shift and go to state 61
    assign                         shift and go to state 62
    call                           shift and go to state 63
    cin                            shift and go to state 64
    cout                           shift and go to state 65
    delay                          shift and go to state 66
    forward                        shift and go to state 67
    backward                       shift and go to state 68
    turnleft                       shift and go to state 69
    turnright                      shift and go to state 70
    servo                          shift and go to state 71
    lights                         shift and go to state 72
    display                        shift and go to state 73
    distance                       shift and go to state 74
    stop                           shift and go to state 75
    return                         shift and go to state 76

state 230

    (43) else -> empty .

    SEMICOLON       reduce using rule 43 (else -> empty .)


state 231

    (47) call -> CALL ID LPAREN call1 RPAREN SEMICOLON .

    IF              reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ID              reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CALL            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    CIN             reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    COUT            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DELAY           reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    FORWARD         reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SERVO           reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    STOP            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    ELSE            reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 47 (call -> CALL ID LPAREN call1 RPAREN SEMICOLON .)


state 232

    (50) call2 -> COMMA call1 .

    RPAREN          reduce using rule 50 (call2 -> COMMA call1 .)


state 233

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 . RPAREN

    RPAREN          shift and go to state 243


state 234

    (57) cin4 -> COMMA . ID cin4

    ID              shift and go to state 244


state 235

    (58) cin4 -> empty .

    RPAREN          reduce using rule 58 (cin4 -> empty .)


state 236

    (61) forward -> FORWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 245


state 237

    (62) backward -> BACKWARD LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 246


state 238

    (63) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 247


state 239

    (64) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 248


state 240

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 249


state 241

    (41) cond -> IF LPAREN express RPAREN block else SEMICOLON .

    IF              reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    ID              reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    CALL            reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    CIN             reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    COUT            reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DELAY           reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    FORWARD         reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    BACKWARD        reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    TURNLEFT        reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    TURNRIGHT       reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    SERVO           reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    LIGHTS          reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DISPLAY         reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    DISTANCE        reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    STOP            reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    RETURN          reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    RCURLY          reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    ELSE            reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)
    SEMICOLON       reduce using rule 41 (cond -> IF LPAREN express RPAREN block else SEMICOLON .)


state 242

    (42) else -> ELSE block .

    SEMICOLON       reduce using rule 42 (else -> ELSE block .)


state 243

    (56) cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .

    SEMICOLON       reduce using rule 56 (cin3 -> LBRACKET CTE_INT RBRACKET LPAREN cin4 RPAREN .)


state 244

    (57) cin4 -> COMMA ID . cin4
    (57) cin4 -> . COMMA ID cin4
    (58) cin4 -> . empty
    (107) empty -> .

    COMMA           shift and go to state 234
    RPAREN          reduce using rule 107 (empty -> .)

    cin4                           shift and go to state 250
    empty                          shift and go to state 235

state 245

    (61) forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 61 (forward -> FORWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 246

    (62) backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 62 (backward -> BACKWARD LPAREN express COMMA express RPAREN SEMICOLON .)


state 247

    (63) turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 63 (turnleft -> TURNLEFT LPAREN express COMMA express RPAREN SEMICOLON .)


state 248

    (64) turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .

    IF              reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ID              reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CALL            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    CIN             reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    COUT            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DELAY           reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    FORWARD         reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SERVO           reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    STOP            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    ELSE            reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 64 (turnright -> TURNRIGHT LPAREN express COMMA express RPAREN SEMICOLON .)


state 249

    (66) lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .

    IF              reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ID              reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CALL            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    CIN             reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    COUT            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DELAY           reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    FORWARD         reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    BACKWARD        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNLEFT        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    TURNRIGHT       reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SERVO           reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    LIGHTS          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISPLAY         reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    DISTANCE        reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    STOP            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    ELSE            reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 66 (lights -> LIGHTS LPAREN CTE_INT COMMA CTE_INT RPAREN SEMICOLON .)


state 250

    (57) cin4 -> COMMA ID cin4 .

    RPAREN          reduce using rule 57 (cin4 -> COMMA ID cin4 .)

